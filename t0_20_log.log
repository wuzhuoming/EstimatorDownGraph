Source path:... C:/Users/Wu/Desktop/checkpoint_test/t0.py
New var:....... __name__ = '__main__'
New var:....... __doc__ = None
New var:....... __package__ = None
New var:....... __loader__ = <_frozen_importlib_external.SourceFileLoader object at 0x000001F3B929A208>
New var:....... __spec__ = None
New var:....... __annotations__ = {}
New var:....... __builtins__ = <module 'builtins' (built-in)>
New var:....... __file__ = 'C:/Users/Wu/Desktop/checkpoint_test/t0.py'
New var:....... __cached__ = None
New var:....... absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0), 16384)
New var:....... division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
New var:....... print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)
New var:....... text_format = <module 'google.protobuf.text_format' from 'C:\\...site-packages\\google\\protobuf\\text_format.py'>
New var:....... tf = <module 'tensorflow' from 'C:\\Users\\Wu\\Anacon...PU\\lib\\site-packages\\tensorflow\\__init__.py'>
New var:....... tfds = <module 'tensorflow_datasets' from 'C:\\Users\\W...site-packages\\tensorflow_datasets\\__init__.py'>
New var:....... pysnooper = <module 'pysnooper' from 'C:\\Users\\Wu\\Anacond...CPU\\lib\\site-packages\\pysnooper\\__init__.py'>
New var:....... BUFFER_SIZE = 10000
New var:....... BATCH_SIZE = 128
New var:....... LEARNING_RATE = 0.0001
New var:....... CLUSTER_SPEC = {'worker': ['localhost:12345', 'localhost:23456']}
New var:....... start_server = <function start_server at 0x000001F3B9192EA0>
New var:....... load_graph = <function load_graph at 0x000001F3BA10B268>
New var:....... load_parameter = <function load_parameter at 0x000001F3D63DAEA0>
New var:....... job_name = 'worker'
New var:....... task_index = 0
New var:....... tf_config = allow_soft_placement: truelog_device_placement: true
New var:....... server = <tensorflow.python.training.server_lib.Server object at 0x000001F3B9516940>
New var:....... cluster = <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001F3B929A2E8>
New var:....... run_option = timeout_in_ms: 10000
New var:....... sess = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
New var:....... op = <tf.Operation 'worker/save/restore_all' type=NoOp>
New var:....... multiDeviceInteratorInit = <tf.Operation 'worker/MultiDeviceIteratorInit' type=MultiDeviceIteratorInit>
New var:....... IteratorInit = <tf.Operation 'worker/MakeIterator' type=MakeIterator>
New var:....... IteratorGetNext = <tf.Operation 'worker/IteratorGetNext' type=IteratorGetNext>
New var:....... train_op = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
New var:....... loss = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
15:57:50.919494 line        85             _, train_loss = sess.run([train_op, loss])
Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
Starting var:.. fetches = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
Starting var:.. feed_dict = None
Starting var:.. options = None
Starting var:.. run_metadata = None
15:57:50.977340 call       846   def run(self, fetches, feed_dict=None, options=None, run_metadata=None):
15:57:50.996289 line       951         compat.as_bytes(options.SerializeToString())) if options else None
New var:....... options_ptr = None
15:57:50.999281 line       952     run_metadata_ptr = tf_session.TF_NewBuffer() if run_metadata else None
New var:....... run_metadata_ptr = None
15:57:51.000278 line       954     try:
15:57:51.001276 line       955       result = self._run(None, fetches, feed_dict, options_ptr,
15:57:51.001276 line       956                          run_metadata_ptr)
    Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
    Starting var:.. handle = None
    Starting var:.. fetches = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
    Starting var:.. feed_dict = None
    Starting var:.. options = None
    Starting var:.. run_metadata = None
    15:57:51.001276 call      1091   def _run(self, handle, fetches, feed_dict, options, run_metadata):
    15:57:51.003270 line      1094     def _feed_fn(feed, feed_val):
    New var:....... _feed_fn = <function BaseSession._run.<locals>._feed_fn at 0x000001F3DB99F378>
    15:57:51.004267 line      1102     if self._closed:
    15:57:51.004267 line      1104     if self.graph.version == 0:
        Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
        15:57:51.005265 call       773   def graph(self):
        15:57:51.005265 line       775     return self._graph
        15:57:51.005265 return     775     return self._graph
        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
        Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
        15:57:51.006262 call      3036   def version(self):
        15:57:51.008256 line      3045     if self._finalized:
        15:57:51.009254 line      3048     with self._lock:
        15:57:51.009254 line      3049       return self._version
        15:57:51.009254 return    3049       return self._version
        Return value:.. 972
    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
    15:57:51.010251 line      1109     feed_dict_tensor = object_identity.ObjectIdentityDictionary()
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
        Starting var:.. self = REPR FAILED
        15:57:51.010251 call       111   def __init__(self):
        15:57:51.011248 line       112     self._storage = {}
        Modified var:.. self = ObjectIdentityDictionary({})
        15:57:51.011248 return     112     self._storage = {}
        Return value:.. None
    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
    New var:....... feed_dict_tensor = ObjectIdentityDictionary({})
    15:57:51.012246 line      1110     feed_map = {}
    New var:....... feed_map = {}
    15:57:51.013243 line      1113     feed_handles = {}
    New var:....... feed_handles = {}
    15:57:51.013243 line      1114     if feed_dict:
    15:57:51.014240 line      1164     fetch_handler = _FetchHandler(
    15:57:51.014240 line      1165         self._graph, fetches, feed_dict_tensor, feed_handles=feed_handles)
        Starting var:.. self = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
        Starting var:.. graph = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
        Starting var:.. fetches = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
        Starting var:.. feeds = ObjectIdentityDictionary({})
        Starting var:.. feed_handles = {}
        15:57:51.014240 call       461   def __init__(self, graph, fetches, feeds, feed_handles=None):
        15:57:51.016235 line       473     with graph.as_default():
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
            Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
            15:57:51.016235 call      3832   def as_default(self):
            15:57:51.017233 line      3872     return _default_graph_stack.get_controller(self)
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                Starting var:.. args = (<tensorflow.python.framework.ops._DefaultGraphS...ramework.ops.Graph object at 0x000001F3D63BF710>)
                Starting var:.. kwds = {}
                Starting var:.. func = <function _DefaultGraphStack.get_controller at 0x000001F3D21A2400>
                15:57:51.017233 call       158     def helper(*args, **kwds):
                15:57:51.018230 line       159         return _GeneratorContextManager(func, args, kwds)
                    Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB6A8D0>
                    Starting var:.. func = <function _DefaultGraphStack.get_controller at 0x000001F3D21A2400>
                    Starting var:.. args = (<tensorflow.python.framework.ops._DefaultGraphS...ramework.ops.Graph object at 0x000001F3D63BF710>)
                    Starting var:.. kwds = {}
                    15:57:51.019227 call        59     def __init__(self, func, args, kwds):
                    15:57:51.020225 line        60         self.gen = func(*args, **kwds)
                    15:57:51.020225 line        61         self.func, self.args, self.kwds = func, args, kwds
                    15:57:51.020225 line        63         doc = getattr(func, "__doc__", None)
                    New var:....... doc = None
                    15:57:51.020225 line        64         if doc is None:
                    15:57:51.021222 line        65             doc = type(self).__doc__
                    Modified var:.. doc = 'Helper for @contextmanager decorator.'
                    15:57:51.021222 line        66         self.__doc__ = doc
                    15:57:51.021222 return      66         self.__doc__ = doc
                    Return value:.. None
                15:57:51.022219 return     159         return _GeneratorContextManager(func, args, kwds)
                Return value:.. <contextlib._GeneratorContextManager object at 0x000001F3DBB6A8D0>
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
            15:57:51.022219 return    3872     return _default_graph_stack.get_controller(self)
            Return value:.. <contextlib._GeneratorContextManager object at 0x000001F3DBB6A8D0>
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
            Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB6A8D0>
            15:57:51.023216 call        79     def __enter__(self):
            15:57:51.024214 line        80         try:
            15:57:51.024214 line        81             return next(self.gen)
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                Starting var:.. default = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                Starting var:.. __class__ = <class 'tensorflow.python.framework.ops._DefaultGraphStack'>
                15:57:51.024214 call      5476   def get_controller(self, default):
                15:57:51.025211 line      5477     context.context().context_switches.push(default.building_function,
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    15:57:51.025211 call      1576 def context_safe():
                    15:57:51.027206 line      1578   return _context
                    15:57:51.027206 return    1578   return _context
                    Return value:.. <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                    Starting var:.. self = <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                    15:57:51.027206 call      1483   def context_switches(self):
                    15:57:51.028203 line      1485     return self._context_switches
                    15:57:51.028203 return    1485     return self._context_switches
                    Return value:.. <tensorflow.python.eager.context._ContextSwitchStack object at 0x000001F3D5D1E288>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                    Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                    15:57:51.029200 call      3299   def building_function(self):
                    15:57:51.029200 line      3301     return self._building_function
                    15:57:51.029200 return    3301     return self._building_function
                    Return value:.. False
                15:57:51.030198 line      5478                                             default.as_default,
                15:57:51.030198 line      5479                                             default._device_function_stack)
                    Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                    15:57:51.031195 call      4931   def _device_function_stack(self):
                    15:57:51.031195 line      4932     if self._stack_state_is_thread_local:
                    15:57:51.031195 line      4936       if not hasattr(self._thread_local, "_device_function_stack"):
                    15:57:51.031195 line      4939       return self._thread_local._device_function_stack
                    15:57:51.032192 return    4939       return self._thread_local._device_function_stack
                    Return value:.. <tensorflow.python.framework.traceable_stack.TraceableStack object at 0x000001F3D63D9860>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    Starting var:.. self = <tensorflow.python.eager.context._ContextSwitchStack object at 0x000001F3D5D1E288>
                    Starting var:.. is_building_function = False
                    Starting var:.. enter_context_fn = <bound method Graph.as_default of <tensorflow.py...ramework.ops.Graph object at 0x000001F3D63BF710>>
                    Starting var:.. device_stack = <tensorflow.python.framework.traceable_stack.TraceableStack object at 0x000001F3D63D9860>
                    15:57:51.032192 call       219   def push(self, is_building_function, enter_context_fn, device_stack):
                    15:57:51.033190 line       236     self.stack.append(
                    15:57:51.034187 line       237         ContextSwitch(is_building_function, enter_context_fn, device_stack))
                        Source path:... <string>
                        Starting var:.. _cls = <class 'tensorflow.python.eager.context.ContextSwitch'>
                        Starting var:.. is_building_function = False
                        Starting var:.. enter_context_fn = <bound method Graph.as_default of <tensorflow.py...ramework.ops.Graph object at 0x000001F3D63BF710>>
                        Starting var:.. device_stack = <tensorflow.python.framework.traceable_stack.TraceableStack object at 0x000001F3D63D9860>
                        15:57:51.034187 call        12 SOURCE IS UNAVAILABLE
                        15:57:51.035184 line        14 SOURCE IS UNAVAILABLE
                        15:57:51.036182 return      14 SOURCE IS UNAVAILABLE
                        Return value:.. ContextSwitch(is_building_function=False, enter_...ack.TraceableStack object at 0x000001F3D63D9860>)
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    15:57:51.036182 return     237         ContextSwitch(is_building_function, enter_context_fn, device_stack))
                    Return value:.. None
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                15:57:51.037179 line      5480     try:
                15:57:51.037179 line      5481       with super(_DefaultGraphStack,
                15:57:51.037179 line      5482                  self).get_controller(default) as g, context.graph_mode():
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    Starting var:.. args = (<tensorflow.python.framework.ops._DefaultGraphS...ramework.ops.Graph object at 0x000001F3D63BF710>)
                    Starting var:.. kwds = {}
                    Starting var:.. func = <function _DefaultStack.get_controller at 0x000001F3D219EE18>
                    15:57:51.038176 call       158     def helper(*args, **kwds):
                    15:57:51.039174 line       159         return _GeneratorContextManager(func, args, kwds)
                        Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E4E0>
                        Starting var:.. func = <function _DefaultStack.get_controller at 0x000001F3D219EE18>
                        Starting var:.. args = (<tensorflow.python.framework.ops._DefaultGraphS...ramework.ops.Graph object at 0x000001F3D63BF710>)
                        Starting var:.. kwds = {}
                        15:57:51.039174 call        59     def __init__(self, func, args, kwds):
                        15:57:51.040171 line        60         self.gen = func(*args, **kwds)
                        15:57:51.040171 line        61         self.func, self.args, self.kwds = func, args, kwds
                        15:57:51.041168 line        63         doc = getattr(func, "__doc__", None)
                        New var:....... doc = 'A context manager for manipulating a default stack.'
                        15:57:51.041168 line        64         if doc is None:
                        15:57:51.041168 line        66         self.__doc__ = doc
                        15:57:51.042166 return      66         self.__doc__ = doc
                        Return value:.. None
                    15:57:51.042166 return     159         return _GeneratorContextManager(func, args, kwds)
                    Return value:.. <contextlib._GeneratorContextManager object at 0x000001F3DBB9E4E0>
                    Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E4E0>
                    15:57:51.042166 call        79     def __enter__(self):
                    15:57:51.043163 line        80         try:
                    15:57:51.043163 line        81             return next(self.gen)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                        Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                        Starting var:.. default = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                        15:57:51.043163 call      5286   def get_controller(self, default):
                        15:57:51.044160 line      5288     self.stack.append(default)
                        15:57:51.044160 line      5289     try:
                        15:57:51.045158 line      5290       yield default
                        15:57:51.045158 return    5290       yield default
                        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    15:57:51.045158 return      81             return next(self.gen)
                    Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    15:57:51.046155 call      1641 def graph_mode():
                    15:57:51.046155 line      1643   return context()._mode(GRAPH_MODE)  # pylint: disable=protected-access
                        15:57:51.047153 call      1576 def context_safe():
                        15:57:51.047153 line      1578   return _context
                        15:57:51.047153 return    1578   return _context
                        Return value:.. <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                        Starting var:.. args = (<tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>, 0)
                        Starting var:.. kwds = {}
                        Starting var:.. func = <function Context._mode at 0x000001F3D1FE3950>
                        15:57:51.048150 call       158     def helper(*args, **kwds):
                        15:57:51.049147 line       159         return _GeneratorContextManager(func, args, kwds)
                            Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E588>
                            Starting var:.. func = <function Context._mode at 0x000001F3D1FE3950>
                            Starting var:.. args = (<tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>, 0)
                            Starting var:.. kwds = {}
                            15:57:51.049147 call        59     def __init__(self, func, args, kwds):
                            15:57:51.050144 line        60         self.gen = func(*args, **kwds)
                            15:57:51.050144 line        61         self.func, self.args, self.kwds = func, args, kwds
                            15:57:51.051142 line        63         doc = getattr(func, "__doc__", None)
                            New var:....... doc = 'A context manager to allow setting the mode to EAGER/GRAPH.'
                            15:57:51.051142 line        64         if doc is None:
                            15:57:51.051142 line        66         self.__doc__ = doc
                            15:57:51.052139 return      66         self.__doc__ = doc
                            Return value:.. None
                        15:57:51.052139 return     159         return _GeneratorContextManager(func, args, kwds)
                        Return value:.. <contextlib._GeneratorContextManager object at 0x000001F3DBB9E588>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    15:57:51.052139 return    1643   return context()._mode(GRAPH_MODE)  # pylint: disable=protected-access
                    Return value:.. <contextlib._GeneratorContextManager object at 0x000001F3DBB9E588>
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E588>
                    15:57:51.053136 call        79     def __enter__(self):
                    15:57:51.054134 line        80         try:
                    15:57:51.054134 line        81             return next(self.gen)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                        Starting var:.. self = <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                        Starting var:.. mode = 0
                        15:57:51.054134 call       634   def _mode(self, mode):
                        15:57:51.055131 line       636     ctx = self._thread_local_data
                        New var:....... ctx = <tensorflow.python.eager.context._ThreadLocalData object at 0x000001F3D5CE0FA8>
                        15:57:51.055131 line       637     old_mode = ctx.mode
                        New var:....... old_mode = 0
                        15:57:51.056128 line       638     old_is_eager = ctx.is_eager
                        New var:....... old_is_eager = False
                        15:57:51.056128 line       639     ctx.mode = mode
                        15:57:51.057125 line       640     ctx.is_eager = mode == EAGER_MODE
                        15:57:51.057125 line       641     if mode == EAGER_MODE:
                        15:57:51.057125 line       646     try:
                        15:57:51.057125 line       647       yield
                        15:57:51.058123 return     647       yield
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    15:57:51.058123 return      81             return next(self.gen)
                    Return value:.. None
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                New var:....... g = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                15:57:51.059121 line      5483         yield g
                15:57:51.059121 return    5483         yield g
                Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
            15:57:51.060118 return      81             return next(self.gen)
            Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:51.060118 line       474       self._fetch_mapper = _FetchMapper.for_fetch(fetches)
            Starting var:.. fetch = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
            15:57:51.061115 call       248   def for_fetch(fetch):
            15:57:51.061115 line       261     if fetch is None:
            15:57:51.062112 line       264     elif isinstance(fetch, (list, tuple)):
            15:57:51.062112 line       266       return _ListFetchMapper(fetch)
                Starting var:.. self = <tensorflow.python.client.session._ListFetchMapper object at 0x000001F3DBB9E630>
                Starting var:.. fetches = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
                15:57:51.062112 call       368   def __init__(self, fetches):
                15:57:51.063110 line       374     self._fetch_type = type(fetches)
                15:57:51.063110 line       375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                    Starting var:.. .0 = <list_iterator object at 0x000001F3DBB6A5C0>
                    15:57:51.063110 call       375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                    15:57:51.064107 line       375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                        Starting var:.. fetch = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                        15:57:51.064107 call       248   def for_fetch(fetch):
                        15:57:51.065104 line       261     if fetch is None:
                        15:57:51.065104 line       264     elif isinstance(fetch, (list, tuple)):
                        15:57:51.065104 line       267     elif isinstance(fetch, collections_abc.Mapping):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'collections.abc.Mapping'>
                            Starting var:.. instance = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.065104 call       180     def __instancecheck__(cls, instance):
                            15:57:51.067099 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.067099 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E80>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.067099 call        70     def __contains__(self, item):
                                15:57:51.070091 line        71         try:
                                15:57:51.070091 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.070091 line        75         return wr in self.data
                                15:57:51.071088 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.071088 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.071088 line       187         if subtype is subclass:
                            15:57:51.072086 line       188             if (cls._abc_negative_cache_version ==
                            15:57:51.072086 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:51.072086 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.073083 call        70     def __contains__(self, item):
                                15:57:51.074081 line        71         try:
                                15:57:51.074081 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.074081 line        75         return wr in self.data
                                15:57:51.074081 return      75         return wr in self.data
                                Return value:.. True
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.075078 line       191                 return False
                            15:57:51.075078 return     191                 return False
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:51.076075 line       269     elif _is_attrs_instance(fetch):
                            Starting var:.. obj = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.076075 call       199 def _is_attrs_instance(obj):
                            15:57:51.077072 line       201   return getattr(obj.__class__, '__attrs_attrs__', None) is not None
                            15:57:51.077072 return     201   return getattr(obj.__class__, '__attrs_attrs__', None) is not None
                            Return value:.. False
                        15:57:51.077072 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        New var:....... tensor_type = <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>
                        New var:....... fetch_fn = <function _ragged_tensor_session_fetch at 0x000001F3D2C37AE8>
                        New var:....... _ = <function _ragged_tensor_session_feed_for_partial_run at 0x000001F3D2C37BF8>
                        15:57:51.078070 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>
                            Starting var:.. instance = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.079067 call       180     def __instancecheck__(cls, instance):
                            15:57:51.079067 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.080064 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306A0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.080064 call        70     def __contains__(self, item):
                                15:57:51.081062 line        71         try:
                                15:57:51.081062 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.082059 line        75         return wr in self.data
                                15:57:51.082059 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.082059 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.083056 line       187         if subtype is subclass:
                            15:57:51.083056 line       188             if (cls._abc_negative_cache_version ==
                            15:57:51.084054 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:51.084054 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D876F6D8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.084054 call        70     def __contains__(self, item):
                                15:57:51.085051 line        71         try:
                                15:57:51.085051 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.085051 line        75         return wr in self.data
                                15:57:51.086049 return      75         return wr in self.data
                                Return value:.. True
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.086049 line       191                 return False
                            15:57:51.087046 return     191                 return False
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:51.087046 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C0D0>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C1E0>
                        15:57:51.088043 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'>
                            Starting var:.. instance = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.089040 call       180     def __instancecheck__(cls, instance):
                            15:57:51.089040 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.090038 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E1D0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.090038 call        70     def __contains__(self, item):
                                15:57:51.091035 line        71         try:
                                15:57:51.091035 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.092032 line        75         return wr in self.data
                                15:57:51.092032 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.092032 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.093030 line       187         if subtype is subclass:
                            15:57:51.093030 line       188             if (cls._abc_negative_cache_version ==
                            15:57:51.094027 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:51.094027 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306D8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.094027 call        70     def __contains__(self, item):
                                15:57:51.095024 line        71         try:
                                15:57:51.095024 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.096022 line        75         return wr in self.data
                                15:57:51.096022 return      75         return wr in self.data
                                Return value:.. True
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.096022 line       191                 return False
                            15:57:51.097019 return     191                 return False
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:51.097019 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'tensorflow.python.framework.indexed_slices.IndexedSlices'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C268>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C2F0>
                        15:57:51.098016 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.framework.indexed_slices.IndexedSlices'>
                            Starting var:.. instance = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.099014 call       180     def __instancecheck__(cls, instance):
                            15:57:51.100011 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.100011 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D20344A8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.101008 call        70     def __contains__(self, item):
                                15:57:51.101008 line        71         try:
                                15:57:51.102006 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.102006 line        75         return wr in self.data
                                15:57:51.102006 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.103003 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Operation'>
                            15:57:51.103003 line       187         if subtype is subclass:
                            15:57:51.104001 line       188             if (cls._abc_negative_cache_version ==
                            15:57:51.104001 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:51.104001 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E908>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Operation'>
                                15:57:51.104998 call        70     def __contains__(self, item):
                                15:57:51.104998 line        71         try:
                                15:57:51.105995 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D21930E8; to 'type' at 0x000001F3D1239088 (Operation)>
                                15:57:51.105995 line        75         return wr in self.data
                                15:57:51.105995 return      75         return wr in self.data
                                Return value:.. True
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.106992 line       191                 return False
                            15:57:51.106992 return     191                 return False
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:51.107990 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'object'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C378>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C488>
                        15:57:51.107990 line       274         if isinstance(fetch, tensor_type):
                        15:57:51.108987 line       275           fetches, contraction_fn = fetch_fn(fetch)
                            Starting var:.. fetch = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.108987 call       132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            15:57:51.109985 line       132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            15:57:51.109985 return     132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            Return value:.. ([<tf.Operation 'worker/GradientDescent/update_0...lambda>.<locals>.<lambda> at 0x000001F3DBB8B730>)
                        New var:....... fetches = [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
                        New var:....... contraction_fn = <function <lambda>.<locals>.<lambda> at 0x000001F3DBB8B730>
                        15:57:51.110982 line       276           return _ElementFetchMapper(fetches, contraction_fn)
                            Starting var:.. self = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9E8D0>
                            Starting var:.. fetches = [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
                            Starting var:.. contraction_fn = <function <lambda>.<locals>.<lambda> at 0x000001F3DBB8B730>
                            15:57:51.110982 call       285   def __init__(self, fetches, contraction_fn):
                            15:57:51.111979 line       301     self._unique_fetches = []
                            15:57:51.111979 line       302     for fetch in fetches:
                            New var:....... fetch = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:51.112977 line       303       try:
                            15:57:51.112977 line       304         self._unique_fetches.append(ops.get_default_graph().as_graph_element(
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                                15:57:51.112977 call      5862 def get_default_graph():
                                15:57:51.113974 line      5877   return _default_graph_stack.get_default()
                                    Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                                    Starting var:.. __class__ = <class 'tensorflow.python.framework.ops._DefaultGraphStack'>
                                    15:57:51.113974 call      5455   def get_default(self):
                                    15:57:51.114971 line      5457     ret = super(_DefaultGraphStack, self).get_default()
                                        Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                                        15:57:51.114971 call      5268   def get_default(self):
                                        15:57:51.115968 line      5269     return self.stack[-1] if len(self.stack) >= 1 else None
                                        15:57:51.115968 return    5269     return self.stack[-1] if len(self.stack) >= 1 else None
                                        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    New var:....... ret = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    15:57:51.115968 line      5458     if ret is None:
                                    15:57:51.116966 line      5460     return ret
                                    15:57:51.116966 return    5460     return ret
                                    Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                15:57:51.117963 return    5877   return _default_graph_stack.get_default()
                                Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                            15:57:51.117963 line       305             fetch, allow_tensor=True, allow_operation=True))
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                                Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                Starting var:.. obj = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                Starting var:.. allow_tensor = True
                                Starting var:.. allow_operation = True
                                15:57:51.118960 call      3576   def as_graph_element(self, obj, allow_tensor=True, allow_operation=True):
                                15:57:51.119958 line      3606     if self._finalized:
                                15:57:51.119958 line      3609     with self._lock:
                                15:57:51.119958 line      3610       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)
                                    Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    Starting var:.. obj = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                    Starting var:.. allow_tensor = True
                                    Starting var:.. allow_operation = True
                                    15:57:51.120955 call      3612   def _as_graph_element_locked(self, obj, allow_tensor, allow_operation):
                                    15:57:51.121953 line      3621     if allow_tensor and allow_operation:
                                    15:57:51.121953 line      3622       types_str = "Tensor or Operation"
                                    New var:....... types_str = 'Tensor or Operation'
                                    15:57:51.121953 line      3630     temp_obj = _as_graph_element(obj)
                                        Starting var:.. obj = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                        15:57:51.122950 call       183 def _as_graph_element(obj):
                                        15:57:51.122950 line       193   conv_fn = getattr(obj, "_as_graph_element", None)
                                        New var:....... conv_fn = None
                                        15:57:51.123948 line       194   if conv_fn and callable(conv_fn):
                                        15:57:51.123948 line       196   return None
                                        15:57:51.123948 return     196   return None
                                        Return value:.. None
                                    New var:....... temp_obj = None
                                    15:57:51.124945 line      3631     if temp_obj is not None:
                                    15:57:51.124945 line      3635     if isinstance(obj, compat.bytes_or_text_types):
                                    15:57:51.125942 line      3686     elif isinstance(obj, Tensor) and allow_tensor:
                                    15:57:51.125942 line      3691     elif isinstance(obj, Operation) and allow_operation:
                                    15:57:51.125942 line      3693       if obj.graph is not self:
                                        Starting var:.. self = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                        15:57:51.126940 call      2262   def graph(self):
                                        15:57:51.126940 line      2264     return self._graph
                                        15:57:51.126940 return    2264     return self._graph
                                        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    15:57:51.127937 line      3695       return obj
                                    15:57:51.127937 return    3695       return obj
                                    Return value:.. <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                15:57:51.127937 return    3610       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)
                                Return value:.. <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                            15:57:51.128934 line       302     for fetch in fetches:
                            15:57:51.128934 line       316     self._contraction_fn = contraction_fn
                            15:57:51.129931 return     316     self._contraction_fn = contraction_fn
                            Return value:.. None
                        15:57:51.129931 return     276           return _ElementFetchMapper(fetches, contraction_fn)
                        Return value:.. <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9E8D0>
                    New var:....... fetch = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                    15:57:51.130928 line       375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                        Starting var:.. fetch = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                        15:57:51.130928 call       248   def for_fetch(fetch):
                        15:57:51.131926 line       261     if fetch is None:
                        15:57:51.131926 line       264     elif isinstance(fetch, (list, tuple)):
                        15:57:51.132923 line       267     elif isinstance(fetch, collections_abc.Mapping):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'collections.abc.Mapping'>
                            Starting var:.. instance = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:51.132923 call       180     def __instancecheck__(cls, instance):
                            15:57:51.133921 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:51.133921 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E80>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:51.134918 call        70     def __contains__(self, item):
                                15:57:51.134918 line        71         try:
                                15:57:51.135915 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:51.135915 line        75         return wr in self.data
                                15:57:51.135915 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.136912 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:51.136912 line       187         if subtype is subclass:
                            15:57:51.137910 line       188             if (cls._abc_negative_cache_version ==
                            15:57:51.137910 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:51.137910 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:51.138907 call        70     def __contains__(self, item):
                                15:57:51.138907 line        71         try:
                                15:57:51.139904 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:51.139904 line        75         return wr in self.data
                                15:57:51.139904 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:51.140902 line       193             return cls.__subclasscheck__(subclass)
                                Starting var:.. cls = <class 'collections.abc.Mapping'>
                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:51.140902 call       196     def __subclasscheck__(cls, subclass):
                                15:57:51.141899 line       199         if subclass in cls._abc_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E80>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:51.141899 call        70     def __contains__(self, item):
                                    15:57:51.142896 line        71         try:
                                    15:57:51.142896 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:51.143894 line        75         return wr in self.data
                                    15:57:51.143894 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:51.144891 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                15:57:51.144891 line       206         elif subclass in cls._abc_negative_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:51.144891 call        70     def __contains__(self, item):
                                    15:57:51.145888 line        71         try:
                                    15:57:51.145888 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:51.146886 line        75         return wr in self.data
                                    15:57:51.146886 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:51.147883 line       209         ok = cls.__subclasshook__(subclass)
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                    Starting var:.. cls = <class 'collections.abc.Mapping'>
                                    Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:51.147883 call       393     def __subclasshook__(cls, C):
                                    15:57:51.149878 line       394         if cls is Collection:
                                    15:57:51.149878 line       396         return NotImplemented
                                    15:57:51.150875 return     396         return NotImplemented
                                    Return value:.. NotImplemented
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                New var:....... ok = NotImplemented
                                15:57:51.150875 line       210         if ok is not NotImplemented:
                                15:57:51.151873 line       218         if cls in getattr(subclass, '__mro__', ()):
                                15:57:51.151873 line       222         for rcls in cls._abc_registry:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                    15:57:51.151873 call        58     def __iter__(self):
                                    15:57:51.152870 line        59         with _IterationGuard(self):
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                        15:57:51.152870 call        16     def __init__(self, weakcontainer):
                                        15:57:51.153867 line        18         self.weakcontainer = ref(weakcontainer)
                                        15:57:51.153867 return      18         self.weakcontainer = ref(weakcontainer)
                                        Return value:.. None
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:51.153867 call        20     def __enter__(self):
                                        15:57:51.154865 line        21         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                        15:57:51.154865 line        22         if w is not None:
                                        15:57:51.155862 line        23             w._iterating.add(self)
                                        15:57:51.155862 line        24         return self
                                        15:57:51.155862 return      24         return self
                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                    15:57:51.155862 line        60             for itemref in self.data:
                                    New var:....... itemref = <weakref at 0x000001F3B9351318; to 'type' at 0x0000000075AF09B0 (mappingproxy)>
                                    15:57:51.156859 line        61                 item = itemref()
                                    New var:....... item = <class 'mappingproxy'>
                                    15:57:51.156859 line        62                 if item is not None:
                                    15:57:51.157856 line        65                     yield item
                                    15:57:51.157856 return      65                     yield item
                                    Return value:.. <class 'mappingproxy'>
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                New var:....... rcls = <class 'mappingproxy'>
                                15:57:51.157856 line       223             if issubclass(subclass, rcls):
                                15:57:51.158855 line       222         for rcls in cls._abc_registry:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                    Starting var:.. itemref = <weakref at 0x000001F3B9351318; to 'type' at 0x0000000075AF09B0 (mappingproxy)>
                                    Starting var:.. item = <class 'mappingproxy'>
                                    15:57:51.158855 call        65                     yield item
                                    15:57:51.159851 line        60             for itemref in self.data:
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        Starting var:.. e = None
                                        Starting var:.. t = None
                                        Starting var:.. b = None
                                        15:57:51.159851 call        26     def __exit__(self, e, t, b):
                                        15:57:51.161846 line        27         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                        15:57:51.161846 line        28         if w is not None:
                                        15:57:51.161846 line        29             s = w._iterating
                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                        15:57:51.161846 line        30             s.remove(self)
                                        Modified var:.. s = set()
                                        15:57:51.162843 line        31             if not s:
                                        15:57:51.162843 line        32                 w._commit_removals()
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                            15:57:51.163841 call        52     def _commit_removals(self):
                                            15:57:51.163841 line        53         l = self._pending_removals
                                            New var:....... l = []
                                            15:57:51.163841 line        54         discard = self.data.discard
                                            New var:....... discard = <built-in method discard of set object at 0x000001F3B934F9E8>
                                            15:57:51.164838 line        55         while l:
                                            15:57:51.164838 return      55         while l:
                                            Return value:.. None
                                        15:57:51.165835 return      32                 w._commit_removals()
                                        Return value:.. None
                                    15:57:51.165835 return      60             for itemref in self.data:
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:51.166833 exception  222         for rcls in cls._abc_registry:
                                StopIteration
                                15:57:51.166833 line       227         for scls in cls.__subclasses__():
                                New var:....... scls = <class 'collections.abc.MutableMapping'>
                                15:57:51.167830 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'collections.abc.MutableMapping'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:51.167830 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:51.168827 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B93546A0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.168827 call        70     def __contains__(self, item):
                                        15:57:51.169824 line        71         try:
                                        15:57:51.169824 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:51.169824 line        75         return wr in self.data
                                        15:57:51.170822 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.170822 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:51.171819 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.171819 call        70     def __contains__(self, item):
                                        15:57:51.172817 line        71         try:
                                        15:57:51.172817 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:51.172817 line        75         return wr in self.data
                                        15:57:51.173814 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.173814 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'collections.abc.MutableMapping'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.174811 call       393     def __subclasshook__(cls, C):
                                        15:57:51.175808 line       394         if cls is Collection:
                                        15:57:51.175808 line       396         return NotImplemented
                                        15:57:51.175808 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:51.175808 line       210         if ok is not NotImplemented:
                                    15:57:51.176806 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:51.176806 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                        15:57:51.177803 call        58     def __iter__(self):
                                        15:57:51.177803 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E828>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                            15:57:51.177803 call        16     def __init__(self, weakcontainer):
                                            15:57:51.178800 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:51.178800 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E828>
                                            15:57:51.179797 call        20     def __enter__(self):
                                            15:57:51.179797 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                            15:57:51.179797 line        22         if w is not None:
                                            15:57:51.180795 line        23             w._iterating.add(self)
                                            15:57:51.180795 line        24         return self
                                            15:57:51.181792 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E828>
                                        15:57:51.181792 line        60             for itemref in self.data:
                                        New var:....... itemref = <weakref at 0x000001F3B9351C28; to 'type' at 0x0000000075AF1980 (dict)>
                                        15:57:51.181792 line        61                 item = itemref()
                                        New var:....... item = <class 'dict'>
                                        15:57:51.182790 line        62                 if item is not None:
                                        15:57:51.182790 line        65                     yield item
                                        15:57:51.182790 return      65                     yield item
                                        Return value:.. <class 'dict'>
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... rcls = <class 'dict'>
                                    15:57:51.183787 line       223             if issubclass(subclass, rcls):
                                    15:57:51.184784 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                        Starting var:.. itemref = <weakref at 0x000001F3B9351C28; to 'type' at 0x0000000075AF1980 (dict)>
                                        Starting var:.. item = <class 'dict'>
                                        15:57:51.184784 call        65                     yield item
                                        15:57:51.185782 line        60             for itemref in self.data:
                                        Modified var:.. itemref = <weakref at 0x000001F3B9AFA958; to 'type' at 0x000001F3B97CCA28 (ParseResults)>
                                        15:57:51.185782 line        61                 item = itemref()
                                        Modified var:.. item = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                        15:57:51.186779 line        62                 if item is not None:
                                        15:57:51.186779 line        65                     yield item
                                        15:57:51.186779 return      65                     yield item
                                        Return value:.. <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    Modified var:.. rcls = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                    15:57:51.187776 line       223             if issubclass(subclass, rcls):
                                    15:57:51.187776 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                        Starting var:.. itemref = <weakref at 0x000001F3B9AFA958; to 'type' at 0x000001F3B97CCA28 (ParseResults)>
                                        Starting var:.. item = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                        15:57:51.188774 call        65                     yield item
                                        15:57:51.189771 line        60             for itemref in self.data:
                                        Modified var:.. itemref = <weakref at 0x000001F3D1F280E8; to 'type' at 0x000001F3BA05F368 (Struct)>
                                        15:57:51.189771 line        61                 item = itemref()
                                        Modified var:.. item = <class 'google.protobuf.internal.well_known_types.Struct'>
                                        15:57:51.189771 line        62                 if item is not None:
                                        15:57:51.190768 line        65                     yield item
                                        15:57:51.190768 return      65                     yield item
                                        Return value:.. <class 'google.protobuf.internal.well_known_types.Struct'>
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    Modified var:.. rcls = <class 'google.protobuf.internal.well_known_types.Struct'>
                                    15:57:51.190768 line       223             if issubclass(subclass, rcls):
                                    15:57:51.191766 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                        Starting var:.. itemref = <weakref at 0x000001F3D1F280E8; to 'type' at 0x000001F3BA05F368 (Struct)>
                                        Starting var:.. item = <class 'google.protobuf.internal.well_known_types.Struct'>
                                        15:57:51.191766 call        65                     yield item
                                        15:57:51.192764 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E828>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:51.193761 call        26     def __exit__(self, e, t, b):
                                            15:57:51.194758 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                            15:57:51.194758 line        28         if w is not None:
                                            15:57:51.194758 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E828>}
                                            15:57:51.195756 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:51.195756 line        31             if not s:
                                            15:57:51.196753 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                15:57:51.196753 call        52     def _commit_removals(self):
                                                15:57:51.196753 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:51.197750 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3B9357588>
                                                15:57:51.197750 line        55         while l:
                                                15:57:51.198747 return      55         while l:
                                                Return value:.. None
                                            15:57:51.198747 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:51.198747 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.199745 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:51.200742 line       227         for scls in cls.__subclasses__():
                                    New var:....... scls = <class 'os._Environ'>
                                    15:57:51.200742 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'os._Environ'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.200742 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.201739 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92BFA20>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.201739 call        70     def __contains__(self, item):
                                            15:57:51.202737 line        71         try:
                                            15:57:51.202737 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.203734 line        75         return wr in self.data
                                            15:57:51.203734 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.204731 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.204731 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4128>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.204731 call        70     def __contains__(self, item):
                                            15:57:51.205728 line        71         try:
                                            15:57:51.205728 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.206726 line        75         return wr in self.data
                                            15:57:51.206726 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.206726 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'os._Environ'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.207723 call       393     def __subclasshook__(cls, C):
                                            15:57:51.208720 line       394         if cls is Collection:
                                            15:57:51.208720 line       396         return NotImplemented
                                            15:57:51.208720 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.209718 line       210         if ok is not NotImplemented:
                                        15:57:51.209718 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.210715 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92AF8D0>
                                            15:57:51.210715 call        58     def __iter__(self):
                                            15:57:51.210715 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9EAC8>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B92AF8D0>
                                                15:57:51.211713 call        16     def __init__(self, weakcontainer):
                                                15:57:51.211713 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.212710 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9EAC8>
                                                15:57:51.212710 call        20     def __enter__(self):
                                                15:57:51.213707 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B92AF8D0>
                                                15:57:51.213707 line        22         if w is not None:
                                                15:57:51.213707 line        23             w._iterating.add(self)
                                                15:57:51.214704 line        24         return self
                                                15:57:51.214704 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9EAC8>
                                            15:57:51.214704 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9EAC8>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.214704 call        26     def __exit__(self, e, t, b):
                                                15:57:51.216699 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B92AF8D0>
                                                15:57:51.216699 line        28         if w is not None:
                                                15:57:51.216699 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9EAC8>}
                                                15:57:51.216699 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.217697 line        31             if not s:
                                                15:57:51.217697 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92AF8D0>
                                                    15:57:51.218694 call        52     def _commit_removals(self):
                                                    15:57:51.218694 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.218694 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B9359C88>
                                                    15:57:51.219691 line        55         while l:
                                                    15:57:51.219691 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.220688 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.220688 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.221686 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.221686 line       227         for scls in cls.__subclasses__():
                                        15:57:51.221686 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4128>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.222683 call        81     def add(self, item):
                                            15:57:51.223680 line        82         if self._pending_removals:
                                            15:57:51.223680 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.223680 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.224678 line       233         return False
                                        15:57:51.224678 return     233         return False
                                        Return value:.. False
                                    15:57:51.224678 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'collections.ChainMap'>
                                    15:57:51.225675 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'collections.ChainMap'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.225675 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.226672 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A90>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.226672 call        70     def __contains__(self, item):
                                            15:57:51.227670 line        71         try:
                                            15:57:51.227670 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.227670 line        75         return wr in self.data
                                            15:57:51.228667 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.228667 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.229665 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.229665 call        70     def __contains__(self, item):
                                            15:57:51.230662 line        71         try:
                                            15:57:51.230662 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.230662 line        75         return wr in self.data
                                            15:57:51.231659 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.231659 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'collections.ChainMap'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.232656 call       393     def __subclasshook__(cls, C):
                                            15:57:51.233654 line       394         if cls is Collection:
                                            15:57:51.233654 line       396         return NotImplemented
                                            15:57:51.233654 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.234651 line       210         if ok is not NotImplemented:
                                        15:57:51.234651 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.235649 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                            15:57:51.235649 call        58     def __iter__(self):
                                            15:57:51.235649 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                15:57:51.236646 call        16     def __init__(self, weakcontainer):
                                                15:57:51.236646 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.237643 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.237643 call        20     def __enter__(self):
                                                15:57:51.238641 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                15:57:51.238641 line        22         if w is not None:
                                                15:57:51.238641 line        23             w._iterating.add(self)
                                                15:57:51.238641 line        24         return self
                                                15:57:51.239638 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.239638 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.239638 call        26     def __exit__(self, e, t, b):
                                                15:57:51.240635 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                15:57:51.241632 line        28         if w is not None:
                                                15:57:51.241632 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.241632 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.242630 line        31             if not s:
                                                15:57:51.242630 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                    15:57:51.243627 call        52     def _commit_removals(self):
                                                    15:57:51.243627 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.243627 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B94CD128>
                                                    15:57:51.244625 line        55         while l:
                                                    15:57:51.244625 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.245622 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.245622 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.246620 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.246620 line       227         for scls in cls.__subclasses__():
                                        New var:....... scls = typing.ChainMap
                                        15:57:51.246620 line       228             if issubclass(subclass, scls):
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.ChainMap
                                            Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                            Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                            15:57:51.247618 call      1145     def __subclasscheck__(self, cls):
                                            15:57:51.249611 line      1146         if self.__origin__ is not None:
                                            15:57:51.249611 line      1151         if self is Generic:
                                            15:57:51.250608 line      1154         return super().__subclasscheck__(cls)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = typing.ChainMap
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.250608 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:51.251606 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A90>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.251606 call        70     def __contains__(self, item):
                                                    15:57:51.252603 line        71         try:
                                                    15:57:51.252603 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:51.252603 line        75         return wr in self.data
                                                    15:57:51.253600 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.253600 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.ChainMap
                                                    15:57:51.254598 call      1034     def _abc_negative_cache_version(self):
                                                    15:57:51.254598 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                    15:57:51.255595 line      1036             return self.__extra__._abc_negative_cache_version
                                                    15:57:51.255595 return    1036             return self.__extra__._abc_negative_cache_version
                                                    Return value:.. 57
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.255595 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.ChainMap
                                                    15:57:51.256593 call      1020     def _abc_negative_cache(self):
                                                    15:57:51.256593 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                    15:57:51.257590 line      1022             return self.__extra__._abc_negative_cache
                                                    15:57:51.257590 return    1022             return self.__extra__._abc_negative_cache
                                                    Return value:.. <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.257590 call        70     def __contains__(self, item):
                                                    15:57:51.258587 line        71         try:
                                                    15:57:51.258587 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:51.259584 line        75         return wr in self.data
                                                    15:57:51.259584 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.260582 line       209         ok = cls.__subclasshook__(subclass)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    Starting var:.. cls = typing.ChainMap
                                                    15:57:51.260582 call       875         def __extrahook__(subclass):
                                                    15:57:51.261579 line       876             res = cls.__extra__.__subclasshook__(subclass)
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                        Starting var:.. cls = <class 'collections.ChainMap'>
                                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.261579 call       393     def __subclasshook__(cls, C):
                                                        15:57:51.262576 line       394         if cls is Collection:
                                                        15:57:51.262576 line       396         return NotImplemented
                                                        15:57:51.262576 return     396         return NotImplemented
                                                        Return value:.. NotImplemented
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    New var:....... res = NotImplemented
                                                    15:57:51.263574 line       877             if res is not NotImplemented:
                                                    15:57:51.264571 line       879             if cls.__extra__ in subclass.__mro__:
                                                    15:57:51.264571 line       881             for scls in cls.__extra__.__subclasses__():
                                                    New var:....... scls = typing.ChainMap
                                                    15:57:51.264571 line       882                 if isinstance(scls, GenericMeta):
                                                    15:57:51.265568 line       883                     continue
                                                    15:57:51.265568 line       881             for scls in cls.__extra__.__subclasses__():
                                                    15:57:51.265568 line       886             return NotImplemented
                                                    15:57:51.265568 return     886             return NotImplemented
                                                    Return value:.. NotImplemented
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                New var:....... ok = NotImplemented
                                                15:57:51.266566 line       210         if ok is not NotImplemented:
                                                15:57:51.266566 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.ChainMap
                                                    Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.267563 call      1089     def __eq__(self, other):
                                                    15:57:51.268560 line      1090         if not isinstance(other, GenericMeta):
                                                    15:57:51.268560 line      1091             return NotImplemented
                                                    15:57:51.268560 return    1091             return NotImplemented
                                                    Return value:.. NotImplemented
                                                    Starting var:.. self = typing.ChainMap
                                                    Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                                    15:57:51.269558 call      1089     def __eq__(self, other):
                                                    15:57:51.269558 line      1090         if not isinstance(other, GenericMeta):
                                                    15:57:51.269558 line      1091             return NotImplemented
                                                    15:57:51.270555 return    1091             return NotImplemented
                                                    Return value:.. NotImplemented
                                                    Starting var:.. self = typing.ChainMap
                                                    Starting var:.. other = <class 'object'>
                                                    15:57:51.270555 call      1089     def __eq__(self, other):
                                                    15:57:51.271552 line      1090         if not isinstance(other, GenericMeta):
                                                    15:57:51.271552 line      1091             return NotImplemented
                                                    15:57:51.271552 return    1091             return NotImplemented
                                                    Return value:.. NotImplemented
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.272550 line       222         for rcls in cls._abc_registry:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                    15:57:51.272550 call        58     def __iter__(self):
                                                    15:57:51.273547 line        59         with _IterationGuard(self):
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                        15:57:51.273547 call        16     def __init__(self, weakcontainer):
                                                        15:57:51.274544 line        18         self.weakcontainer = ref(weakcontainer)
                                                        15:57:51.274544 return      18         self.weakcontainer = ref(weakcontainer)
                                                        Return value:.. None
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                        15:57:51.274544 call        20     def __enter__(self):
                                                        15:57:51.275542 line        21         w = self.weakcontainer()
                                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                        15:57:51.275542 line        22         if w is not None:
                                                        15:57:51.275542 line        23             w._iterating.add(self)
                                                        15:57:51.276539 line        24         return self
                                                        15:57:51.276539 return      24         return self
                                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    15:57:51.276539 line        60             for itemref in self.data:
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                        Starting var:.. e = None
                                                        Starting var:.. t = None
                                                        Starting var:.. b = None
                                                        15:57:51.277536 call        26     def __exit__(self, e, t, b):
                                                        15:57:51.278534 line        27         w = self.weakcontainer()
                                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                        15:57:51.278534 line        28         if w is not None:
                                                        15:57:51.278534 line        29             s = w._iterating
                                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                        15:57:51.279531 line        30             s.remove(self)
                                                        Modified var:.. s = set()
                                                        15:57:51.279531 line        31             if not s:
                                                        15:57:51.280528 line        32                 w._commit_removals()
                                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A58>
                                                            15:57:51.280528 call        52     def _commit_removals(self):
                                                            15:57:51.280528 line        53         l = self._pending_removals
                                                            New var:....... l = []
                                                            15:57:51.281526 line        54         discard = self.data.discard
                                                            New var:....... discard = <built-in method discard of set object at 0x000001F3B94CD128>
                                                            15:57:51.281526 line        55         while l:
                                                            15:57:51.282523 return      55         while l:
                                                            Return value:.. None
                                                        15:57:51.282523 return      32                 w._commit_removals()
                                                        Return value:.. None
                                                    15:57:51.282523 return      60             for itemref in self.data:
                                                    Return value:.. None
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.283520 exception  222         for rcls in cls._abc_registry:
                                                StopIteration
                                                15:57:51.284518 line       227         for scls in cls.__subclasses__():
                                                15:57:51.284518 line       232         cls._abc_negative_cache.add(subclass)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.ChainMap
                                                    15:57:51.284518 call      1020     def _abc_negative_cache(self):
                                                    15:57:51.285515 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                    15:57:51.285515 line      1022             return self.__extra__._abc_negative_cache
                                                    15:57:51.285515 return    1022             return self.__extra__._abc_negative_cache
                                                    Return value:.. <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.286512 call        81     def add(self, item):
                                                    15:57:51.286512 line        82         if self._pending_removals:
                                                    15:57:51.287510 line        84         self.data.add(ref(item, self._remove))
                                                    15:57:51.287510 return      84         self.data.add(ref(item, self._remove))
                                                    Return value:.. None
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.287510 line       233         return False
                                                15:57:51.288507 return     233         return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:51.288507 return    1154         return super().__subclasscheck__(cls)
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.289504 line       227         for scls in cls.__subclasses__():
                                        15:57:51.289504 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.290502 call        81     def add(self, item):
                                            15:57:51.291499 line        82         if self._pending_removals:
                                            15:57:51.291499 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.291499 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.291499 line       233         return False
                                        15:57:51.292496 return     233         return False
                                        Return value:.. False
                                    15:57:51.292496 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'collections.UserDict'>
                                    15:57:51.293494 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'collections.UserDict'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.293494 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.294491 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1C50>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.294491 call        70     def __contains__(self, item):
                                            15:57:51.295488 line        71         try:
                                            15:57:51.295488 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.295488 line        75         return wr in self.data
                                            15:57:51.296486 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.296486 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.297483 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF438>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.297483 call        70     def __contains__(self, item):
                                            15:57:51.298480 line        71         try:
                                            15:57:51.298480 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.298480 line        75         return wr in self.data
                                            15:57:51.299478 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.299478 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'collections.UserDict'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.300475 call       393     def __subclasshook__(cls, C):
                                            15:57:51.301472 line       394         if cls is Collection:
                                            15:57:51.301472 line       396         return NotImplemented
                                            15:57:51.301472 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.301472 line       210         if ok is not NotImplemented:
                                        15:57:51.302470 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.302470 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1C18>
                                            15:57:51.303467 call        58     def __iter__(self):
                                            15:57:51.303467 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B94C1C18>
                                                15:57:51.303467 call        16     def __init__(self, weakcontainer):
                                                15:57:51.304464 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.304464 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.305462 call        20     def __enter__(self):
                                                15:57:51.305462 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1C18>
                                                15:57:51.305462 line        22         if w is not None:
                                                15:57:51.306459 line        23             w._iterating.add(self)
                                                15:57:51.306459 line        24         return self
                                                15:57:51.306459 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.307456 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.307456 call        26     def __exit__(self, e, t, b):
                                                15:57:51.308454 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C1C18>
                                                15:57:51.308454 line        28         if w is not None:
                                                15:57:51.309451 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.309451 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.309451 line        31             if not s:
                                                15:57:51.310449 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1C18>
                                                    15:57:51.310449 call        52     def _commit_removals(self):
                                                    15:57:51.310449 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.311446 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B94CD668>
                                                    15:57:51.311446 line        55         while l:
                                                    15:57:51.312443 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.312443 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.312443 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.313440 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.313440 line       227         for scls in cls.__subclasses__():
                                        15:57:51.314438 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF438>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.314438 call        81     def add(self, item):
                                            15:57:51.315435 line        82         if self._pending_removals:
                                            15:57:51.315435 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.315435 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.316433 line       233         return False
                                        15:57:51.316433 return     233         return False
                                        Return value:.. False
                                    15:57:51.316433 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'weakref.WeakValueDictionary'>
                                    15:57:51.317430 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'weakref.WeakValueDictionary'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.317430 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.318427 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8CF8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.318427 call        70     def __contains__(self, item):
                                            15:57:51.319425 line        71         try:
                                            15:57:51.319425 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.319425 line        75         return wr in self.data
                                            15:57:51.320422 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.320422 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.321419 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9AFBBA8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.321419 call        70     def __contains__(self, item):
                                            15:57:51.322417 line        71         try:
                                            15:57:51.322417 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.322417 line        75         return wr in self.data
                                            15:57:51.323414 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.323414 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'weakref.WeakValueDictionary'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.323414 call       393     def __subclasshook__(cls, C):
                                            15:57:51.324411 line       394         if cls is Collection:
                                            15:57:51.324411 line       396         return NotImplemented
                                            15:57:51.325408 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.325408 line       210         if ok is not NotImplemented:
                                        15:57:51.326406 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.326406 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8CC0>
                                            15:57:51.326406 call        58     def __iter__(self):
                                            15:57:51.327403 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B94C8CC0>
                                                15:57:51.327403 call        16     def __init__(self, weakcontainer):
                                                15:57:51.328400 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.328400 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.328400 call        20     def __enter__(self):
                                                15:57:51.329398 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C8CC0>
                                                15:57:51.329398 line        22         if w is not None:
                                                15:57:51.329398 line        23             w._iterating.add(self)
                                                15:57:51.330395 line        24         return self
                                                15:57:51.330395 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.330395 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.331392 call        26     def __exit__(self, e, t, b):
                                                15:57:51.332390 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C8CC0>
                                                15:57:51.332390 line        28         if w is not None:
                                                15:57:51.332390 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.333387 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.333387 line        31             if not s:
                                                15:57:51.333387 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8CC0>
                                                    15:57:51.334385 call        52     def _commit_removals(self):
                                                    15:57:51.334385 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.334385 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B94D1668>
                                                    15:57:51.335382 line        55         while l:
                                                    15:57:51.335382 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.336379 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.336379 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.337376 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.337376 line       227         for scls in cls.__subclasses__():
                                        15:57:51.337376 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9AFBBA8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.338374 call        81     def add(self, item):
                                            15:57:51.338374 line        82         if self._pending_removals:
                                            15:57:51.339371 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.339371 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.339371 line       233         return False
                                        15:57:51.340369 return     233         return False
                                        Return value:.. False
                                    15:57:51.340369 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'weakref.WeakKeyDictionary'>
                                    15:57:51.340369 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'weakref.WeakKeyDictionary'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.341366 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.342363 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8F60>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.342363 call        70     def __contains__(self, item):
                                            15:57:51.343361 line        71         try:
                                            15:57:51.343361 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.343361 line        75         return wr in self.data
                                            15:57:51.344358 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.344358 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.344358 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92BFA58>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.345355 call        70     def __contains__(self, item):
                                            15:57:51.345355 line        71         try:
                                            15:57:51.346353 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.346353 line        75         return wr in self.data
                                            15:57:51.346353 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.347350 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'weakref.WeakKeyDictionary'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.347350 call       393     def __subclasshook__(cls, C):
                                            15:57:51.348347 line       394         if cls is Collection:
                                            15:57:51.348347 line       396         return NotImplemented
                                            15:57:51.349345 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.349345 line       210         if ok is not NotImplemented:
                                        15:57:51.350342 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.350342 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8F28>
                                            15:57:51.350342 call        58     def __iter__(self):
                                            15:57:51.351340 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B94C8F28>
                                                15:57:51.351340 call        16     def __init__(self, weakcontainer):
                                                15:57:51.352337 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.352337 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.352337 call        20     def __enter__(self):
                                                15:57:51.353334 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C8F28>
                                                15:57:51.353334 line        22         if w is not None:
                                                15:57:51.353334 line        23             w._iterating.add(self)
                                                15:57:51.354332 line        24         return self
                                                15:57:51.354332 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.354332 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.354332 call        26     def __exit__(self, e, t, b):
                                                15:57:51.355329 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B94C8F28>
                                                15:57:51.356326 line        28         if w is not None:
                                                15:57:51.356326 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.356326 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.357324 line        31             if not s:
                                                15:57:51.357324 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8F28>
                                                    15:57:51.357324 call        52     def _commit_removals(self):
                                                    15:57:51.358321 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.358321 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B94D1BA8>
                                                    15:57:51.359318 line        55         while l:
                                                    15:57:51.359318 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.360315 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.360315 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.361313 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.361313 line       227         for scls in cls.__subclasses__():
                                        15:57:51.361313 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92BFA58>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.362311 call        81     def add(self, item):
                                            15:57:51.362311 line        82         if self._pending_removals:
                                            15:57:51.363308 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.363308 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.363308 line       233         return False
                                        15:57:51.364304 return     233         return False
                                        Return value:.. False
                                    15:57:51.364304 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'google.protobuf.internal.containers.ScalarMap'>
                                    15:57:51.365302 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'google.protobuf.internal.containers.ScalarMap'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.365302 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.366299 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F1D0>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.366299 call        70     def __contains__(self, item):
                                            15:57:51.367297 line        71         try:
                                            15:57:51.367297 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.367297 line        75         return wr in self.data
                                            15:57:51.368294 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.368294 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.369291 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1B00>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.369291 call        70     def __contains__(self, item):
                                            15:57:51.370288 line        71         try:
                                            15:57:51.370288 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.370288 line        75         return wr in self.data
                                            15:57:51.371286 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.371286 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'google.protobuf.internal.containers.ScalarMap'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.371286 call       393     def __subclasshook__(cls, C):
                                            15:57:51.372283 line       394         if cls is Collection:
                                            15:57:51.372283 line       396         return NotImplemented
                                            15:57:51.373280 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.373280 line       210         if ok is not NotImplemented:
                                        15:57:51.374278 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.374278 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F198>
                                            15:57:51.374278 call        58     def __iter__(self):
                                            15:57:51.375275 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9C5F198>
                                                15:57:51.375275 call        16     def __init__(self, weakcontainer):
                                                15:57:51.376272 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.376272 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.376272 call        20     def __enter__(self):
                                                15:57:51.377270 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9C5F198>
                                                15:57:51.377270 line        22         if w is not None:
                                                15:57:51.377270 line        23             w._iterating.add(self)
                                                15:57:51.378267 line        24         return self
                                                15:57:51.378267 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.378267 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.379293 call        26     def __exit__(self, e, t, b):
                                                15:57:51.380262 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9C5F198>
                                                15:57:51.380262 line        28         if w is not None:
                                                15:57:51.380262 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.380262 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.381260 line        31             if not s:
                                                15:57:51.381260 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F198>
                                                    15:57:51.382257 call        52     def _commit_removals(self):
                                                    15:57:51.382257 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.382257 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B94CDF28>
                                                    15:57:51.383254 line        55         while l:
                                                    15:57:51.383254 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.384252 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.384252 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.384252 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.385249 line       227         for scls in cls.__subclasses__():
                                        15:57:51.385249 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1B00>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.386246 call        81     def add(self, item):
                                            15:57:51.386246 line        82         if self._pending_removals:
                                            15:57:51.387244 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.387244 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.387244 line       233         return False
                                        15:57:51.388241 return     233         return False
                                        Return value:.. False
                                    15:57:51.388241 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'google.protobuf.internal.containers.MessageMap'>
                                    15:57:51.388241 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'google.protobuf.internal.containers.MessageMap'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.389238 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.389238 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F358>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.390236 call        70     def __contains__(self, item):
                                            15:57:51.390236 line        71         try:
                                            15:57:51.391233 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.391233 line        75         return wr in self.data
                                            15:57:51.391233 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.392230 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.392230 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1CC0>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.392230 call        70     def __contains__(self, item):
                                            15:57:51.393228 line        71         try:
                                            15:57:51.393228 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.394225 line        75         return wr in self.data
                                            15:57:51.394225 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.395222 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'google.protobuf.internal.containers.MessageMap'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.395222 call       393     def __subclasshook__(cls, C):
                                            15:57:51.396220 line       394         if cls is Collection:
                                            15:57:51.396220 line       396         return NotImplemented
                                            15:57:51.396220 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.397217 line       210         if ok is not NotImplemented:
                                        15:57:51.397217 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.398214 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F320>
                                            15:57:51.398214 call        58     def __iter__(self):
                                            15:57:51.398214 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9C5F320>
                                                15:57:51.399211 call        16     def __init__(self, weakcontainer):
                                                15:57:51.399211 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.400209 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.400209 call        20     def __enter__(self):
                                                15:57:51.400209 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9C5F320>
                                                15:57:51.401207 line        22         if w is not None:
                                                15:57:51.401207 line        23             w._iterating.add(self)
                                                15:57:51.401207 line        24         return self
                                                15:57:51.402232 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.402232 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.402232 call        26     def __exit__(self, e, t, b):
                                                15:57:51.403201 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9C5F320>
                                                15:57:51.403201 line        28         if w is not None:
                                                15:57:51.404198 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.404198 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.405195 line        31             if not s:
                                                15:57:51.405195 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F320>
                                                    15:57:51.405195 call        52     def _commit_removals(self):
                                                    15:57:51.406193 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.406193 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B9C62208>
                                                    15:57:51.406193 line        55         while l:
                                                    15:57:51.407190 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.407190 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.408187 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.408187 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.409185 line       227         for scls in cls.__subclasses__():
                                        15:57:51.409185 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1CC0>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.409185 call        81     def add(self, item):
                                            15:57:51.410182 line        82         if self._pending_removals:
                                            15:57:51.410182 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.410182 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.411180 line       233         return False
                                        15:57:51.411180 return     233         return False
                                        Return value:.. False
                                    15:57:51.412176 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'google.protobuf.pyext._message.ScalarMapContainer'>
                                    15:57:51.412176 line       228             if issubclass(subclass, scls):
                                    15:57:51.412176 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'google.protobuf.pyext._message.MessageMapContainer'>
                                    15:57:51.413174 line       228             if issubclass(subclass, scls):
                                    15:57:51.413174 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'abc.SignalDict'>
                                    15:57:51.413174 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'abc.SignalDict'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.414172 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.414172 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D01DFA20>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.415169 call        70     def __contains__(self, item):
                                            15:57:51.415169 line        71         try:
                                            15:57:51.416166 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.416166 line        75         return wr in self.data
                                            15:57:51.416166 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.417163 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.417163 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8D68>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.417163 call        70     def __contains__(self, item):
                                            15:57:51.418161 line        71         try:
                                            15:57:51.418161 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.419158 line        75         return wr in self.data
                                            15:57:51.419158 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.420156 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'abc.SignalDict'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.420156 call       393     def __subclasshook__(cls, C):
                                            15:57:51.421153 line       394         if cls is Collection:
                                            15:57:51.421153 line       396         return NotImplemented
                                            15:57:51.421153 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.422150 line       210         if ok is not NotImplemented:
                                        15:57:51.422150 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.423147 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D01DFB00>
                                            15:57:51.423147 call        58     def __iter__(self):
                                            15:57:51.423147 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D01DFB00>
                                                15:57:51.424145 call        16     def __init__(self, weakcontainer):
                                                15:57:51.424145 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.424145 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.425142 call        20     def __enter__(self):
                                                15:57:51.425142 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D01DFB00>
                                                15:57:51.426140 line        22         if w is not None:
                                                15:57:51.426140 line        23             w._iterating.add(self)
                                                15:57:51.426140 line        24         return self
                                                15:57:51.426140 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.427137 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.427137 call        26     def __exit__(self, e, t, b):
                                                15:57:51.428133 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D01DFB00>
                                                15:57:51.428133 line        28         if w is not None:
                                                15:57:51.429131 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.429131 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.429131 line        31             if not s:
                                                15:57:51.430129 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D01DFB00>
                                                    15:57:51.430129 call        52     def _commit_removals(self):
                                                    15:57:51.431125 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.431125 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3BA0F4588>
                                                    15:57:51.431125 line        55         while l:
                                                    15:57:51.432123 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.432123 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.433121 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.433121 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.434118 line       227         for scls in cls.__subclasses__():
                                        15:57:51.434118 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8D68>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.434118 call        81     def add(self, item):
                                            15:57:51.435115 line        82         if self._pending_removals:
                                            15:57:51.435115 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.435115 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.436113 line       233         return False
                                        15:57:51.436113 return     233         return False
                                        Return value:.. False
                                    15:57:51.437138 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'tensorflow.python.util.object_identity.ObjectIdentityDictionary'>
                                    15:57:51.437138 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'tensorflow.python.util.object_identity.ObjectIdentityDictionary'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.437138 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.438136 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185198>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.438136 call        70     def __contains__(self, item):
                                            15:57:51.439106 line        71         try:
                                            15:57:51.439106 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.439106 line        75         return wr in self.data
                                            15:57:51.440130 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.440130 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.441128 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F240>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.441128 call        70     def __contains__(self, item):
                                            15:57:51.442097 line        71         try:
                                            15:57:51.442097 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.442097 line        75         return wr in self.data
                                            15:57:51.443122 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.443122 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'tensorflow.python.util.object_identity.ObjectIdentityDictionary'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.443122 call       393     def __subclasshook__(cls, C):
                                            15:57:51.444122 line       394         if cls is Collection:
                                            15:57:51.445089 line       396         return NotImplemented
                                            15:57:51.445089 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.445089 line       210         if ok is not NotImplemented:
                                        15:57:51.446086 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.446086 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185160>
                                            15:57:51.446086 call        58     def __iter__(self):
                                            15:57:51.447112 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D2185160>
                                                15:57:51.447112 call        16     def __init__(self, weakcontainer):
                                                15:57:51.448081 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.448081 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.448081 call        20     def __enter__(self):
                                                15:57:51.449106 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2185160>
                                                15:57:51.449106 line        22         if w is not None:
                                                15:57:51.449106 line        23             w._iterating.add(self)
                                                15:57:51.450104 line        24         return self
                                                15:57:51.450104 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.450104 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.451073 call        26     def __exit__(self, e, t, b):
                                                15:57:51.452101 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2185160>
                                                15:57:51.452101 line        28         if w is not None:
                                                15:57:51.452101 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.453096 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.453096 line        31             if not s:
                                                15:57:51.453096 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185160>
                                                    15:57:51.454065 call        52     def _commit_removals(self):
                                                    15:57:51.454065 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.454065 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D2153588>
                                                    15:57:51.455090 line        55         while l:
                                                    15:57:51.455090 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.456087 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.456087 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.456087 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.457057 line       227         for scls in cls.__subclasses__():
                                        New var:....... scls = <class 'tensorflow.python.util.object_identity.ObjectIdentityWeakKeyDictionary'>
                                        15:57:51.457057 line       228             if issubclass(subclass, scls):
                                            Starting var:.. cls = <class 'tensorflow.python.util.object_identity.ObjectIdentityWeakKeyDictionary'>
                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.458083 call       196     def __subclasscheck__(cls, subclass):
                                            15:57:51.458083 line       199         if subclass in cls._abc_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185320>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.459079 call        70     def __contains__(self, item):
                                                15:57:51.459079 line        71         try:
                                                15:57:51.460049 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.460049 line        75         return wr in self.data
                                                15:57:51.460049 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.461075 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                            15:57:51.461075 line       206         elif subclass in cls._abc_negative_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D43C8>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.461075 call        70     def __contains__(self, item):
                                                15:57:51.462073 line        71         try:
                                                15:57:51.462073 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.463042 line        75         return wr in self.data
                                                15:57:51.463042 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.464066 line       209         ok = cls.__subclasshook__(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                Starting var:.. cls = <class 'tensorflow.python.util.object_identity.ObjectIdentityWeakKeyDictionary'>
                                                Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.464066 call       393     def __subclasshook__(cls, C):
                                                15:57:51.465066 line       394         if cls is Collection:
                                                15:57:51.465066 line       396         return NotImplemented
                                                15:57:51.465066 return     396         return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            New var:....... ok = NotImplemented
                                            15:57:51.466033 line       210         if ok is not NotImplemented:
                                            15:57:51.466033 line       218         if cls in getattr(subclass, '__mro__', ()):
                                            15:57:51.466033 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D21852E8>
                                                15:57:51.467058 call        58     def __iter__(self):
                                                15:57:51.467058 line        59         with _IterationGuard(self):
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D21852E8>
                                                    15:57:51.468056 call        16     def __init__(self, weakcontainer):
                                                    15:57:51.468056 line        18         self.weakcontainer = ref(weakcontainer)
                                                    15:57:51.468056 return      18         self.weakcontainer = ref(weakcontainer)
                                                    Return value:.. None
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    15:57:51.469025 call        20     def __enter__(self):
                                                    15:57:51.469025 line        21         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D21852E8>
                                                    15:57:51.470050 line        22         if w is not None:
                                                    15:57:51.470050 line        23             w._iterating.add(self)
                                                    15:57:51.470050 line        24         return self
                                                    15:57:51.470050 return      24         return self
                                                    Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.471050 line        60             for itemref in self.data:
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    Starting var:.. e = None
                                                    Starting var:.. t = None
                                                    Starting var:.. b = None
                                                    15:57:51.471050 call        26     def __exit__(self, e, t, b):
                                                    15:57:51.472017 line        27         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D21852E8>
                                                    15:57:51.472017 line        28         if w is not None:
                                                    15:57:51.473043 line        29             s = w._iterating
                                                    New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                    15:57:51.473043 line        30             s.remove(self)
                                                    Modified var:.. s = set()
                                                    15:57:51.473043 line        31             if not s:
                                                    15:57:51.474040 line        32                 w._commit_removals()
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D21852E8>
                                                        15:57:51.474040 call        52     def _commit_removals(self):
                                                        15:57:51.475008 line        53         l = self._pending_removals
                                                        New var:....... l = []
                                                        15:57:51.475008 line        54         discard = self.data.discard
                                                        New var:....... discard = <built-in method discard of set object at 0x000001F3D2153C88>
                                                        15:57:51.475008 line        55         while l:
                                                        15:57:51.476032 return      55         while l:
                                                        Return value:.. None
                                                    15:57:51.476032 return      32                 w._commit_removals()
                                                    Return value:.. None
                                                15:57:51.476032 return      60             for itemref in self.data:
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.477033 exception  222         for rcls in cls._abc_registry:
                                            StopIteration
                                            15:57:51.478001 line       227         for scls in cls.__subclasses__():
                                            15:57:51.478001 line       232         cls._abc_negative_cache.add(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D43C8>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.478001 call        81     def add(self, item):
                                                15:57:51.479027 line        82         if self._pending_removals:
                                                15:57:51.479027 line        84         self.data.add(ref(item, self._remove))
                                                15:57:51.479027 return      84         self.data.add(ref(item, self._remove))
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.479996 line       233         return False
                                            15:57:51.479996 return     233         return False
                                            Return value:.. False
                                        15:57:51.480992 line       227         for scls in cls.__subclasses__():
                                        15:57:51.480992 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F240>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.480992 call        81     def add(self, item):
                                            15:57:51.482022 line        82         if self._pending_removals:
                                            15:57:51.482022 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.482022 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.483016 line       233         return False
                                        15:57:51.483016 return     233         return False
                                        Return value:.. False
                                    15:57:51.483985 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                    15:57:51.483985 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.483985 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.485010 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFBA8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.485010 call        70     def __contains__(self, item):
                                            15:57:51.485979 line        71         try:
                                            15:57:51.485979 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.485979 line        75         return wr in self.data
                                            15:57:51.486977 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.486977 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.488003 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185208>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.488003 call        70     def __contains__(self, item):
                                            15:57:51.489007 line        71         try:
                                            15:57:51.489007 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.489007 line        75         return wr in self.data
                                            15:57:51.489969 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.489969 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.489969 call       393     def __subclasshook__(cls, C):
                                            15:57:51.490994 line       394         if cls is Collection:
                                            15:57:51.490994 line       396         return NotImplemented
                                            15:57:51.491992 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.491992 line       210         if ok is not NotImplemented:
                                        15:57:51.492989 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.492989 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFB70>
                                            15:57:51.492989 call        58     def __iter__(self):
                                            15:57:51.493987 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D39EFB70>
                                                15:57:51.493987 call        16     def __init__(self, weakcontainer):
                                                15:57:51.494986 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.494986 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.494986 call        20     def __enter__(self):
                                                15:57:51.495953 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D39EFB70>
                                                15:57:51.495953 line        22         if w is not None:
                                                15:57:51.495953 line        23             w._iterating.add(self)
                                                15:57:51.496950 line        24         return self
                                                15:57:51.496950 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.496950 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.497976 call        26     def __exit__(self, e, t, b):
                                                15:57:51.498945 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D39EFB70>
                                                15:57:51.498945 line        28         if w is not None:
                                                15:57:51.498945 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.498945 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.499971 line        31             if not s:
                                                15:57:51.499971 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFB70>
                                                    15:57:51.500969 call        52     def _commit_removals(self):
                                                    15:57:51.500969 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.500969 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D3A97908>
                                                    15:57:51.501965 line        55         while l:
                                                    15:57:51.501965 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.501965 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.502964 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.502964 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.503959 line       227         for scls in cls.__subclasses__():
                                        New var:....... scls = <class 'h5py._hl.group.Group'>
                                        15:57:51.503959 line       228             if issubclass(subclass, scls):
                                            Starting var:.. cls = <class 'h5py._hl.group.Group'>
                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.504929 call       196     def __subclasscheck__(cls, subclass):
                                            15:57:51.504929 line       199         if subclass in cls._abc_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AA07B8>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.504929 call        70     def __contains__(self, item):
                                                15:57:51.505957 line        71         try:
                                                15:57:51.505957 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.506951 line        75         return wr in self.data
                                                15:57:51.506951 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.507921 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                            15:57:51.507921 line       206         elif subclass in cls._abc_negative_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185390>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.507921 call        70     def __contains__(self, item):
                                                15:57:51.508947 line        71         try:
                                                15:57:51.508947 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.509943 line        75         return wr in self.data
                                                15:57:51.509943 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.509943 line       209         ok = cls.__subclasshook__(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                Starting var:.. cls = <class 'h5py._hl.group.Group'>
                                                Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.510913 call       393     def __subclasshook__(cls, C):
                                                15:57:51.511938 line       394         if cls is Collection:
                                                15:57:51.511938 line       396         return NotImplemented
                                                15:57:51.511938 return     396         return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            New var:....... ok = NotImplemented
                                            15:57:51.512936 line       210         if ok is not NotImplemented:
                                            15:57:51.512936 line       218         if cls in getattr(subclass, '__mro__', ()):
                                            15:57:51.512936 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AA0780>
                                                15:57:51.513905 call        58     def __iter__(self):
                                                15:57:51.513905 line        59         with _IterationGuard(self):
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D3AA0780>
                                                    15:57:51.513905 call        16     def __init__(self, weakcontainer):
                                                    15:57:51.514931 line        18         self.weakcontainer = ref(weakcontainer)
                                                    15:57:51.514931 return      18         self.weakcontainer = ref(weakcontainer)
                                                    Return value:.. None
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    15:57:51.515899 call        20     def __enter__(self):
                                                    15:57:51.515899 line        21         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3AA0780>
                                                    15:57:51.515899 line        22         if w is not None:
                                                    15:57:51.516897 line        23             w._iterating.add(self)
                                                    15:57:51.516897 line        24         return self
                                                    15:57:51.516897 return      24         return self
                                                    Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.517923 line        60             for itemref in self.data:
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    Starting var:.. e = None
                                                    Starting var:.. t = None
                                                    Starting var:.. b = None
                                                    15:57:51.517923 call        26     def __exit__(self, e, t, b):
                                                    15:57:51.518920 line        27         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3AA0780>
                                                    15:57:51.518920 line        28         if w is not None:
                                                    15:57:51.519889 line        29             s = w._iterating
                                                    New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                    15:57:51.519889 line        30             s.remove(self)
                                                    Modified var:.. s = set()
                                                    15:57:51.519889 line        31             if not s:
                                                    15:57:51.520917 line        32                 w._commit_removals()
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AA0780>
                                                        15:57:51.520917 call        52     def _commit_removals(self):
                                                        15:57:51.520917 line        53         l = self._pending_removals
                                                        New var:....... l = []
                                                        15:57:51.521911 line        54         discard = self.data.discard
                                                        New var:....... discard = <built-in method discard of set object at 0x000001F3D3AFC128>
                                                        15:57:51.521911 line        55         while l:
                                                        15:57:51.521911 return      55         while l:
                                                        Return value:.. None
                                                    15:57:51.522881 return      32                 w._commit_removals()
                                                    Return value:.. None
                                                15:57:51.522881 return      60             for itemref in self.data:
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.523906 exception  222         for rcls in cls._abc_registry:
                                            StopIteration
                                            15:57:51.523906 line       227         for scls in cls.__subclasses__():
                                            New var:....... scls = <class 'h5py._hl.files.File'>
                                            15:57:51.524909 line       228             if issubclass(subclass, scls):
                                                Starting var:.. cls = <class 'h5py._hl.files.File'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.524909 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:51.525873 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3A90AC8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.525873 call        70     def __contains__(self, item):
                                                    15:57:51.526905 line        71         try:
                                                    15:57:51.526905 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:51.526905 line        75         return wr in self.data
                                                    15:57:51.527896 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.527896 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:51.527896 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D6155630>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.528865 call        70     def __contains__(self, item):
                                                    15:57:51.528865 line        71         try:
                                                    15:57:51.529890 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:51.529890 line        75         return wr in self.data
                                                    15:57:51.529890 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.530888 line       209         ok = cls.__subclasshook__(subclass)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                    Starting var:.. cls = <class 'h5py._hl.files.File'>
                                                    Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.530888 call       393     def __subclasshook__(cls, C):
                                                    15:57:51.531857 line       394         if cls is Collection:
                                                    15:57:51.531857 line       396         return NotImplemented
                                                    15:57:51.532882 return     396         return NotImplemented
                                                    Return value:.. NotImplemented
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                New var:....... ok = NotImplemented
                                                15:57:51.532882 line       210         if ok is not NotImplemented:
                                                15:57:51.533880 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                15:57:51.533880 line       222         for rcls in cls._abc_registry:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3A90B70>
                                                    15:57:51.533880 call        58     def __iter__(self):
                                                    15:57:51.534849 line        59         with _IterationGuard(self):
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6630>
                                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D3A90B70>
                                                        15:57:51.534849 call        16     def __init__(self, weakcontainer):
                                                        15:57:51.534849 line        18         self.weakcontainer = ref(weakcontainer)
                                                        15:57:51.535881 return      18         self.weakcontainer = ref(weakcontainer)
                                                        Return value:.. None
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6630>
                                                        15:57:51.535881 call        20     def __enter__(self):
                                                        15:57:51.536878 line        21         w = self.weakcontainer()
                                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3A90B70>
                                                        15:57:51.536878 line        22         if w is not None:
                                                        15:57:51.536878 line        23             w._iterating.add(self)
                                                        15:57:51.536878 line        24         return self
                                                        15:57:51.537841 return      24         return self
                                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBBB6630>
                                                    15:57:51.537841 line        60             for itemref in self.data:
                                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6630>
                                                        Starting var:.. e = None
                                                        Starting var:.. t = None
                                                        Starting var:.. b = None
                                                        15:57:51.537841 call        26     def __exit__(self, e, t, b):
                                                        15:57:51.538866 line        27         w = self.weakcontainer()
                                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3A90B70>
                                                        15:57:51.539836 line        28         if w is not None:
                                                        15:57:51.539836 line        29             s = w._iterating
                                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBBB6630>}
                                                        15:57:51.539836 line        30             s.remove(self)
                                                        Modified var:.. s = set()
                                                        15:57:51.540861 line        31             if not s:
                                                        15:57:51.540861 line        32                 w._commit_removals()
                                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3A90B70>
                                                            15:57:51.540861 call        52     def _commit_removals(self):
                                                            15:57:51.541858 line        53         l = self._pending_removals
                                                            New var:....... l = []
                                                            15:57:51.541858 line        54         discard = self.data.discard
                                                            New var:....... discard = <built-in method discard of set object at 0x000001F3D3AFC668>
                                                            15:57:51.542828 line        55         while l:
                                                            15:57:51.542828 return      55         while l:
                                                            Return value:.. None
                                                        15:57:51.542828 return      32                 w._commit_removals()
                                                        Return value:.. None
                                                    15:57:51.543825 return      60             for itemref in self.data:
                                                    Return value:.. None
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.543825 exception  222         for rcls in cls._abc_registry:
                                                StopIteration
                                                15:57:51.544857 line       227         for scls in cls.__subclasses__():
                                                15:57:51.544857 line       232         cls._abc_negative_cache.add(subclass)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D6155630>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.544857 call        81     def add(self, item):
                                                    15:57:51.545820 line        82         if self._pending_removals:
                                                    15:57:51.545820 line        84         self.data.add(ref(item, self._remove))
                                                    15:57:51.546816 return      84         self.data.add(ref(item, self._remove))
                                                    Return value:.. None
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:51.546816 line       233         return False
                                                15:57:51.546816 return     233         return False
                                                Return value:.. False
                                            15:57:51.547814 line       227         for scls in cls.__subclasses__():
                                            15:57:51.547814 line       232         cls._abc_negative_cache.add(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185390>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.547814 call        81     def add(self, item):
                                                15:57:51.548811 line        82         if self._pending_removals:
                                                15:57:51.548811 line        84         self.data.add(ref(item, self._remove))
                                                15:57:51.549833 return      84         self.data.add(ref(item, self._remove))
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.549833 line       233         return False
                                            15:57:51.549833 return     233         return False
                                            Return value:.. False
                                        15:57:51.550833 line       227         for scls in cls.__subclasses__():
                                        Modified var:.. scls = <class 'h5py._hl.attrs.AttributeManager'>
                                        15:57:51.550833 line       228             if issubclass(subclass, scls):
                                            Starting var:.. cls = <class 'h5py._hl.attrs.AttributeManager'>
                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.551803 call       196     def __subclasscheck__(cls, subclass):
                                            15:57:51.551803 line       199         if subclass in cls._abc_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AC9C50>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.551803 call        70     def __contains__(self, item):
                                                15:57:51.552801 line        71         try:
                                                15:57:51.552801 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.553823 line        75         return wr in self.data
                                                15:57:51.553823 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.554796 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                            15:57:51.554796 line       206         elif subclass in cls._abc_negative_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AA0828>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.554796 call        70     def __contains__(self, item):
                                                15:57:51.555793 line        71         try:
                                                15:57:51.555793 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.556814 line        75         return wr in self.data
                                                15:57:51.556814 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.556814 line       209         ok = cls.__subclasshook__(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                Starting var:.. cls = <class 'h5py._hl.attrs.AttributeManager'>
                                                Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.557813 call       393     def __subclasshook__(cls, C):
                                                15:57:51.558785 line       394         if cls is Collection:
                                                15:57:51.558785 line       396         return NotImplemented
                                                15:57:51.558785 return     396         return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            New var:....... ok = NotImplemented
                                            15:57:51.558785 line       210         if ok is not NotImplemented:
                                            15:57:51.559807 line       218         if cls in getattr(subclass, '__mro__', ()):
                                            15:57:51.559807 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AC9828>
                                                15:57:51.560779 call        58     def __iter__(self):
                                                15:57:51.560779 line        59         with _IterationGuard(self):
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D3AC9828>
                                                    15:57:51.561777 call        16     def __init__(self, weakcontainer):
                                                    15:57:51.561777 line        18         self.weakcontainer = ref(weakcontainer)
                                                    15:57:51.561777 return      18         self.weakcontainer = ref(weakcontainer)
                                                    Return value:.. None
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    15:57:51.562774 call        20     def __enter__(self):
                                                    15:57:51.562774 line        21         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3AC9828>
                                                    15:57:51.562774 line        22         if w is not None:
                                                    15:57:51.563771 line        23             w._iterating.add(self)
                                                    15:57:51.563771 line        24         return self
                                                    15:57:51.563771 return      24         return self
                                                    Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.564769 line        60             for itemref in self.data:
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                    Starting var:.. e = None
                                                    Starting var:.. t = None
                                                    Starting var:.. b = None
                                                    15:57:51.564769 call        26     def __exit__(self, e, t, b):
                                                    15:57:51.565790 line        27         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3AC9828>
                                                    15:57:51.565790 line        28         if w is not None:
                                                    15:57:51.566764 line        29             s = w._iterating
                                                    New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                    15:57:51.566764 line        30             s.remove(self)
                                                    Modified var:.. s = set()
                                                    15:57:51.566764 line        31             if not s:
                                                    15:57:51.567781 line        32                 w._commit_removals()
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AC9828>
                                                        15:57:51.567781 call        52     def _commit_removals(self):
                                                        15:57:51.567781 line        53         l = self._pending_removals
                                                        New var:....... l = []
                                                        15:57:51.568785 line        54         discard = self.data.discard
                                                        New var:....... discard = <built-in method discard of set object at 0x000001F3D3AFCBA8>
                                                        15:57:51.568785 line        55         while l:
                                                        15:57:51.569780 return      55         while l:
                                                        Return value:.. None
                                                    15:57:51.569780 return      32                 w._commit_removals()
                                                    Return value:.. None
                                                15:57:51.569780 return      60             for itemref in self.data:
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.570777 exception  222         for rcls in cls._abc_registry:
                                            StopIteration
                                            15:57:51.571750 line       227         for scls in cls.__subclasses__():
                                            15:57:51.571750 line       232         cls._abc_negative_cache.add(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AA0828>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.571750 call        81     def add(self, item):
                                                15:57:51.572748 line        82         if self._pending_removals:
                                                15:57:51.572748 line        84         self.data.add(ref(item, self._remove))
                                                15:57:51.572748 return      84         self.data.add(ref(item, self._remove))
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.573769 line       233         return False
                                            15:57:51.573769 return     233         return False
                                            Return value:.. False
                                        15:57:51.574742 line       227         for scls in cls.__subclasses__():
                                        15:57:51.574742 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185208>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.574742 call        81     def add(self, item):
                                            15:57:51.575764 line        82         if self._pending_removals:
                                            15:57:51.575764 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.575764 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.576761 line       233         return False
                                        15:57:51.576761 return     233         return False
                                        Return value:.. False
                                    15:57:51.577758 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'urllib3._collections.RecentlyUsedContainer'>
                                    15:57:51.577758 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'urllib3._collections.RecentlyUsedContainer'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.577758 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.578757 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF30B8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.578757 call        70     def __contains__(self, item):
                                            15:57:51.579756 line        71         try:
                                            15:57:51.579756 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.579756 line        75         return wr in self.data
                                            15:57:51.580751 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.580751 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.581724 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFC18>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.581724 call        70     def __contains__(self, item):
                                            15:57:51.582721 line        71         try:
                                            15:57:51.582721 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.582721 line        75         return wr in self.data
                                            15:57:51.583742 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.583742 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'urllib3._collections.RecentlyUsedContainer'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.584715 call       393     def __subclasshook__(cls, C):
                                            15:57:51.584715 line       394         if cls is Collection:
                                            15:57:51.585712 line       396         return NotImplemented
                                            15:57:51.585712 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.585712 line       210         if ok is not NotImplemented:
                                        15:57:51.586710 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.586710 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3080>
                                            15:57:51.586710 call        58     def __iter__(self):
                                            15:57:51.587732 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D4DF3080>
                                                15:57:51.587732 call        16     def __init__(self, weakcontainer):
                                                15:57:51.588731 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.588731 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.588731 call        20     def __enter__(self):
                                                15:57:51.589727 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D4DF3080>
                                                15:57:51.589727 line        22         if w is not None:
                                                15:57:51.590699 line        23             w._iterating.add(self)
                                                15:57:51.590699 line        24         return self
                                                15:57:51.590699 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.590699 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.591709 call        26     def __exit__(self, e, t, b):
                                                15:57:51.592722 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D4DF3080>
                                                15:57:51.592722 line        28         if w is not None:
                                                15:57:51.592722 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.593691 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.593691 line        31             if not s:
                                                15:57:51.593691 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3080>
                                                    15:57:51.594703 call        52     def _commit_removals(self):
                                                    15:57:51.594703 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.594703 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D3DD5208>
                                                    15:57:51.595711 line        55         while l:
                                                    15:57:51.595711 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.596683 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.596683 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.597688 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.597688 line       227         for scls in cls.__subclasses__():
                                        15:57:51.597688 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFC18>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.598705 call        81     def add(self, item):
                                            15:57:51.598705 line        82         if self._pending_removals:
                                            15:57:51.599675 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.599675 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.599675 line       233         return False
                                        15:57:51.600697 return     233         return False
                                        Return value:.. False
                                    15:57:51.600697 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'urllib3._collections.HTTPHeaderDict'>
                                    15:57:51.600697 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'urllib3._collections.HTTPHeaderDict'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.601706 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.601706 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3320>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.602668 call        70     def __contains__(self, item):
                                            15:57:51.603690 line        71         try:
                                            15:57:51.603690 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.603690 line        75         return wr in self.data
                                            15:57:51.603690 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.604690 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.604690 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3128>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.605660 call        70     def __contains__(self, item):
                                            15:57:51.605660 line        71         try:
                                            15:57:51.606685 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.606685 line        75         return wr in self.data
                                            15:57:51.606685 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.607683 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'urllib3._collections.HTTPHeaderDict'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.607683 call       393     def __subclasshook__(cls, C):
                                            15:57:51.608651 line       394         if cls is Collection:
                                            15:57:51.608651 line       396         return NotImplemented
                                            15:57:51.608651 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.609665 line       210         if ok is not NotImplemented:
                                        15:57:51.609665 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.610645 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF32E8>
                                            15:57:51.610645 call        58     def __iter__(self):
                                            15:57:51.611643 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D4DF32E8>
                                                15:57:51.611643 call        16     def __init__(self, weakcontainer):
                                                15:57:51.611643 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.612657 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.612657 call        20     def __enter__(self):
                                                15:57:51.612657 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D4DF32E8>
                                                15:57:51.613669 line        22         if w is not None:
                                                15:57:51.613669 line        23             w._iterating.add(self)
                                                15:57:51.613669 line        24         return self
                                                15:57:51.614635 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.614635 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.614635 call        26     def __exit__(self, e, t, b):
                                                15:57:51.615658 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D4DF32E8>
                                                15:57:51.615658 line        28         if w is not None:
                                                15:57:51.616629 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.616629 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.617653 line        31             if not s:
                                                15:57:51.617653 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF32E8>
                                                    15:57:51.617653 call        52     def _commit_removals(self):
                                                    15:57:51.618650 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.618650 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D3DD59E8>
                                                    15:57:51.618650 line        55         while l:
                                                    15:57:51.619647 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.619647 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.620619 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.620619 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.621643 line       227         for scls in cls.__subclasses__():
                                        15:57:51.621643 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3128>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.621643 call        81     def add(self, item):
                                            15:57:51.622614 line        82         if self._pending_removals:
                                            15:57:51.622614 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.622614 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.623611 line       233         return False
                                        15:57:51.623611 return     233         return False
                                        Return value:.. False
                                    15:57:51.624608 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'requests.cookies.RequestsCookieJar'>
                                    15:57:51.624608 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'requests.cookies.RequestsCookieJar'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.624608 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.625630 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6198>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.625630 call        70     def __contains__(self, item):
                                            15:57:51.626603 line        71         try:
                                            15:57:51.626603 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.627626 line        75         return wr in self.data
                                            15:57:51.627626 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.627626 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.628626 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3390>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.628626 call        70     def __contains__(self, item):
                                            15:57:51.629595 line        71         try:
                                            15:57:51.629595 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.629595 line        75         return wr in self.data
                                            15:57:51.630593 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.630593 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'requests.cookies.RequestsCookieJar'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.631618 call       393     def __subclasshook__(cls, C):
                                            15:57:51.632588 line       394         if cls is Collection:
                                            15:57:51.632588 line       396         return NotImplemented
                                            15:57:51.632588 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.632588 line       210         if ok is not NotImplemented:
                                        15:57:51.633585 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.633585 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6160>
                                            15:57:51.633585 call        58     def __iter__(self):
                                            15:57:51.634582 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D22C6160>
                                                15:57:51.634582 call        16     def __init__(self, weakcontainer):
                                                15:57:51.635579 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.635579 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.636576 call        20     def __enter__(self):
                                                15:57:51.636576 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D22C6160>
                                                15:57:51.636576 line        22         if w is not None:
                                                15:57:51.637574 line        23             w._iterating.add(self)
                                                15:57:51.637574 line        24         return self
                                                15:57:51.637574 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.638571 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.638571 call        26     def __exit__(self, e, t, b):
                                                15:57:51.639569 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D22C6160>
                                                15:57:51.639569 line        28         if w is not None:
                                                15:57:51.640565 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:51.640565 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.640565 line        31             if not s:
                                                15:57:51.641563 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6160>
                                                    15:57:51.641563 call        52     def _commit_removals(self):
                                                    15:57:51.641563 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.642560 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D228B748>
                                                    15:57:51.642560 line        55         while l:
                                                    15:57:51.642560 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.643558 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.643558 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.644555 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.644555 line       227         for scls in cls.__subclasses__():
                                        15:57:51.645552 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3390>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.645552 call        81     def add(self, item):
                                            15:57:51.646550 line        82         if self._pending_removals:
                                            15:57:51.646550 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.646550 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.647548 line       233         return False
                                        15:57:51.647548 return     233         return False
                                        Return value:.. False
                                    15:57:51.647548 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = <class 'requests.structures.CaseInsensitiveDict'>
                                    15:57:51.648545 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'requests.structures.CaseInsensitiveDict'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.648545 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:51.649542 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C69E8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.649542 call        70     def __contains__(self, item):
                                            15:57:51.650539 line        71         try:
                                            15:57:51.650539 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.650539 line        75         return wr in self.data
                                            15:57:51.651537 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.651537 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:51.651537 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6208>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.652534 call        70     def __contains__(self, item):
                                            15:57:51.653531 line        71         try:
                                            15:57:51.653531 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:51.653531 line        75         return wr in self.data
                                            15:57:51.653531 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.654528 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                            Starting var:.. cls = <class 'requests.structures.CaseInsensitiveDict'>
                                            Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.654528 call       393     def __subclasshook__(cls, C):
                                            15:57:51.655526 line       394         if cls is Collection:
                                            15:57:51.655526 line       396         return NotImplemented
                                            15:57:51.656523 return     396         return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:51.656523 line       210         if ok is not NotImplemented:
                                        15:57:51.657520 line       218         if cls in getattr(subclass, '__mro__', ()):
                                        15:57:51.657520 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C69B0>
                                            15:57:51.657520 call        58     def __iter__(self):
                                            15:57:51.658518 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D22C69B0>
                                                15:57:51.658518 call        16     def __init__(self, weakcontainer):
                                                15:57:51.659515 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:51.659515 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                15:57:51.659515 call        20     def __enter__(self):
                                                15:57:51.660513 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D22C69B0>
                                                15:57:51.660513 line        22         if w is not None:
                                                15:57:51.660513 line        23             w._iterating.add(self)
                                                15:57:51.661510 line        24         return self
                                                15:57:51.661510 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                            15:57:51.661510 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E908>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:51.661510 call        26     def __exit__(self, e, t, b):
                                                15:57:51.662507 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D22C69B0>
                                                15:57:51.663505 line        28         if w is not None:
                                                15:57:51.663505 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E908>}
                                                15:57:51.663505 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:51.664502 line        31             if not s:
                                                15:57:51.664502 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C69B0>
                                                    15:57:51.664502 call        52     def _commit_removals(self):
                                                    15:57:51.665527 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:51.665527 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3D228BC88>
                                                    15:57:51.666525 line        55         while l:
                                                    15:57:51.666525 return      55         while l:
                                                    Return value:.. None
                                                15:57:51.666525 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:51.667520 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.667520 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:51.668491 line       227         for scls in cls.__subclasses__():
                                        15:57:51.668491 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6208>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.668491 call        81     def add(self, item):
                                            15:57:51.669517 line        82         if self._pending_removals:
                                            15:57:51.669517 line        84         self.data.add(ref(item, self._remove))
                                            15:57:51.670515 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:51.670515 line       233         return False
                                        15:57:51.671483 return     233         return False
                                        Return value:.. False
                                    15:57:51.671483 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = typing.MutableMapping
                                    15:57:51.671483 line       228             if issubclass(subclass, scls):
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                        Starting var:.. self = typing.MutableMapping
                                        Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                        Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                        15:57:51.672504 call      1145     def __subclasscheck__(self, cls):
                                        15:57:51.673506 line      1146         if self.__origin__ is not None:
                                        15:57:51.673506 line      1151         if self is Generic:
                                        15:57:51.673506 line      1154         return super().__subclasscheck__(cls)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            Starting var:.. cls = typing.MutableMapping
                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:51.673506 call       196     def __subclasscheck__(cls, subclass):
                                            15:57:51.674504 line       199         if subclass in cls._abc_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B93546A0>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.674504 call        70     def __contains__(self, item):
                                                15:57:51.675498 line        71         try:
                                                15:57:51.675498 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.676498 line        75         return wr in self.data
                                                15:57:51.676498 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.677467 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.MutableMapping
                                                15:57:51.677467 call      1034     def _abc_negative_cache_version(self):
                                                15:57:51.678493 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                15:57:51.678493 line      1036             return self.__extra__._abc_negative_cache_version
                                                15:57:51.678493 return    1036             return self.__extra__._abc_negative_cache_version
                                                Return value:.. 57
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.679491 line       206         elif subclass in cls._abc_negative_cache:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.MutableMapping
                                                15:57:51.679491 call      1020     def _abc_negative_cache(self):
                                                15:57:51.680459 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                15:57:51.680459 line      1022             return self.__extra__._abc_negative_cache
                                                15:57:51.680459 return    1022             return self.__extra__._abc_negative_cache
                                                Return value:.. <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.681485 call        70     def __contains__(self, item):
                                                15:57:51.681485 line        71         try:
                                                15:57:51.682483 line        72             wr = ref(item)
                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                15:57:51.682483 line        75         return wr in self.data
                                                15:57:51.682483 return      75         return wr in self.data
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.683452 line       209         ok = cls.__subclasshook__(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. cls = typing.MutableMapping
                                                15:57:51.683452 call       875         def __extrahook__(subclass):
                                                15:57:51.684477 line       876             res = cls.__extra__.__subclasshook__(subclass)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                    Starting var:.. cls = <class 'collections.abc.MutableMapping'>
                                                    Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.684477 call       393     def __subclasshook__(cls, C):
                                                    15:57:51.685475 line       394         if cls is Collection:
                                                    15:57:51.685475 line       396         return NotImplemented
                                                    15:57:51.686444 return     396         return NotImplemented
                                                    Return value:.. NotImplemented
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                New var:....... res = NotImplemented
                                                15:57:51.686444 line       877             if res is not NotImplemented:
                                                15:57:51.687469 line       879             if cls.__extra__ in subclass.__mro__:
                                                15:57:51.687469 line       881             for scls in cls.__extra__.__subclasses__():
                                                New var:....... scls = <class 'os._Environ'>
                                                15:57:51.687469 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.687469 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'os._Environ'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.688469 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.689435 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92BFA20>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.689435 call        70     def __contains__(self, item):
                                                        15:57:51.690461 line        71         try:
                                                        15:57:51.690461 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.690461 line        75         return wr in self.data
                                                        15:57:51.690461 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.691459 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.691459 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4128>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.692427 call        70     def __contains__(self, item):
                                                        15:57:51.692427 line        71         try:
                                                        15:57:51.693453 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.693453 line        75         return wr in self.data
                                                        15:57:51.693453 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.694452 line       207             return False
                                                    15:57:51.694452 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.695419 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'collections.ChainMap'>
                                                15:57:51.695419 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.695419 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'collections.ChainMap'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.696445 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.696445 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A90>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.697443 call        70     def __contains__(self, item):
                                                        15:57:51.698411 line        71         try:
                                                        15:57:51.698411 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.698411 line        75         return wr in self.data
                                                        15:57:51.698411 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.699434 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.699434 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.700434 call        70     def __contains__(self, item):
                                                        15:57:51.700434 line        71         try:
                                                        15:57:51.701404 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.701404 line        75         return wr in self.data
                                                        15:57:51.701404 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.702433 line       207             return False
                                                    15:57:51.702433 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.703426 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'collections.UserDict'>
                                                15:57:51.703426 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.703426 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'collections.UserDict'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.704395 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.704395 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1C50>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.705421 call        70     def __contains__(self, item):
                                                        15:57:51.706418 line        71         try:
                                                        15:57:51.706418 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.706418 line        75         return wr in self.data
                                                        15:57:51.706418 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.707387 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.707387 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF438>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.708413 call        70     def __contains__(self, item):
                                                        15:57:51.708413 line        71         try:
                                                        15:57:51.709414 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.709414 line        75         return wr in self.data
                                                        15:57:51.709414 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.710379 line       207             return False
                                                    15:57:51.710379 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.711405 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'weakref.WeakValueDictionary'>
                                                15:57:51.711405 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.711405 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'weakref.WeakValueDictionary'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.712375 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.712375 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8CF8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.713402 call        70     def __contains__(self, item):
                                                        15:57:51.714368 line        71         try:
                                                        15:57:51.714368 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.714368 line        75         return wr in self.data
                                                        15:57:51.714368 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.715395 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.715395 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9AFBBA8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.716363 call        70     def __contains__(self, item):
                                                        15:57:51.716363 line        71         try:
                                                        15:57:51.717389 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.717389 line        75         return wr in self.data
                                                        15:57:51.717389 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.718358 line       207             return False
                                                    15:57:51.718358 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.719355 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'weakref.WeakKeyDictionary'>
                                                15:57:51.719355 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.719355 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'weakref.WeakKeyDictionary'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.720384 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.720384 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8F60>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.721387 call        70     def __contains__(self, item):
                                                        15:57:51.722375 line        71         try:
                                                        15:57:51.722375 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.722375 line        75         return wr in self.data
                                                        15:57:51.722375 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.723373 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.723373 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B92BFA58>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.724371 call        70     def __contains__(self, item):
                                                        15:57:51.724371 line        71         try:
                                                        15:57:51.725339 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.725339 line        75         return wr in self.data
                                                        15:57:51.725339 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.726367 line       207             return False
                                                    15:57:51.726367 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.727362 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'google.protobuf.internal.containers.ScalarMap'>
                                                15:57:51.727362 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.727362 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'google.protobuf.internal.containers.ScalarMap'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.728331 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.728331 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F1D0>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.729329 call        70     def __contains__(self, item):
                                                        15:57:51.730333 line        71         try:
                                                        15:57:51.730333 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.730333 line        75         return wr in self.data
                                                        15:57:51.730333 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.731323 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.731323 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1B00>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.732321 call        70     def __contains__(self, item):
                                                        15:57:51.732321 line        71         try:
                                                        15:57:51.733318 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.733318 line        75         return wr in self.data
                                                        15:57:51.733318 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.734315 line       207             return False
                                                    15:57:51.734315 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.735313 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'google.protobuf.internal.containers.MessageMap'>
                                                15:57:51.735313 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.736310 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'google.protobuf.internal.containers.MessageMap'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.736310 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.737307 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F358>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.737307 call        70     def __contains__(self, item):
                                                        15:57:51.738304 line        71         try:
                                                        15:57:51.738304 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.738304 line        75         return wr in self.data
                                                        15:57:51.739302 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.739302 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.739302 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1CC0>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.740299 call        70     def __contains__(self, item):
                                                        15:57:51.740299 line        71         try:
                                                        15:57:51.741296 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.741296 line        75         return wr in self.data
                                                        15:57:51.741296 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.742294 line       207             return False
                                                    15:57:51.742294 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.743291 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'google.protobuf.pyext._message.ScalarMapContainer'>
                                                15:57:51.743291 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.744288 line       884                 if issubclass(subclass, scls):
                                                15:57:51.744288 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'google.protobuf.pyext._message.MessageMapContainer'>
                                                15:57:51.744288 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.745286 line       884                 if issubclass(subclass, scls):
                                                15:57:51.745286 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'abc.SignalDict'>
                                                15:57:51.745286 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.745286 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'abc.SignalDict'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.746300 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.746300 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D01DFA20>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.747309 call        70     def __contains__(self, item):
                                                        15:57:51.748278 line        71         try:
                                                        15:57:51.748278 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.748278 line        75         return wr in self.data
                                                        15:57:51.748278 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.749297 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.749297 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C8D68>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.750303 call        70     def __contains__(self, item):
                                                        15:57:51.750303 line        71         try:
                                                        15:57:51.751270 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.751270 line        75         return wr in self.data
                                                        15:57:51.751270 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.752297 line       207             return False
                                                    15:57:51.752297 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.753300 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'tensorflow.python.util.object_identity.ObjectIdentityDictionary'>
                                                15:57:51.753300 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.754262 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'tensorflow.python.util.object_identity.ObjectIdentityDictionary'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.754262 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.755282 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185198>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.755282 call        70     def __contains__(self, item):
                                                        15:57:51.756285 line        71         try:
                                                        15:57:51.756285 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.756285 line        75         return wr in self.data
                                                        15:57:51.756285 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.757283 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.757283 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9C5F240>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.758282 call        70     def __contains__(self, item):
                                                        15:57:51.758282 line        71         try:
                                                        15:57:51.759249 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.759249 line        75         return wr in self.data
                                                        15:57:51.759249 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.760274 line       207             return False
                                                    15:57:51.760274 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.761271 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                                15:57:51.761271 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.761271 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.762269 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.763263 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFBA8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.763263 call        70     def __contains__(self, item):
                                                        15:57:51.764263 line        71         try:
                                                        15:57:51.764263 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.764263 line        75         return wr in self.data
                                                        15:57:51.765232 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.765232 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.765232 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185208>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.766259 call        70     def __contains__(self, item):
                                                        15:57:51.766259 line        71         try:
                                                        15:57:51.767227 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.767227 line        75         return wr in self.data
                                                        15:57:51.767227 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.768230 line       207             return False
                                                    15:57:51.768230 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.769250 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'urllib3._collections.RecentlyUsedContainer'>
                                                15:57:51.769250 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.770219 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'urllib3._collections.RecentlyUsedContainer'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.770219 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.771242 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF30B8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.771242 call        70     def __contains__(self, item):
                                                        15:57:51.772242 line        71         try:
                                                        15:57:51.772242 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.772242 line        75         return wr in self.data
                                                        15:57:51.772242 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.773211 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.773211 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFC18>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.774219 call        70     def __contains__(self, item):
                                                        15:57:51.774219 line        71         try:
                                                        15:57:51.775234 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.775234 line        75         return wr in self.data
                                                        15:57:51.775234 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.776203 line       207             return False
                                                    15:57:51.776203 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.777213 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'urllib3._collections.HTTPHeaderDict'>
                                                15:57:51.777213 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.777213 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'urllib3._collections.HTTPHeaderDict'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.778227 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.778227 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3320>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.779196 call        70     def __contains__(self, item):
                                                        15:57:51.780193 line        71         try:
                                                        15:57:51.780193 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.780193 line        75         return wr in self.data
                                                        15:57:51.780193 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.781190 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.781190 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3128>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.782187 call        70     def __contains__(self, item):
                                                        15:57:51.782187 line        71         try:
                                                        15:57:51.783214 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.783214 line        75         return wr in self.data
                                                        15:57:51.783214 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.784213 line       207             return False
                                                    15:57:51.784213 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.785179 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'requests.cookies.RequestsCookieJar'>
                                                15:57:51.785179 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.785179 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'requests.cookies.RequestsCookieJar'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.786205 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.786205 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6198>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.787202 call        70     def __contains__(self, item):
                                                        15:57:51.787202 line        71         try:
                                                        15:57:51.788171 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.788171 line        75         return wr in self.data
                                                        15:57:51.788171 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.789197 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.789197 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D4DF3390>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.789197 call        70     def __contains__(self, item):
                                                        15:57:51.790196 line        71         try:
                                                        15:57:51.791193 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.791193 line        75         return wr in self.data
                                                        15:57:51.791193 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.792173 line       207             return False
                                                    15:57:51.792173 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.792173 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = <class 'requests.structures.CaseInsensitiveDict'>
                                                15:57:51.793186 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.793186 line       884                 if issubclass(subclass, scls):
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = <class 'requests.structures.CaseInsensitiveDict'>
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.794155 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.794155 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C69E8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.795178 call        70     def __contains__(self, item):
                                                        15:57:51.795178 line        71         try:
                                                        15:57:51.796151 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.796151 line        75         return wr in self.data
                                                        15:57:51.796151 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.797175 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    15:57:51.797175 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D22C6208>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.797175 call        70     def __contains__(self, item):
                                                        15:57:51.798173 line        71         try:
                                                        15:57:51.798173 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.799170 line        75         return wr in self.data
                                                        15:57:51.799170 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.800167 line       207             return False
                                                    15:57:51.800167 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.800167 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = typing.MutableMapping
                                                15:57:51.801165 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.801165 line       883                     continue
                                                15:57:51.802162 line       881             for scls in cls.__extra__.__subclasses__():
                                                Modified var:.. scls = typing.MutableMapping[~KT, ~VT]
                                                15:57:51.802162 line       882                 if isinstance(scls, GenericMeta):
                                                15:57:51.802162 line       883                     continue
                                                15:57:51.802162 line       881             for scls in cls.__extra__.__subclasses__():
                                                15:57:51.803157 line       886             return NotImplemented
                                                15:57:51.803157 return     886             return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            New var:....... ok = NotImplemented
                                            15:57:51.803157 line       210         if ok is not NotImplemented:
                                            15:57:51.804157 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.MutableMapping
                                                Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.804157 call      1089     def __eq__(self, other):
                                                15:57:51.805154 line      1090         if not isinstance(other, GenericMeta):
                                                15:57:51.805154 line      1091             return NotImplemented
                                                15:57:51.806152 return    1091             return NotImplemented
                                                Return value:.. NotImplemented
                                                Starting var:.. self = typing.MutableMapping
                                                Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                                15:57:51.806152 call      1089     def __eq__(self, other):
                                                15:57:51.807121 line      1090         if not isinstance(other, GenericMeta):
                                                15:57:51.807121 line      1091             return NotImplemented
                                                15:57:51.807121 return    1091             return NotImplemented
                                                Return value:.. NotImplemented
                                                Starting var:.. self = typing.MutableMapping
                                                Starting var:.. other = <class 'object'>
                                                15:57:51.808154 call      1089     def __eq__(self, other):
                                                15:57:51.808154 line      1090         if not isinstance(other, GenericMeta):
                                                15:57:51.808154 line      1091             return NotImplemented
                                                15:57:51.809143 return    1091             return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.809143 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                15:57:51.810113 call        58     def __iter__(self):
                                                15:57:51.810113 line        59         with _IterationGuard(self):
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                    15:57:51.810113 call        16     def __init__(self, weakcontainer):
                                                    15:57:51.811138 line        18         self.weakcontainer = ref(weakcontainer)
                                                    15:57:51.811138 return      18         self.weakcontainer = ref(weakcontainer)
                                                    Return value:.. None
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    15:57:51.812135 call        20     def __enter__(self):
                                                    15:57:51.812135 line        21         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                    15:57:51.812135 line        22         if w is not None:
                                                    15:57:51.813105 line        23             w._iterating.add(self)
                                                    15:57:51.813105 line        24         return self
                                                    15:57:51.813105 return      24         return self
                                                    Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:51.814132 line        60             for itemref in self.data:
                                                New var:....... itemref = <weakref at 0x000001F3B9351C28; to 'type' at 0x0000000075AF1980 (dict)>
                                                15:57:51.814132 line        61                 item = itemref()
                                                New var:....... item = <class 'dict'>
                                                15:57:51.814132 line        62                 if item is not None:
                                                15:57:51.815100 line        65                     yield item
                                                15:57:51.815100 return      65                     yield item
                                                Return value:.. <class 'dict'>
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            New var:....... rcls = <class 'dict'>
                                            15:57:51.815100 line       223             if issubclass(subclass, rcls):
                                            15:57:51.816097 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                Starting var:.. itemref = <weakref at 0x000001F3B9351C28; to 'type' at 0x0000000075AF1980 (dict)>
                                                Starting var:.. item = <class 'dict'>
                                                15:57:51.816097 call        65                     yield item
                                                15:57:51.817122 line        60             for itemref in self.data:
                                                Modified var:.. itemref = <weakref at 0x000001F3B9AFA958; to 'type' at 0x000001F3B97CCA28 (ParseResults)>
                                                15:57:51.817122 line        61                 item = itemref()
                                                Modified var:.. item = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                                15:57:51.818121 line        62                 if item is not None:
                                                15:57:51.818121 line        65                     yield item
                                                15:57:51.819090 return      65                     yield item
                                                Return value:.. <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            Modified var:.. rcls = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                            15:57:51.819090 line       223             if issubclass(subclass, rcls):
                                            15:57:51.820114 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                Starting var:.. itemref = <weakref at 0x000001F3B9AFA958; to 'type' at 0x000001F3B97CCA28 (ParseResults)>
                                                Starting var:.. item = <class 'pkg_resources._vendor.pyparsing.ParseResults'>
                                                15:57:51.820114 call        65                     yield item
                                                15:57:51.821084 line        60             for itemref in self.data:
                                                Modified var:.. itemref = <weakref at 0x000001F3D1F280E8; to 'type' at 0x000001F3BA05F368 (Struct)>
                                                15:57:51.821084 line        61                 item = itemref()
                                                Modified var:.. item = <class 'google.protobuf.internal.well_known_types.Struct'>
                                                15:57:51.822084 line        62                 if item is not None:
                                                15:57:51.822084 line        65                     yield item
                                                15:57:51.822084 return      65                     yield item
                                                Return value:.. <class 'google.protobuf.internal.well_known_types.Struct'>
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            Modified var:.. rcls = <class 'google.protobuf.internal.well_known_types.Struct'>
                                            15:57:51.823106 line       223             if issubclass(subclass, rcls):
                                            15:57:51.823106 line       222         for rcls in cls._abc_registry:
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                Starting var:.. itemref = <weakref at 0x000001F3D1F280E8; to 'type' at 0x000001F3BA05F368 (Struct)>
                                                Starting var:.. item = <class 'google.protobuf.internal.well_known_types.Struct'>
                                                15:57:51.824075 call        65                     yield item
                                                15:57:51.825079 line        60             for itemref in self.data:
                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                    Starting var:.. e = None
                                                    Starting var:.. t = None
                                                    Starting var:.. b = None
                                                    15:57:51.825079 call        26     def __exit__(self, e, t, b):
                                                    15:57:51.826098 line        27         w = self.weakcontainer()
                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                    15:57:51.826098 line        28         if w is not None:
                                                    15:57:51.827093 line        29             s = w._iterating
                                                    New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                    15:57:51.827093 line        30             s.remove(self)
                                                    Modified var:.. s = set()
                                                    15:57:51.827093 line        31             if not s:
                                                    15:57:51.828069 line        32                 w._commit_removals()
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9354668>
                                                        15:57:51.828069 call        52     def _commit_removals(self):
                                                        15:57:51.828069 line        53         l = self._pending_removals
                                                        New var:....... l = []
                                                        15:57:51.828069 line        54         discard = self.data.discard
                                                        New var:....... discard = <built-in method discard of set object at 0x000001F3B9357588>
                                                        15:57:51.829091 line        55         while l:
                                                        15:57:51.829091 return      55         while l:
                                                        Return value:.. None
                                                    15:57:51.830087 return      32                 w._commit_removals()
                                                    Return value:.. None
                                                15:57:51.830087 return      60             for itemref in self.data:
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.831056 exception  222         for rcls in cls._abc_registry:
                                            StopIteration
                                            15:57:51.831056 line       227         for scls in cls.__subclasses__():
                                            New var:....... scls = typing.MutableMapping[~KT, ~VT]
                                            15:57:51.832082 line       228             if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.MutableMapping[~KT, ~VT]
                                                Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                15:57:51.832082 call      1145     def __subclasscheck__(self, cls):
                                                15:57:51.833080 line      1146         if self.__origin__ is not None:
                                                15:57:51.833080 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                                15:57:51.834063 line      1150             return False
                                                15:57:51.834063 return    1150             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.834063 line       227         for scls in cls.__subclasses__():
                                            Modified var:.. scls = typing.Dict
                                            15:57:51.835071 line       228             if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.Dict
                                                Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                15:57:51.835071 call      1145     def __subclasscheck__(self, cls):
                                                15:57:51.836071 line      1146         if self.__origin__ is not None:
                                                15:57:51.836071 line      1151         if self is Generic:
                                                15:57:51.837073 line      1154         return super().__subclasscheck__(cls)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = typing.Dict
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.837073 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.838039 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4CF8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.838039 call        70     def __contains__(self, item):
                                                        15:57:51.839063 line        71         try:
                                                        15:57:51.839063 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.839063 line        75         return wr in self.data
                                                        15:57:51.840048 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.840048 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Dict
                                                        15:57:51.840048 call      1034     def _abc_negative_cache_version(self):
                                                        15:57:51.841058 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.841058 line      1037         return self._gorg._abc_generic_negative_cache_version
                                                        15:57:51.841058 return    1037         return self._gorg._abc_generic_negative_cache_version
                                                        Return value:.. 57
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.842057 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Dict
                                                        15:57:51.842057 call      1020     def _abc_negative_cache(self):
                                                        15:57:51.843044 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.843044 line      1023         return self._gorg._abc_generic_negative_cache
                                                        15:57:51.843044 return    1023         return self._gorg._abc_generic_negative_cache
                                                        Return value:.. <_weakrefset.WeakSet object at 0x000001F3D3AC9C88>
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AC9C88>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.844050 call        70     def __contains__(self, item):
                                                        15:57:51.845056 line        71         try:
                                                        15:57:51.845056 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.845056 line        75         return wr in self.data
                                                        15:57:51.846047 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.846047 line       209         ok = cls.__subclasshook__(subclass)
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        Starting var:.. cls = typing.Dict
                                                        15:57:51.846047 call       889         def __extrahook__(subclass):
                                                        15:57:51.847042 line       890             if cls.__extra__ and issubclass(subclass, cls.__extra__):
                                                        15:57:51.848011 line       892             return NotImplemented
                                                        15:57:51.848011 return     892             return NotImplemented
                                                        Return value:.. NotImplemented
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    New var:....... ok = NotImplemented
                                                    15:57:51.848011 line       210         if ok is not NotImplemented:
                                                    15:57:51.849032 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Dict
                                                        Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.849032 call      1089     def __eq__(self, other):
                                                        15:57:51.850034 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.850034 line      1091             return NotImplemented
                                                        15:57:51.850034 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                        Starting var:.. self = typing.Dict
                                                        Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                                        15:57:51.851003 call      1089     def __eq__(self, other):
                                                        15:57:51.851003 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.852025 line      1091             return NotImplemented
                                                        15:57:51.852025 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                        Starting var:.. self = typing.Dict
                                                        Starting var:.. other = <class 'object'>
                                                        15:57:51.852025 call      1089     def __eq__(self, other):
                                                        15:57:51.853027 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.853027 line      1091             return NotImplemented
                                                        15:57:51.853027 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.853995 line       222         for rcls in cls._abc_registry:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4DA0>
                                                        15:57:51.853995 call        58     def __iter__(self):
                                                        15:57:51.855020 line        59         with _IterationGuard(self):
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6588>
                                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D57D4DA0>
                                                            15:57:51.855020 call        16     def __init__(self, weakcontainer):
                                                            15:57:51.856018 line        18         self.weakcontainer = ref(weakcontainer)
                                                            15:57:51.856018 return      18         self.weakcontainer = ref(weakcontainer)
                                                            Return value:.. None
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6588>
                                                            15:57:51.856018 call        20     def __enter__(self):
                                                            15:57:51.856987 line        21         w = self.weakcontainer()
                                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57D4DA0>
                                                            15:57:51.856987 line        22         if w is not None:
                                                            15:57:51.858013 line        23             w._iterating.add(self)
                                                            15:57:51.858013 line        24         return self
                                                            15:57:51.858013 return      24         return self
                                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBBB6588>
                                                        15:57:51.858013 line        60             for itemref in self.data:
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6588>
                                                            Starting var:.. e = None
                                                            Starting var:.. t = None
                                                            Starting var:.. b = None
                                                            15:57:51.859018 call        26     def __exit__(self, e, t, b):
                                                            15:57:51.859979 line        27         w = self.weakcontainer()
                                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57D4DA0>
                                                            15:57:51.859979 line        28         if w is not None:
                                                            15:57:51.859979 line        29             s = w._iterating
                                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBBB6588>}
                                                            15:57:51.861005 line        30             s.remove(self)
                                                            Modified var:.. s = set()
                                                            15:57:51.861005 line        31             if not s:
                                                            15:57:51.861005 line        32                 w._commit_removals()
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4DA0>
                                                                15:57:51.862002 call        52     def _commit_removals(self):
                                                                15:57:51.862002 line        53         l = self._pending_removals
                                                                New var:....... l = []
                                                                15:57:51.862002 line        54         discard = self.data.discard
                                                                New var:....... discard = <built-in method discard of set object at 0x000001F3B92C54A8>
                                                                15:57:51.862971 line        55         while l:
                                                                15:57:51.862971 return      55         while l:
                                                                Return value:.. None
                                                            15:57:51.864004 return      32                 w._commit_removals()
                                                            Return value:.. None
                                                        15:57:51.864004 return      60             for itemref in self.data:
                                                        Return value:.. None
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.864004 exception  222         for rcls in cls._abc_registry:
                                                    StopIteration
                                                    15:57:51.864994 line       227         for scls in cls.__subclasses__():
                                                    New var:....... scls = typing.Dict[~T, int]
                                                    15:57:51.864994 line       228             if issubclass(subclass, scls):
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Dict[~T, int]
                                                        Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                        15:57:51.865992 call      1145     def __subclasscheck__(self, cls):
                                                        15:57:51.866987 line      1146         if self.__origin__ is not None:
                                                        15:57:51.866987 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                                        15:57:51.866987 line      1150             return False
                                                        15:57:51.867987 return    1150             return False
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.867987 line       227         for scls in cls.__subclasses__():
                                                    Modified var:.. scls = typing.Counter
                                                    15:57:51.867987 line       228             if issubclass(subclass, scls):
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Counter
                                                        Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                        15:57:51.868955 call      1145     def __subclasscheck__(self, cls):
                                                        15:57:51.869953 line      1146         if self.__origin__ is not None:
                                                        15:57:51.869953 line      1151         if self is Generic:
                                                        15:57:51.869953 line      1154         return super().__subclasscheck__(cls)
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            Starting var:.. cls = typing.Counter
                                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                            15:57:51.870950 call       196     def __subclasscheck__(cls, subclass):
                                                            15:57:51.870950 line       199         if subclass in cls._abc_cache:
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF160>
                                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                                15:57:51.871947 call        70     def __contains__(self, item):
                                                                15:57:51.871947 line        71         try:
                                                                15:57:51.872970 line        72             wr = ref(item)
                                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                                15:57:51.872970 line        75         return wr in self.data
                                                                15:57:51.872970 return      75         return wr in self.data
                                                                Return value:.. False
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.873966 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                                Starting var:.. self = typing.Counter
                                                                15:57:51.873966 call      1034     def _abc_negative_cache_version(self):
                                                                15:57:51.874971 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                                15:57:51.874971 line      1037         return self._gorg._abc_generic_negative_cache_version
                                                                15:57:51.874971 return    1037         return self._gorg._abc_generic_negative_cache_version
                                                                Return value:.. 57
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.875961 line       206         elif subclass in cls._abc_negative_cache:
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                                Starting var:.. self = typing.Counter
                                                                15:57:51.875961 call      1020     def _abc_negative_cache(self):
                                                                15:57:51.876959 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                                15:57:51.876959 line      1023         return self._gorg._abc_generic_negative_cache
                                                                15:57:51.876959 return    1023         return self._gorg._abc_generic_negative_cache
                                                                Return value:.. <_weakrefset.WeakSet object at 0x000001F3D61556A0>
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D61556A0>
                                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                                15:57:51.877931 call        70     def __contains__(self, item):
                                                                15:57:51.877931 line        71         try:
                                                                15:57:51.878953 line        72             wr = ref(item)
                                                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                                15:57:51.878953 line        75         return wr in self.data
                                                                15:57:51.878953 return      75         return wr in self.data
                                                                Return value:.. False
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.879951 line       209         ok = cls.__subclasshook__(subclass)
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                                Starting var:.. cls = typing.Counter
                                                                15:57:51.879951 call       889         def __extrahook__(subclass):
                                                                15:57:51.880923 line       890             if cls.__extra__ and issubclass(subclass, cls.__extra__):
                                                                15:57:51.880923 line       892             return NotImplemented
                                                                15:57:51.881953 return     892             return NotImplemented
                                                                Return value:.. NotImplemented
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            New var:....... ok = NotImplemented
                                                            15:57:51.881953 line       210         if ok is not NotImplemented:
                                                            15:57:51.882942 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                                Starting var:.. self = typing.Counter
                                                                Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                                                15:57:51.882942 call      1089     def __eq__(self, other):
                                                                15:57:51.883915 line      1090         if not isinstance(other, GenericMeta):
                                                                15:57:51.883915 line      1091             return NotImplemented
                                                                15:57:51.883915 return    1091             return NotImplemented
                                                                Return value:.. NotImplemented
                                                                Starting var:.. self = typing.Counter
                                                                Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                                                15:57:51.884946 call      1089     def __eq__(self, other):
                                                                15:57:51.884946 line      1090         if not isinstance(other, GenericMeta):
                                                                15:57:51.884946 line      1091             return NotImplemented
                                                                15:57:51.885937 return    1091             return NotImplemented
                                                                Return value:.. NotImplemented
                                                                Starting var:.. self = typing.Counter
                                                                Starting var:.. other = <class 'object'>
                                                                15:57:51.885937 call      1089     def __eq__(self, other):
                                                                15:57:51.886908 line      1090         if not isinstance(other, GenericMeta):
                                                                15:57:51.886908 line      1091             return NotImplemented
                                                                15:57:51.886908 return    1091             return NotImplemented
                                                                Return value:.. NotImplemented
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.887932 line       222         for rcls in cls._abc_registry:
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF1D0>
                                                                15:57:51.887932 call        58     def __iter__(self):
                                                                15:57:51.888930 line        59         with _IterationGuard(self):
                                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6748>
                                                                    Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D57DF1D0>
                                                                    15:57:51.888930 call        16     def __init__(self, weakcontainer):
                                                                    15:57:51.889899 line        18         self.weakcontainer = ref(weakcontainer)
                                                                    15:57:51.889899 return      18         self.weakcontainer = ref(weakcontainer)
                                                                    Return value:.. None
                                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6748>
                                                                    15:57:51.889899 call        20     def __enter__(self):
                                                                    15:57:51.890919 line        21         w = self.weakcontainer()
                                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57DF1D0>
                                                                    15:57:51.890919 line        22         if w is not None:
                                                                    15:57:51.890919 line        23             w._iterating.add(self)
                                                                    15:57:51.890919 line        24         return self
                                                                    15:57:51.891919 return      24         return self
                                                                    Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBBB6748>
                                                                15:57:51.891919 line        60             for itemref in self.data:
                                                                    Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB6748>
                                                                    Starting var:.. e = None
                                                                    Starting var:.. t = None
                                                                    Starting var:.. b = None
                                                                    15:57:51.891919 call        26     def __exit__(self, e, t, b):
                                                                    15:57:51.892891 line        27         w = self.weakcontainer()
                                                                    New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57DF1D0>
                                                                    15:57:51.893913 line        28         if w is not None:
                                                                    15:57:51.893913 line        29             s = w._iterating
                                                                    New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBBB6748>}
                                                                    15:57:51.893913 line        30             s.remove(self)
                                                                    Modified var:.. s = set()
                                                                    15:57:51.894912 line        31             if not s:
                                                                    15:57:51.894912 line        32                 w._commit_removals()
                                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57DF1D0>
                                                                        15:57:51.894912 call        52     def _commit_removals(self):
                                                                        15:57:51.895883 line        53         l = self._pending_removals
                                                                        New var:....... l = []
                                                                        15:57:51.895883 line        54         discard = self.data.discard
                                                                        New var:....... discard = <built-in method discard of set object at 0x000001F3D57E1668>
                                                                        15:57:51.895883 line        55         while l:
                                                                        15:57:51.896910 return      55         while l:
                                                                        Return value:.. None
                                                                    15:57:51.896910 return      32                 w._commit_removals()
                                                                    Return value:.. None
                                                                15:57:51.897878 return      60             for itemref in self.data:
                                                                Return value:.. None
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.897878 exception  222         for rcls in cls._abc_registry:
                                                            StopIteration
                                                            15:57:51.898875 line       227         for scls in cls.__subclasses__():
                                                            15:57:51.898875 line       232         cls._abc_negative_cache.add(subclass)
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                                Starting var:.. self = typing.Counter
                                                                15:57:51.898875 call      1020     def _abc_negative_cache(self):
                                                                15:57:51.899901 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                                15:57:51.899901 line      1023         return self._gorg._abc_generic_negative_cache
                                                                15:57:51.899901 return    1023         return self._gorg._abc_generic_negative_cache
                                                                Return value:.. <_weakrefset.WeakSet object at 0x000001F3D61556A0>
                                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D61556A0>
                                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                                15:57:51.900904 call        81     def add(self, item):
                                                                15:57:51.901867 line        82         if self._pending_removals:
                                                                15:57:51.901867 line        84         self.data.add(ref(item, self._remove))
                                                                15:57:51.901867 return      84         self.data.add(ref(item, self._remove))
                                                                Return value:.. None
                                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                            15:57:51.901867 line       233         return False
                                                            15:57:51.902865 return     233         return False
                                                            Return value:.. False
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        15:57:51.902865 return    1154         return super().__subclasscheck__(cls)
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.903893 line       227         for scls in cls.__subclasses__():
                                                    15:57:51.903893 line       232         cls._abc_negative_cache.add(subclass)
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.Dict
                                                        15:57:51.904859 call      1020     def _abc_negative_cache(self):
                                                        15:57:51.904859 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.904859 line      1023         return self._gorg._abc_generic_negative_cache
                                                        15:57:51.905857 return    1023         return self._gorg._abc_generic_negative_cache
                                                        Return value:.. <_weakrefset.WeakSet object at 0x000001F3D3AC9C88>
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3AC9C88>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.905857 call        81     def add(self, item):
                                                        15:57:51.906853 line        82         if self._pending_removals:
                                                        15:57:51.906853 line        84         self.data.add(ref(item, self._remove))
                                                        15:57:51.907851 return      84         self.data.add(ref(item, self._remove))
                                                        Return value:.. None
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.907851 line       233         return False
                                                    15:57:51.907851 return     233         return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.908848 return    1154         return super().__subclasscheck__(cls)
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.909845 line       227         for scls in cls.__subclasses__():
                                            Modified var:.. scls = typing.DefaultDict
                                            15:57:51.909845 line       228             if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.DefaultDict
                                                Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                15:57:51.910843 call      1145     def __subclasscheck__(self, cls):
                                                15:57:51.911840 line      1146         if self.__origin__ is not None:
                                                15:57:51.911840 line      1151         if self is Generic:
                                                15:57:51.911840 line      1154         return super().__subclasscheck__(cls)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = typing.DefaultDict
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.911840 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.912838 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4F60>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.913835 call        70     def __contains__(self, item):
                                                        15:57:51.914832 line        71         try:
                                                        15:57:51.914832 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.914832 line        75         return wr in self.data
                                                        15:57:51.915830 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.915830 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.DefaultDict
                                                        15:57:51.916827 call      1034     def _abc_negative_cache_version(self):
                                                        15:57:51.916827 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.917824 line      1037         return self._gorg._abc_generic_negative_cache_version
                                                        15:57:51.917824 return    1037         return self._gorg._abc_generic_negative_cache_version
                                                        Return value:.. 57
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.917824 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.DefaultDict
                                                        15:57:51.918822 call      1020     def _abc_negative_cache(self):
                                                        15:57:51.919819 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.919819 line      1023         return self._gorg._abc_generic_negative_cache
                                                        15:57:51.919819 return    1023         return self._gorg._abc_generic_negative_cache
                                                        Return value:.. <_weakrefset.WeakSet object at 0x000001F3D3A90B00>
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3A90B00>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.920816 call        70     def __contains__(self, item):
                                                        15:57:51.920816 line        71         try:
                                                        15:57:51.921813 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.921813 line        75         return wr in self.data
                                                        15:57:51.921813 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.922811 line       209         ok = cls.__subclasshook__(subclass)
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        Starting var:.. cls = typing.DefaultDict
                                                        15:57:51.922811 call       889         def __extrahook__(subclass):
                                                        15:57:51.923808 line       890             if cls.__extra__ and issubclass(subclass, cls.__extra__):
                                                        15:57:51.923808 line       892             return NotImplemented
                                                        15:57:51.924805 return     892             return NotImplemented
                                                        Return value:.. NotImplemented
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    New var:....... ok = NotImplemented
                                                    15:57:51.924805 line       210         if ok is not NotImplemented:
                                                    15:57:51.925803 line       218         if cls in getattr(subclass, '__mro__', ()):
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.DefaultDict
                                                        Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.925803 call      1089     def __eq__(self, other):
                                                        15:57:51.926800 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.926800 line      1091             return NotImplemented
                                                        15:57:51.926800 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                        Starting var:.. self = typing.DefaultDict
                                                        Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                                        15:57:51.927797 call      1089     def __eq__(self, other):
                                                        15:57:51.927797 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.928795 line      1091             return NotImplemented
                                                        15:57:51.928795 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                        Starting var:.. self = typing.DefaultDict
                                                        Starting var:.. other = <class 'object'>
                                                        15:57:51.928795 call      1089     def __eq__(self, other):
                                                        15:57:51.929792 line      1090         if not isinstance(other, GenericMeta):
                                                        15:57:51.929792 line      1091             return NotImplemented
                                                        15:57:51.930789 return    1091             return NotImplemented
                                                        Return value:.. NotImplemented
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.930789 line       222         for rcls in cls._abc_registry:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4EF0>
                                                        15:57:51.931787 call        58     def __iter__(self):
                                                        15:57:51.931787 line        59         with _IterationGuard(self):
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB67B8>
                                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D57D4EF0>
                                                            15:57:51.932785 call        16     def __init__(self, weakcontainer):
                                                            15:57:51.932785 line        18         self.weakcontainer = ref(weakcontainer)
                                                            15:57:51.932785 return      18         self.weakcontainer = ref(weakcontainer)
                                                            Return value:.. None
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB67B8>
                                                            15:57:51.933782 call        20     def __enter__(self):
                                                            15:57:51.933782 line        21         w = self.weakcontainer()
                                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57D4EF0>
                                                            15:57:51.934779 line        22         if w is not None:
                                                            15:57:51.934779 line        23             w._iterating.add(self)
                                                            15:57:51.934779 line        24         return self
                                                            15:57:51.935777 return      24         return self
                                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBBB67B8>
                                                        15:57:51.935777 line        60             for itemref in self.data:
                                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBBB67B8>
                                                            Starting var:.. e = None
                                                            Starting var:.. t = None
                                                            Starting var:.. b = None
                                                            15:57:51.935777 call        26     def __exit__(self, e, t, b):
                                                            15:57:51.936774 line        27         w = self.weakcontainer()
                                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D57D4EF0>
                                                            15:57:51.937771 line        28         if w is not None:
                                                            15:57:51.937771 line        29             s = w._iterating
                                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBBB67B8>}
                                                            15:57:51.937771 line        30             s.remove(self)
                                                            Modified var:.. s = set()
                                                            15:57:51.938769 line        31             if not s:
                                                            15:57:51.938769 line        32                 w._commit_removals()
                                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57D4EF0>
                                                                15:57:51.938769 call        52     def _commit_removals(self):
                                                                15:57:51.939765 line        53         l = self._pending_removals
                                                                New var:....... l = []
                                                                15:57:51.939765 line        54         discard = self.data.discard
                                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D57D6F28>
                                                                15:57:51.940763 line        55         while l:
                                                                15:57:51.940763 return      55         while l:
                                                                Return value:.. None
                                                            15:57:51.940763 return      32                 w._commit_removals()
                                                            Return value:.. None
                                                        15:57:51.941791 return      60             for itemref in self.data:
                                                        Return value:.. None
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.941791 exception  222         for rcls in cls._abc_registry:
                                                    StopIteration
                                                    15:57:51.942758 line       227         for scls in cls.__subclasses__():
                                                    15:57:51.942758 line       232         cls._abc_negative_cache.add(subclass)
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.DefaultDict
                                                        15:57:51.942758 call      1020     def _abc_negative_cache(self):
                                                        15:57:51.943755 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.943755 line      1023         return self._gorg._abc_generic_negative_cache
                                                        15:57:51.943755 return    1023         return self._gorg._abc_generic_negative_cache
                                                        Return value:.. <_weakrefset.WeakSet object at 0x000001F3D3A90B00>
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3A90B00>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.944759 call        81     def add(self, item):
                                                        15:57:51.945750 line        82         if self._pending_removals:
                                                        15:57:51.945750 line        84         self.data.add(ref(item, self._remove))
                                                        15:57:51.945750 return      84         self.data.add(ref(item, self._remove))
                                                        Return value:.. None
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.946747 line       233         return False
                                                    15:57:51.946747 return     233         return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.947744 return    1154         return super().__subclasscheck__(cls)
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.947744 line       227         for scls in cls.__subclasses__():
                                            Modified var:.. scls = typing.Dict[~T, int]
                                            15:57:51.948742 line       228             if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.Dict[~T, int]
                                                Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                15:57:51.948742 call      1145     def __subclasscheck__(self, cls):
                                                15:57:51.949739 line      1146         if self.__origin__ is not None:
                                                15:57:51.949739 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                                15:57:51.950737 line      1150             return False
                                                15:57:51.950737 return    1150             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.950737 line       227         for scls in cls.__subclasses__():
                                            Modified var:.. scls = typing.ChainMap
                                            15:57:51.951733 line       228             if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.ChainMap
                                                Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                                Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                                15:57:51.951733 call      1145     def __subclasscheck__(self, cls):
                                                15:57:51.952731 line      1146         if self.__origin__ is not None:
                                                15:57:51.953728 line      1151         if self is Generic:
                                                15:57:51.953728 line      1154         return super().__subclasscheck__(cls)
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    Starting var:.. cls = typing.ChainMap
                                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:51.953728 call       196     def __subclasscheck__(cls, subclass):
                                                    15:57:51.954725 line       199         if subclass in cls._abc_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B94C1A90>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.954725 call        70     def __contains__(self, item):
                                                        15:57:51.955723 line        71         try:
                                                        15:57:51.955723 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.956720 line        75         return wr in self.data
                                                        15:57:51.956720 return      75         return wr in self.data
                                                        Return value:.. False
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.957718 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.ChainMap
                                                        15:57:51.957718 call      1034     def _abc_negative_cache_version(self):
                                                        15:57:51.958715 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.958715 line      1036             return self.__extra__._abc_negative_cache_version
                                                        15:57:51.958715 return    1036             return self.__extra__._abc_negative_cache_version
                                                        Return value:.. 57
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.959712 line       206         elif subclass in cls._abc_negative_cache:
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                        Starting var:.. self = typing.ChainMap
                                                        15:57:51.959712 call      1020     def _abc_negative_cache(self):
                                                        15:57:51.960709 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                        15:57:51.960709 line      1022             return self.__extra__._abc_negative_cache
                                                        15:57:51.960709 return    1022             return self.__extra__._abc_negative_cache
                                                        Return value:.. <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D33017B8>
                                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                        15:57:51.961707 call        70     def __contains__(self, item):
                                                        15:57:51.962704 line        71         try:
                                                        15:57:51.962704 line        72             wr = ref(item)
                                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                        15:57:51.962704 line        75         return wr in self.data
                                                        15:57:51.962704 return      75         return wr in self.data
                                                        Return value:.. True
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                    15:57:51.963702 line       207             return False
                                                    15:57:51.964699 return     207             return False
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                15:57:51.964699 return    1154         return super().__subclasscheck__(cls)
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.965696 line       227         for scls in cls.__subclasses__():
                                            15:57:51.965696 line       232         cls._abc_negative_cache.add(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                Starting var:.. self = typing.MutableMapping
                                                15:57:51.965696 call      1020     def _abc_negative_cache(self):
                                                15:57:51.966694 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                15:57:51.966694 line      1022             return self.__extra__._abc_negative_cache
                                                15:57:51.967691 return    1022             return self.__extra__._abc_negative_cache
                                                Return value:.. <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:51.967691 call        81     def add(self, item):
                                                15:57:51.968688 line        82         if self._pending_removals:
                                                15:57:51.968688 line        84         self.data.add(ref(item, self._remove))
                                                15:57:51.968688 return      84         self.data.add(ref(item, self._remove))
                                                Return value:.. None
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                            15:57:51.969685 line       233         return False
                                            15:57:51.969685 return     233         return False
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                        15:57:51.970683 return    1154         return super().__subclasscheck__(cls)
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.970683 line       227         for scls in cls.__subclasses__():
                                    Modified var:.. scls = typing.MutableMapping[~KT, ~VT]
                                    15:57:51.971680 line       228             if issubclass(subclass, scls):
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                        Starting var:.. self = typing.MutableMapping[~KT, ~VT]
                                        Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                        Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                        15:57:51.971680 call      1145     def __subclasscheck__(self, cls):
                                        15:57:51.972678 line      1146         if self.__origin__ is not None:
                                        15:57:51.973675 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                        15:57:51.973675 line      1150             return False
                                        15:57:51.973675 return    1150             return False
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.974672 line       227         for scls in cls.__subclasses__():
                                    15:57:51.974672 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.975669 call        81     def add(self, item):
                                        15:57:51.975669 line        82         if self._pending_removals:
                                        15:57:51.976667 line        84         self.data.add(ref(item, self._remove))
                                        15:57:51.976667 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.976667 line       233         return False
                                    15:57:51.977664 return     233         return False
                                    Return value:.. False
                                15:57:51.977664 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'selectors._SelectorMapping'>
                                15:57:51.978661 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'selectors._SelectorMapping'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:51.978661 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:51.979659 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE8D0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.979659 call        70     def __contains__(self, item):
                                        15:57:51.980656 line        71         try:
                                        15:57:51.980656 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:51.980656 line        75         return wr in self.data
                                        15:57:51.981653 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.981653 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:51.982651 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C85F8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.982651 call        70     def __contains__(self, item):
                                        15:57:51.983648 line        71         try:
                                        15:57:51.983648 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:51.983648 line        75         return wr in self.data
                                        15:57:51.984645 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.984645 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'selectors._SelectorMapping'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.985643 call       393     def __subclasshook__(cls, C):
                                        15:57:51.985643 line       394         if cls is Collection:
                                        15:57:51.986640 line       396         return NotImplemented
                                        15:57:51.986640 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:51.986640 line       210         if ok is not NotImplemented:
                                    15:57:51.987637 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:51.987637 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE9B0>
                                        15:57:51.988635 call        58     def __iter__(self):
                                        15:57:51.988635 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B96EE9B0>
                                            15:57:51.988635 call        16     def __init__(self, weakcontainer):
                                            15:57:51.989632 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:51.989632 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:51.990629 call        20     def __enter__(self):
                                            15:57:51.990629 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B96EE9B0>
                                            15:57:51.990629 line        22         if w is not None:
                                            15:57:51.991627 line        23             w._iterating.add(self)
                                            15:57:51.991627 line        24         return self
                                            15:57:51.991627 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:51.992624 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:51.992624 call        26     def __exit__(self, e, t, b):
                                            15:57:51.993621 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B96EE9B0>
                                            15:57:51.993621 line        28         if w is not None:
                                            15:57:51.994619 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:51.994619 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:51.994619 line        31             if not s:
                                            15:57:51.995616 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE9B0>
                                                15:57:51.995616 call        52     def _commit_removals(self):
                                                15:57:51.996614 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:51.996614 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3B96D2908>
                                                15:57:51.996614 line        55         while l:
                                                15:57:51.997611 return      55         while l:
                                                Return value:.. None
                                            15:57:51.997611 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:51.998608 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:51.998608 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:51.999606 line       227         for scls in cls.__subclasses__():
                                    15:57:51.999606 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C85F8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:51.999606 call        81     def add(self, item):
                                        15:57:52.000603 line        82         if self._pending_removals:
                                        15:57:52.001600 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.001600 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.001600 line       233         return False
                                    15:57:52.002597 return     233         return False
                                    Return value:.. False
                                15:57:52.002597 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'numpy.lib.npyio.NpzFile'>
                                15:57:52.002597 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'numpy.lib.npyio.NpzFile'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.003595 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.004592 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D03E1320>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.004592 call        70     def __contains__(self, item):
                                        15:57:52.005589 line        71         try:
                                        15:57:52.005589 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.005589 line        75         return wr in self.data
                                        15:57:52.006587 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.006587 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.006587 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D1F1BB38>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.007584 call        70     def __contains__(self, item):
                                        15:57:52.008581 line        71         try:
                                        15:57:52.008581 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.008581 line        75         return wr in self.data
                                        15:57:52.009579 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.009579 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'numpy.lib.npyio.NpzFile'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.009579 call       393     def __subclasshook__(cls, C):
                                        15:57:52.010576 line       394         if cls is Collection:
                                        15:57:52.011573 line       396         return NotImplemented
                                        15:57:52.011573 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.011573 line       210         if ok is not NotImplemented:
                                    15:57:52.012571 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.012571 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D03E12E8>
                                        15:57:52.012571 call        58     def __iter__(self):
                                        15:57:52.013568 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D03E12E8>
                                            15:57:52.013568 call        16     def __init__(self, weakcontainer):
                                            15:57:52.014565 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.014565 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.015563 call        20     def __enter__(self):
                                            15:57:52.015563 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D03E12E8>
                                            15:57:52.015563 line        22         if w is not None:
                                            15:57:52.016560 line        23             w._iterating.add(self)
                                            15:57:52.016560 line        24         return self
                                            15:57:52.016560 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.017557 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.017557 call        26     def __exit__(self, e, t, b):
                                            15:57:52.018555 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D03E12E8>
                                            15:57:52.018555 line        28         if w is not None:
                                            15:57:52.019552 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.019552 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.019552 line        31             if not s:
                                            15:57:52.020549 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D03E12E8>
                                                15:57:52.020549 call        52     def _commit_removals(self):
                                                15:57:52.021547 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.021547 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D03C0828>
                                                15:57:52.021547 line        55         while l:
                                                15:57:52.022544 return      55         while l:
                                                Return value:.. None
                                            15:57:52.022544 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.023541 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.023541 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.024539 line       227         for scls in cls.__subclasses__():
                                    15:57:52.024539 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D1F1BB38>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.024539 call        81     def add(self, item):
                                        15:57:52.025536 line        82         if self._pending_removals:
                                        15:57:52.026534 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.026534 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.026534 line       233         return False
                                    15:57:52.027531 return     233         return False
                                    Return value:.. False
                                15:57:52.027531 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'tensorflow.python.training.tracking.data_structures.Mapping'>
                                15:57:52.027531 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'tensorflow.python.training.tracking.data_structures.Mapping'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.028528 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.028528 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C240>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.029526 call        70     def __contains__(self, item):
                                        15:57:52.030523 line        71         try:
                                        15:57:52.030523 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.030523 line        75         return wr in self.data
                                        15:57:52.031520 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.031520 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.031520 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE9E8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.032517 call        70     def __contains__(self, item):
                                        15:57:52.033515 line        71         try:
                                        15:57:52.033515 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.033515 line        75         return wr in self.data
                                        15:57:52.033515 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.034512 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'tensorflow.python.training.tracking.data_structures.Mapping'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.034512 call       393     def __subclasshook__(cls, C):
                                        15:57:52.035509 line       394         if cls is Collection:
                                        15:57:52.035509 line       396         return NotImplemented
                                        15:57:52.036507 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.036507 line       210         if ok is not NotImplemented:
                                    15:57:52.037504 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.037504 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C208>
                                        15:57:52.037504 call        58     def __iter__(self):
                                        15:57:52.038501 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D2F0C208>
                                            15:57:52.038501 call        16     def __init__(self, weakcontainer):
                                            15:57:52.039499 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.039499 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.039499 call        20     def __enter__(self):
                                            15:57:52.040496 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2F0C208>
                                            15:57:52.040496 line        22         if w is not None:
                                            15:57:52.041493 line        23             w._iterating.add(self)
                                            15:57:52.041493 line        24         return self
                                            15:57:52.041493 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.041493 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.042491 call        26     def __exit__(self, e, t, b):
                                            15:57:52.043488 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2F0C208>
                                            15:57:52.043488 line        28         if w is not None:
                                            15:57:52.043488 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.044486 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.044486 line        31             if not s:
                                            15:57:52.045483 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C208>
                                                15:57:52.045483 call        52     def _commit_removals(self):
                                                15:57:52.045483 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.046480 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D2F0D4A8>
                                                15:57:52.046480 line        55         while l:
                                                15:57:52.046480 return      55         while l:
                                                Return value:.. None
                                            15:57:52.047477 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.047477 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.048475 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.048475 line       227         for scls in cls.__subclasses__():
                                    15:57:52.049472 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE9E8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.049472 call        81     def add(self, item):
                                        15:57:52.050469 line        82         if self._pending_removals:
                                        15:57:52.050469 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.050469 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.051467 line       233         return False
                                    15:57:52.051467 return     233         return False
                                    Return value:.. False
                                15:57:52.052464 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'h5py.h5t._DeprecatedMapping'>
                                15:57:52.052464 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'h5py.h5t._DeprecatedMapping'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.052464 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.053461 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B828>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.053461 call        70     def __contains__(self, item):
                                        15:57:52.054459 line        71         try:
                                        15:57:52.054459 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.054459 line        75         return wr in self.data
                                        15:57:52.055456 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.055456 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.056454 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C2B0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.056454 call        70     def __contains__(self, item):
                                        15:57:52.057451 line        71         try:
                                        15:57:52.057451 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.057451 line        75         return wr in self.data
                                        15:57:52.058448 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.058448 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'h5py.h5t._DeprecatedMapping'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.059445 call       393     def __subclasshook__(cls, C):
                                        15:57:52.059445 line       394         if cls is Collection:
                                        15:57:52.060443 line       396         return NotImplemented
                                        15:57:52.060443 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.060443 line       210         if ok is not NotImplemented:
                                    15:57:52.061440 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.061440 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B2B0>
                                        15:57:52.061440 call        58     def __iter__(self):
                                        15:57:52.062437 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D390B2B0>
                                            15:57:52.062437 call        16     def __init__(self, weakcontainer):
                                            15:57:52.063435 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.063435 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.064432 call        20     def __enter__(self):
                                            15:57:52.064432 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D390B2B0>
                                            15:57:52.064432 line        22         if w is not None:
                                            15:57:52.065429 line        23             w._iterating.add(self)
                                            15:57:52.065429 line        24         return self
                                            15:57:52.065429 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.066427 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.066427 call        26     def __exit__(self, e, t, b):
                                            15:57:52.067424 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D390B2B0>
                                            15:57:52.067424 line        28         if w is not None:
                                            15:57:52.068421 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.068421 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.068421 line        31             if not s:
                                            15:57:52.069419 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B2B0>
                                                15:57:52.069419 call        52     def _commit_removals(self):
                                                15:57:52.070416 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.070416 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D3890748>
                                                15:57:52.070416 line        55         while l:
                                                15:57:52.071413 return      55         while l:
                                                Return value:.. None
                                            15:57:52.071413 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.072411 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.072411 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.073408 line       227         for scls in cls.__subclasses__():
                                    15:57:52.073408 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C2B0>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.073408 call        81     def add(self, item):
                                        15:57:52.074405 line        82         if self._pending_removals:
                                        15:57:52.074405 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.075403 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.075403 line       233         return False
                                    15:57:52.075403 return     233         return False
                                    Return value:.. False
                                15:57:52.076400 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'h5py._hl.base.MappingHDF5'>
                                15:57:52.076400 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'h5py._hl.base.MappingHDF5'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.077398 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.077398 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFA58>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.077398 call        70     def __contains__(self, item):
                                        15:57:52.078395 line        71         try:
                                        15:57:52.078395 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.079392 line        75         return wr in self.data
                                        15:57:52.079392 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.080389 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.080389 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B860>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.080389 call        70     def __contains__(self, item):
                                        15:57:52.081387 line        71         try:
                                        15:57:52.081387 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.082384 line        75         return wr in self.data
                                        15:57:52.082384 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.083381 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'h5py._hl.base.MappingHDF5'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.083381 call       393     def __subclasshook__(cls, C):
                                        15:57:52.084379 line       394         if cls is Collection:
                                        15:57:52.084379 line       396         return NotImplemented
                                        15:57:52.084379 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.085376 line       210         if ok is not NotImplemented:
                                    15:57:52.085376 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.086373 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFA20>
                                        15:57:52.086373 call        58     def __iter__(self):
                                        15:57:52.086373 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D39EFA20>
                                            15:57:52.087371 call        16     def __init__(self, weakcontainer):
                                            15:57:52.087371 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.088368 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.088368 call        20     def __enter__(self):
                                            15:57:52.089365 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D39EFA20>
                                            15:57:52.089365 line        22         if w is not None:
                                            15:57:52.089365 line        23             w._iterating.add(self)
                                            15:57:52.089365 line        24         return self
                                            15:57:52.090363 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.090363 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.090363 call        26     def __exit__(self, e, t, b):
                                            15:57:52.091360 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D39EFA20>
                                            15:57:52.092357 line        28         if w is not None:
                                            15:57:52.092357 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.092357 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.093355 line        31             if not s:
                                            15:57:52.093355 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFA20>
                                                15:57:52.093355 call        52     def _commit_removals(self):
                                                15:57:52.094352 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.094352 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D3A972E8>
                                                15:57:52.095349 line        55         while l:
                                                15:57:52.095349 return      55         while l:
                                                Return value:.. None
                                            15:57:52.095349 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.096347 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.096347 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.097344 line       227         for scls in cls.__subclasses__():
                                    New var:....... scls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                    15:57:52.097344 line       228             if issubclass(subclass, scls):
                                        Starting var:.. cls = <class 'h5py._hl.base.MutableMappingHDF5'>
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.098341 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:52.099339 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFBA8>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.099339 call        70     def __contains__(self, item):
                                            15:57:52.100336 line        71         try:
                                            15:57:52.100336 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:52.100336 line        75         return wr in self.data
                                            15:57:52.100336 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.101334 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                        15:57:52.101334 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2185208>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.102331 call        70     def __contains__(self, item):
                                            15:57:52.102331 line        71         try:
                                            15:57:52.103328 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:52.103328 line        75         return wr in self.data
                                            15:57:52.103328 return      75         return wr in self.data
                                            Return value:.. True
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.104326 line       207             return False
                                        15:57:52.104326 return     207             return False
                                        Return value:.. False
                                    15:57:52.105323 line       227         for scls in cls.__subclasses__():
                                    15:57:52.105323 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B860>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.105323 call        81     def add(self, item):
                                        15:57:52.106320 line        82         if self._pending_removals:
                                        15:57:52.106320 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.106320 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.107318 line       233         return False
                                    15:57:52.107318 return     233         return False
                                    Return value:.. False
                                15:57:52.108315 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'tensorflow.python.saved_model.signature_serialization._SignatureMap'>
                                15:57:52.108315 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'tensorflow.python.saved_model.signature_serialization._SignatureMap'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.108315 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.109312 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93C18>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.109312 call        70     def __contains__(self, item):
                                        15:57:52.110309 line        71         try:
                                        15:57:52.110309 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.111307 line        75         return wr in self.data
                                        15:57:52.111307 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.112304 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.112304 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFAC8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.112304 call        70     def __contains__(self, item):
                                        15:57:52.113301 line        71         try:
                                        15:57:52.113301 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.114299 line        75         return wr in self.data
                                        15:57:52.114299 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.115296 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'tensorflow.python.saved_model.signature_serialization._SignatureMap'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.115296 call       393     def __subclasshook__(cls, C):
                                        15:57:52.116293 line       394         if cls is Collection:
                                        15:57:52.116293 line       396         return NotImplemented
                                        15:57:52.116293 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.117291 line       210         if ok is not NotImplemented:
                                    15:57:52.117291 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.118288 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93BA8>
                                        15:57:52.118288 call        58     def __iter__(self):
                                        15:57:52.118288 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D3C93BA8>
                                            15:57:52.119286 call        16     def __init__(self, weakcontainer):
                                            15:57:52.119286 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.120283 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.120283 call        20     def __enter__(self):
                                            15:57:52.120283 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3C93BA8>
                                            15:57:52.121280 line        22         if w is not None:
                                            15:57:52.121280 line        23             w._iterating.add(self)
                                            15:57:52.121280 line        24         return self
                                            15:57:52.122277 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.122277 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.122277 call        26     def __exit__(self, e, t, b):
                                            15:57:52.123275 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3C93BA8>
                                            15:57:52.124272 line        28         if w is not None:
                                            15:57:52.124272 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.124272 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.125269 line        31             if not s:
                                            15:57:52.125269 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93BA8>
                                                15:57:52.125269 call        52     def _commit_removals(self):
                                                15:57:52.126267 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.126267 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D3C72588>
                                                15:57:52.127264 line        55         while l:
                                                15:57:52.127264 return      55         while l:
                                                Return value:.. None
                                            15:57:52.127264 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.128261 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.128261 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.129259 line       227         for scls in cls.__subclasses__():
                                    15:57:52.129259 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFAC8>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.129259 call        81     def add(self, item):
                                        15:57:52.130256 line        82         if self._pending_removals:
                                        15:57:52.131253 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.131253 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.131253 line       233         return False
                                    15:57:52.132251 return     233         return False
                                    Return value:.. False
                                15:57:52.132251 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = <class 'tensorflow.python.saved_model.model_utils.mode_keys.ModeKeyMap'>
                                15:57:52.132251 line       228             if issubclass(subclass, scls):
                                    Starting var:.. cls = <class 'tensorflow.python.saved_model.model_utils.mode_keys.ModeKeyMap'>
                                    Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.133248 call       196     def __subclasscheck__(cls, subclass):
                                    15:57:52.134246 line       199         if subclass in cls._abc_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3CE4048>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.134246 call        70     def __contains__(self, item):
                                        15:57:52.135243 line        71         try:
                                        15:57:52.135243 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.135243 line        75         return wr in self.data
                                        15:57:52.136240 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.136240 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                    15:57:52.136240 line       206         elif subclass in cls._abc_negative_cache:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93C50>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.137237 call        70     def __contains__(self, item):
                                        15:57:52.137237 line        71         try:
                                        15:57:52.138235 line        72             wr = ref(item)
                                        New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                        15:57:52.138235 line        75         return wr in self.data
                                        15:57:52.138235 return      75         return wr in self.data
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.139232 line       209         ok = cls.__subclasshook__(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                        Starting var:.. cls = <class 'tensorflow.python.saved_model.model_utils.mode_keys.ModeKeyMap'>
                                        Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.139232 call       393     def __subclasshook__(cls, C):
                                        15:57:52.140229 line       394         if cls is Collection:
                                        15:57:52.140229 line       396         return NotImplemented
                                        15:57:52.141227 return     396         return NotImplemented
                                        Return value:.. NotImplemented
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    New var:....... ok = NotImplemented
                                    15:57:52.141227 line       210         if ok is not NotImplemented:
                                    15:57:52.142224 line       218         if cls in getattr(subclass, '__mro__', ()):
                                    15:57:52.142224 line       222         for rcls in cls._abc_registry:
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3CD4FD0>
                                        15:57:52.142224 call        58     def __iter__(self):
                                        15:57:52.143221 line        59         with _IterationGuard(self):
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D3CD4FD0>
                                            15:57:52.143221 call        16     def __init__(self, weakcontainer):
                                            15:57:52.144219 line        18         self.weakcontainer = ref(weakcontainer)
                                            15:57:52.144219 return      18         self.weakcontainer = ref(weakcontainer)
                                            Return value:.. None
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.144219 call        20     def __enter__(self):
                                            15:57:52.145216 line        21         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3CD4FD0>
                                            15:57:52.145216 line        22         if w is not None:
                                            15:57:52.146214 line        23             w._iterating.add(self)
                                            15:57:52.146214 line        24         return self
                                            15:57:52.146214 return      24         return self
                                            Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.146214 line        60             for itemref in self.data:
                                            Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            Starting var:.. e = None
                                            Starting var:.. t = None
                                            Starting var:.. b = None
                                            15:57:52.147211 call        26     def __exit__(self, e, t, b):
                                            15:57:52.148208 line        27         w = self.weakcontainer()
                                            New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D3CD4FD0>
                                            15:57:52.148208 line        28         if w is not None:
                                            15:57:52.149206 line        29             s = w._iterating
                                            New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                            15:57:52.149206 line        30             s.remove(self)
                                            Modified var:.. s = set()
                                            15:57:52.149206 line        31             if not s:
                                            15:57:52.150203 line        32                 w._commit_removals()
                                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3CD4FD0>
                                                15:57:52.150203 call        52     def _commit_removals(self):
                                                15:57:52.150203 line        53         l = self._pending_removals
                                                New var:....... l = []
                                                15:57:52.151200 line        54         discard = self.data.discard
                                                New var:....... discard = <built-in method discard of set object at 0x000001F3D3CD6208>
                                                15:57:52.151200 line        55         while l:
                                                15:57:52.151200 return      55         while l:
                                                Return value:.. None
                                            15:57:52.152197 return      32                 w._commit_removals()
                                            Return value:.. None
                                        15:57:52.152197 return      60             for itemref in self.data:
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.153195 exception  222         for rcls in cls._abc_registry:
                                    StopIteration
                                    15:57:52.153195 line       227         for scls in cls.__subclasses__():
                                    15:57:52.154192 line       232         cls._abc_negative_cache.add(subclass)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                        Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93C50>
                                        Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.154192 call        81     def add(self, item):
                                        15:57:52.155189 line        82         if self._pending_removals:
                                        15:57:52.155189 line        84         self.data.add(ref(item, self._remove))
                                        15:57:52.155189 return      84         self.data.add(ref(item, self._remove))
                                        Return value:.. None
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                    15:57:52.156187 line       233         return False
                                    15:57:52.156187 return     233         return False
                                    Return value:.. False
                                15:57:52.157184 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = typing.Mapping
                                15:57:52.157184 line       228             if issubclass(subclass, scls):
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                    Starting var:.. self = typing.Mapping
                                    Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                    Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                    15:57:52.157184 call      1145     def __subclasscheck__(self, cls):
                                    15:57:52.158181 line      1146         if self.__origin__ is not None:
                                    15:57:52.159179 line      1151         if self is Generic:
                                    15:57:52.159179 line      1154         return super().__subclasscheck__(cls)
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        Starting var:.. cls = typing.Mapping
                                        Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                        15:57:52.159179 call       196     def __subclasscheck__(cls, subclass):
                                        15:57:52.160176 line       199         if subclass in cls._abc_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E80>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.160176 call        70     def __contains__(self, item):
                                            15:57:52.161173 line        71         try:
                                            15:57:52.161173 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:52.162171 line        75         return wr in self.data
                                            15:57:52.162171 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.162171 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.Mapping
                                            15:57:52.163168 call      1034     def _abc_negative_cache_version(self):
                                            15:57:52.163168 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                            15:57:52.164166 line      1036             return self.__extra__._abc_negative_cache_version
                                            15:57:52.164166 return    1036             return self.__extra__._abc_negative_cache_version
                                            Return value:.. 57
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.165163 line       206         elif subclass in cls._abc_negative_cache:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.Mapping
                                            15:57:52.165163 call      1020     def _abc_negative_cache(self):
                                            15:57:52.166160 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                            15:57:52.166160 line      1022             return self.__extra__._abc_negative_cache
                                            15:57:52.166160 return    1022             return self.__extra__._abc_negative_cache
                                            Return value:.. <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.167157 call        70     def __contains__(self, item):
                                            15:57:52.168155 line        71         try:
                                            15:57:52.168155 line        72             wr = ref(item)
                                            New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                            15:57:52.168155 line        75         return wr in self.data
                                            15:57:52.168155 return      75         return wr in self.data
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.169152 line       209         ok = cls.__subclasshook__(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                            Starting var:.. cls = typing.Mapping
                                            15:57:52.169152 call       875         def __extrahook__(subclass):
                                            15:57:52.170149 line       876             res = cls.__extra__.__subclasshook__(subclass)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                                                Starting var:.. cls = <class 'collections.abc.Mapping'>
                                                Starting var:.. C = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.170149 call       393     def __subclasshook__(cls, C):
                                                15:57:52.171147 line       394         if cls is Collection:
                                                15:57:52.172144 line       396         return NotImplemented
                                                15:57:52.172144 return     396         return NotImplemented
                                                Return value:.. NotImplemented
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            New var:....... res = NotImplemented
                                            15:57:52.172144 line       877             if res is not NotImplemented:
                                            15:57:52.173141 line       879             if cls.__extra__ in subclass.__mro__:
                                            15:57:52.173141 line       881             for scls in cls.__extra__.__subclasses__():
                                            New var:....... scls = <class 'collections.abc.MutableMapping'>
                                            15:57:52.173141 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.174139 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'collections.abc.MutableMapping'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.174139 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.175136 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B93546A0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.175136 call        70     def __contains__(self, item):
                                                    15:57:52.176133 line        71         try:
                                                    15:57:52.176133 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.177130 line        75         return wr in self.data
                                                    15:57:52.177130 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.177130 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.178128 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.178128 call        70     def __contains__(self, item):
                                                    15:57:52.179125 line        71         try:
                                                    15:57:52.179125 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.179125 line        75         return wr in self.data
                                                    15:57:52.180123 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.180123 line       207             return False
                                                15:57:52.181120 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.181120 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'selectors._SelectorMapping'>
                                            15:57:52.182118 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.182118 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'selectors._SelectorMapping'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.182118 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.183115 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE8D0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.184112 call        70     def __contains__(self, item):
                                                    15:57:52.184112 line        71         try:
                                                    15:57:52.185109 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.185109 line        75         return wr in self.data
                                                    15:57:52.185109 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.186107 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.186107 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C85F8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.186107 call        70     def __contains__(self, item):
                                                    15:57:52.187104 line        71         try:
                                                    15:57:52.188102 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.188102 line        75         return wr in self.data
                                                    15:57:52.188102 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.189099 line       207             return False
                                                15:57:52.189099 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.190096 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'numpy.lib.npyio.NpzFile'>
                                            15:57:52.190096 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.191093 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'numpy.lib.npyio.NpzFile'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.191093 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.192091 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D03E1320>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.192091 call        70     def __contains__(self, item):
                                                    15:57:52.193088 line        71         try:
                                                    15:57:52.193088 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.193088 line        75         return wr in self.data
                                                    15:57:52.194085 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.194085 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.195083 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D1F1BB38>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.195083 call        70     def __contains__(self, item):
                                                    15:57:52.196080 line        71         try:
                                                    15:57:52.196080 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.196080 line        75         return wr in self.data
                                                    15:57:52.197077 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.197077 line       207             return False
                                                15:57:52.198075 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.198075 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'tensorflow.python.training.tracking.data_structures.Mapping'>
                                            15:57:52.199072 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.199072 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'tensorflow.python.training.tracking.data_structures.Mapping'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.199072 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.200069 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C240>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.200069 call        70     def __contains__(self, item):
                                                    15:57:52.201067 line        71         try:
                                                    15:57:52.201067 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.202064 line        75         return wr in self.data
                                                    15:57:52.202064 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.203061 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.203061 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B96EE9E8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.203061 call        70     def __contains__(self, item):
                                                    15:57:52.204059 line        71         try:
                                                    15:57:52.204059 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.205056 line        75         return wr in self.data
                                                    15:57:52.205056 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.206053 line       207             return False
                                                15:57:52.206053 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.206053 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'h5py.h5t._DeprecatedMapping'>
                                            15:57:52.207051 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.207051 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'h5py.h5t._DeprecatedMapping'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.208048 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.208048 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B828>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.209045 call        70     def __contains__(self, item):
                                                    15:57:52.210043 line        71         try:
                                                    15:57:52.210043 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.210043 line        75         return wr in self.data
                                                    15:57:52.210043 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.211040 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.211040 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2F0C2B0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.212037 call        70     def __contains__(self, item):
                                                    15:57:52.212037 line        71         try:
                                                    15:57:52.213035 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.213035 line        75         return wr in self.data
                                                    15:57:52.213035 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.214032 line       207             return False
                                                15:57:52.214032 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.215029 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'h5py._hl.base.MappingHDF5'>
                                            15:57:52.215029 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.216027 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'h5py._hl.base.MappingHDF5'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.216027 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.217024 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFA58>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.217024 call        70     def __contains__(self, item):
                                                    15:57:52.218021 line        71         try:
                                                    15:57:52.218021 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.218021 line        75         return wr in self.data
                                                    15:57:52.219019 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.219019 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.220016 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D390B860>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.220016 call        70     def __contains__(self, item):
                                                    15:57:52.221013 line        71         try:
                                                    15:57:52.221013 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.221013 line        75         return wr in self.data
                                                    15:57:52.222011 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.222011 line       207             return False
                                                15:57:52.223008 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.223008 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'tensorflow.python.saved_model.signature_serialization._SignatureMap'>
                                            15:57:52.224005 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.224005 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'tensorflow.python.saved_model.signature_serialization._SignatureMap'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.224005 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.225003 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93C18>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.225003 call        70     def __contains__(self, item):
                                                    15:57:52.226000 line        71         try:
                                                    15:57:52.226000 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.226997 line        75         return wr in self.data
                                                    15:57:52.226997 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.226997 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.227995 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EFAC8>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.227995 call        70     def __contains__(self, item):
                                                    15:57:52.228992 line        71         try:
                                                    15:57:52.228992 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.228992 line        75         return wr in self.data
                                                    15:57:52.229990 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.229990 line       207             return False
                                                15:57:52.230987 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.230987 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = <class 'tensorflow.python.saved_model.model_utils.mode_keys.ModeKeyMap'>
                                            15:57:52.231984 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.231984 line       884                 if issubclass(subclass, scls):
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = <class 'tensorflow.python.saved_model.model_utils.mode_keys.ModeKeyMap'>
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.232981 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.232981 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3CE4048>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.233979 call        70     def __contains__(self, item):
                                                    15:57:52.233979 line        71         try:
                                                    15:57:52.234976 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.234976 line        75         return wr in self.data
                                                    15:57:52.234976 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.235973 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                15:57:52.235973 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D3C93C50>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.236971 call        70     def __contains__(self, item):
                                                    15:57:52.236971 line        71         try:
                                                    15:57:52.237968 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.237968 line        75         return wr in self.data
                                                    15:57:52.237968 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.238965 line       207             return False
                                                15:57:52.238965 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.239963 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = typing.Mapping
                                            15:57:52.239963 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.240960 line       883                     continue
                                            15:57:52.240960 line       881             for scls in cls.__extra__.__subclasses__():
                                            Modified var:.. scls = typing.Mapping[~KT, ~VT]
                                            15:57:52.240960 line       882                 if isinstance(scls, GenericMeta):
                                            15:57:52.240960 line       883                     continue
                                            15:57:52.241958 line       881             for scls in cls.__extra__.__subclasses__():
                                            15:57:52.241958 line       886             return NotImplemented
                                            15:57:52.241958 return     886             return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... ok = NotImplemented
                                        15:57:52.242955 line       210         if ok is not NotImplemented:
                                        15:57:52.242955 line       218         if cls in getattr(subclass, '__mro__', ()):
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.Mapping
                                            Starting var:.. other = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.243952 call      1089     def __eq__(self, other):
                                            15:57:52.244949 line      1090         if not isinstance(other, GenericMeta):
                                            15:57:52.244949 line      1091             return NotImplemented
                                            15:57:52.244949 return    1091             return NotImplemented
                                            Return value:.. NotImplemented
                                            Starting var:.. self = typing.Mapping
                                            Starting var:.. other = <class 'tensorflow.python.framework.tensor_like._TensorLike'>
                                            15:57:52.245947 call      1089     def __eq__(self, other):
                                            15:57:52.245947 line      1090         if not isinstance(other, GenericMeta):
                                            15:57:52.245947 line      1091             return NotImplemented
                                            15:57:52.246944 return    1091             return NotImplemented
                                            Return value:.. NotImplemented
                                            Starting var:.. self = typing.Mapping
                                            Starting var:.. other = <class 'object'>
                                            15:57:52.246944 call      1089     def __eq__(self, other):
                                            15:57:52.247941 line      1090         if not isinstance(other, GenericMeta):
                                            15:57:52.247941 line      1091             return NotImplemented
                                            15:57:52.247941 return    1091             return NotImplemented
                                            Return value:.. NotImplemented
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.248939 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                            15:57:52.248939 call        58     def __iter__(self):
                                            15:57:52.249936 line        59         with _IterationGuard(self):
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                                15:57:52.249936 call        16     def __init__(self, weakcontainer):
                                                15:57:52.250933 line        18         self.weakcontainer = ref(weakcontainer)
                                                15:57:52.250933 return      18         self.weakcontainer = ref(weakcontainer)
                                                Return value:.. None
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                15:57:52.251931 call        20     def __enter__(self):
                                                15:57:52.251931 line        21         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                                15:57:52.251931 line        22         if w is not None:
                                                15:57:52.252928 line        23             w._iterating.add(self)
                                                15:57:52.252928 line        24         return self
                                                15:57:52.252928 return      24         return self
                                                Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                            15:57:52.253925 line        60             for itemref in self.data:
                                            New var:....... itemref = <weakref at 0x000001F3B9351318; to 'type' at 0x0000000075AF09B0 (mappingproxy)>
                                            15:57:52.253925 line        61                 item = itemref()
                                            New var:....... item = <class 'mappingproxy'>
                                            15:57:52.253925 line        62                 if item is not None:
                                            15:57:52.254923 line        65                     yield item
                                            15:57:52.254923 return      65                     yield item
                                            Return value:.. <class 'mappingproxy'>
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        New var:....... rcls = <class 'mappingproxy'>
                                        15:57:52.255920 line       223             if issubclass(subclass, rcls):
                                        15:57:52.255920 line       222         for rcls in cls._abc_registry:
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                            Starting var:.. itemref = <weakref at 0x000001F3B9351318; to 'type' at 0x0000000075AF09B0 (mappingproxy)>
                                            Starting var:.. item = <class 'mappingproxy'>
                                            15:57:52.255920 call        65                     yield item
                                            15:57:52.257915 line        60             for itemref in self.data:
                                                Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                                Starting var:.. e = None
                                                Starting var:.. t = None
                                                Starting var:.. b = None
                                                15:57:52.257915 call        26     def __exit__(self, e, t, b):
                                                15:57:52.258912 line        27         w = self.weakcontainer()
                                                New var:....... w = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                                15:57:52.258912 line        28         if w is not None:
                                                15:57:52.259909 line        29             s = w._iterating
                                                New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                                15:57:52.259909 line        30             s.remove(self)
                                                Modified var:.. s = set()
                                                15:57:52.259909 line        31             if not s:
                                                15:57:52.260907 line        32                 w._commit_removals()
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B9349E48>
                                                    15:57:52.260907 call        52     def _commit_removals(self):
                                                    15:57:52.260907 line        53         l = self._pending_removals
                                                    New var:....... l = []
                                                    15:57:52.261904 line        54         discard = self.data.discard
                                                    New var:....... discard = <built-in method discard of set object at 0x000001F3B934F9E8>
                                                    15:57:52.261904 line        55         while l:
                                                    15:57:52.261904 return      55         while l:
                                                    Return value:.. None
                                                15:57:52.262902 return      32                 w._commit_removals()
                                                Return value:.. None
                                            15:57:52.262902 return      60             for itemref in self.data:
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.263899 exception  222         for rcls in cls._abc_registry:
                                        StopIteration
                                        15:57:52.264896 line       227         for scls in cls.__subclasses__():
                                        New var:....... scls = typing.Mapping[~KT, ~VT]
                                        15:57:52.264896 line       228             if issubclass(subclass, scls):
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.Mapping[~KT, ~VT]
                                            Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                            Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                            15:57:52.264896 call      1145     def __subclasscheck__(self, cls):
                                            15:57:52.265893 line      1146         if self.__origin__ is not None:
                                            15:57:52.266891 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                            15:57:52.266891 line      1150             return False
                                            15:57:52.266891 return    1150             return False
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.267888 line       227         for scls in cls.__subclasses__():
                                        Modified var:.. scls = typing.MutableMapping
                                        15:57:52.267888 line       228             if issubclass(subclass, scls):
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.MutableMapping
                                            Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                            Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                            15:57:52.268886 call      1145     def __subclasscheck__(self, cls):
                                            15:57:52.269883 line      1146         if self.__origin__ is not None:
                                            15:57:52.269883 line      1151         if self is Generic:
                                            15:57:52.269883 line      1154         return super().__subclasscheck__(cls)
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                Starting var:.. cls = typing.MutableMapping
                                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                                15:57:52.269883 call       196     def __subclasscheck__(cls, subclass):
                                                15:57:52.270880 line       199         if subclass in cls._abc_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3B93546A0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.270880 call        70     def __contains__(self, item):
                                                    15:57:52.271877 line        71         try:
                                                    15:57:52.271877 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.272875 line        75         return wr in self.data
                                                    15:57:52.272875 return      75         return wr in self.data
                                                    Return value:.. False
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.273872 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.MutableMapping
                                                    15:57:52.273872 call      1034     def _abc_negative_cache_version(self):
                                                    15:57:52.274869 line      1035         if isinstance(self.__extra__, abc.ABCMeta):
                                                    15:57:52.274869 line      1036             return self.__extra__._abc_negative_cache_version
                                                    15:57:52.274869 return    1036             return self.__extra__._abc_negative_cache_version
                                                    Return value:.. 57
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.275867 line       206         elif subclass in cls._abc_negative_cache:
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                                    Starting var:.. self = typing.MutableMapping
                                                    15:57:52.275867 call      1020     def _abc_negative_cache(self):
                                                    15:57:52.276864 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                                    15:57:52.276864 line      1022             return self.__extra__._abc_negative_cache
                                                    15:57:52.276864 return    1022             return self.__extra__._abc_negative_cache
                                                    Return value:.. <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D39EF5C0>
                                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                                    15:57:52.277861 call        70     def __contains__(self, item):
                                                    15:57:52.278859 line        71         try:
                                                    15:57:52.278859 line        72             wr = ref(item)
                                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                                    15:57:52.278859 line        75         return wr in self.data
                                                    15:57:52.278859 return      75         return wr in self.data
                                                    Return value:.. True
                                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                                15:57:52.279856 line       207             return False
                                                15:57:52.279856 return     207             return False
                                                Return value:.. False
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            15:57:52.280853 return    1154         return super().__subclasscheck__(cls)
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.281851 line       227         for scls in cls.__subclasses__():
                                        Modified var:.. scls = typing.MutableMapping[~KT, ~VT]
                                        15:57:52.281851 line       228             if issubclass(subclass, scls):
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.MutableMapping[~KT, ~VT]
                                            Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                            Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                            15:57:52.282848 call      1145     def __subclasscheck__(self, cls):
                                            15:57:52.283845 line      1146         if self.__origin__ is not None:
                                            15:57:52.283845 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                            15:57:52.283845 line      1150             return False
                                            15:57:52.283845 return    1150             return False
                                            Return value:.. False
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.284843 line       227         for scls in cls.__subclasses__():
                                        15:57:52.284843 line       232         cls._abc_negative_cache.add(subclass)
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                            Starting var:.. self = typing.Mapping
                                            15:57:52.285840 call      1020     def _abc_negative_cache(self):
                                            15:57:52.285840 line      1021         if isinstance(self.__extra__, abc.ABCMeta):
                                            15:57:52.285840 line      1022             return self.__extra__._abc_negative_cache
                                            15:57:52.286837 return    1022             return self.__extra__._abc_negative_cache
                                            Return value:.. <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                            Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                            15:57:52.286837 call        81     def add(self, item):
                                            15:57:52.287835 line        82         if self._pending_removals:
                                            15:57:52.287835 line        84         self.data.add(ref(item, self._remove))
                                            15:57:52.287835 return      84         self.data.add(ref(item, self._remove))
                                            Return value:.. None
                                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                        15:57:52.288832 line       233         return False
                                        15:57:52.288832 return     233         return False
                                        Return value:.. False
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                    15:57:52.289829 return    1154         return super().__subclasscheck__(cls)
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.289829 line       227         for scls in cls.__subclasses__():
                                Modified var:.. scls = typing.Mapping[~KT, ~VT]
                                15:57:52.290827 line       228             if issubclass(subclass, scls):
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\typing.py
                                    Starting var:.. self = typing.Mapping[~KT, ~VT]
                                    Starting var:.. cls = <class 'tensorflow.python.framework.ops.Tensor'>
                                    Starting var:.. __class__ = <class 'typing.GenericMeta'>
                                    15:57:52.290827 call      1145     def __subclasscheck__(self, cls):
                                    15:57:52.291824 line      1146         if self.__origin__ is not None:
                                    15:57:52.292821 line      1147             if sys._getframe(1).f_globals['__name__'] not in ['abc', 'functools']:
                                    15:57:52.292821 line      1150             return False
                                    15:57:52.292821 return    1150             return False
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.293819 line       227         for scls in cls.__subclasses__():
                                15:57:52.293819 line       232         cls._abc_negative_cache.add(subclass)
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D57C82B0>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.293819 call        81     def add(self, item):
                                    15:57:52.294816 line        82         if self._pending_removals:
                                    15:57:52.294816 line        84         self.data.add(ref(item, self._remove))
                                    15:57:52.295813 return      84         self.data.add(ref(item, self._remove))
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.295813 line       233         return False
                                15:57:52.296811 return     233         return False
                                Return value:.. False
                            15:57:52.296811 return     193             return cls.__subclasscheck__(subclass)
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:52.297808 line       269     elif _is_attrs_instance(fetch):
                            Starting var:.. obj = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.297808 call       199 def _is_attrs_instance(obj):
                            15:57:52.297808 line       201   return getattr(obj.__class__, '__attrs_attrs__', None) is not None
                            15:57:52.298805 return     201   return getattr(obj.__class__, '__attrs_attrs__', None) is not None
                            Return value:.. False
                        15:57:52.298805 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        New var:....... tensor_type = <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>
                        New var:....... fetch_fn = <function _ragged_tensor_session_fetch at 0x000001F3D2C37AE8>
                        New var:....... _ = <function _ragged_tensor_session_feed_for_partial_run at 0x000001F3D2C37BF8>
                        15:57:52.298805 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>
                            Starting var:.. instance = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.299803 call       180     def __instancecheck__(cls, instance):
                            15:57:52.300800 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.300800 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306A0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.301797 call        70     def __contains__(self, item):
                                15:57:52.302795 line        71         try:
                                15:57:52.302795 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.302795 line        75         return wr in self.data
                                15:57:52.303792 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.303792 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.304789 line       187         if subtype is subclass:
                            15:57:52.304789 line       188             if (cls._abc_negative_cache_version ==
                            15:57:52.304789 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:52.304789 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D876F6D8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.305787 call        70     def __contains__(self, item):
                                15:57:52.306784 line        71         try:
                                15:57:52.306784 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.306784 line        75         return wr in self.data
                                15:57:52.307781 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.307781 line       193             return cls.__subclasscheck__(subclass)
                                Starting var:.. cls = <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>
                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.307781 call       196     def __subclasscheck__(cls, subclass):
                                15:57:52.308779 line       199         if subclass in cls._abc_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306A0>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.308779 call        70     def __contains__(self, item):
                                    15:57:52.309776 line        71         try:
                                    15:57:52.309776 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.310773 line        75         return wr in self.data
                                    15:57:52.310773 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.311770 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                15:57:52.311770 line       206         elif subclass in cls._abc_negative_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D876F6D8>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.311770 call        70     def __contains__(self, item):
                                    15:57:52.312768 line        71         try:
                                    15:57:52.312768 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.313765 line        75         return wr in self.data
                                    15:57:52.313765 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.314763 line       209         ok = cls.__subclasshook__(subclass)
                                New var:....... ok = NotImplemented
                                15:57:52.314763 line       210         if ok is not NotImplemented:
                                15:57:52.314763 line       218         if cls in getattr(subclass, '__mro__', ()):
                                15:57:52.315760 line       222         for rcls in cls._abc_registry:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C30668>
                                    15:57:52.315760 call        58     def __iter__(self):
                                    15:57:52.316757 line        59         with _IterationGuard(self):
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D2C30668>
                                        15:57:52.316757 call        16     def __init__(self, weakcontainer):
                                        15:57:52.316757 line        18         self.weakcontainer = ref(weakcontainer)
                                        15:57:52.317755 return      18         self.weakcontainer = ref(weakcontainer)
                                        Return value:.. None
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        15:57:52.317755 call        20     def __enter__(self):
                                        15:57:52.318752 line        21         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2C30668>
                                        15:57:52.318752 line        22         if w is not None:
                                        15:57:52.318752 line        23             w._iterating.add(self)
                                        15:57:52.319749 line        24         return self
                                        15:57:52.319749 return      24         return self
                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                    15:57:52.319749 line        60             for itemref in self.data:
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        Starting var:.. e = None
                                        Starting var:.. t = None
                                        Starting var:.. b = None
                                        15:57:52.319749 call        26     def __exit__(self, e, t, b):
                                        15:57:52.321744 line        27         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2C30668>
                                        15:57:52.321744 line        28         if w is not None:
                                        15:57:52.321744 line        29             s = w._iterating
                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E978>}
                                        15:57:52.321744 line        30             s.remove(self)
                                        Modified var:.. s = set()
                                        15:57:52.322741 line        31             if not s:
                                        15:57:52.322741 line        32                 w._commit_removals()
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C30668>
                                            15:57:52.323739 call        52     def _commit_removals(self):
                                            15:57:52.323739 line        53         l = self._pending_removals
                                            New var:....... l = []
                                            15:57:52.323739 line        54         discard = self.data.discard
                                            New var:....... discard = <built-in method discard of set object at 0x000001F3D2C33048>
                                            15:57:52.324736 line        55         while l:
                                            15:57:52.324736 return      55         while l:
                                            Return value:.. None
                                        15:57:52.325733 return      32                 w._commit_removals()
                                        Return value:.. None
                                    15:57:52.325733 return      60             for itemref in self.data:
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.325733 exception  222         for rcls in cls._abc_registry:
                                StopIteration
                                15:57:52.326731 line       227         for scls in cls.__subclasses__():
                                15:57:52.326731 line       232         cls._abc_negative_cache.add(subclass)
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D876F6D8>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.327728 call        81     def add(self, item):
                                    15:57:52.328725 line        82         if self._pending_removals:
                                    15:57:52.328725 line        84         self.data.add(ref(item, self._remove))
                                    15:57:52.328725 return      84         self.data.add(ref(item, self._remove))
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.328725 line       233         return False
                                15:57:52.329723 return     233         return False
                                Return value:.. False
                            15:57:52.329723 return     193             return cls.__subclasscheck__(subclass)
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:52.330720 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C0D0>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C1E0>
                        15:57:52.330720 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'>
                            Starting var:.. instance = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.331717 call       180     def __instancecheck__(cls, instance):
                            15:57:52.332715 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.332715 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E1D0>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.333712 call        70     def __contains__(self, item):
                                15:57:52.334709 line        71         try:
                                15:57:52.334709 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.334709 line        75         return wr in self.data
                                15:57:52.334709 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.335707 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.335707 line       187         if subtype is subclass:
                            15:57:52.336704 line       188             if (cls._abc_negative_cache_version ==
                            15:57:52.336704 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:52.336704 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306D8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.337701 call        70     def __contains__(self, item):
                                15:57:52.338699 line        71         try:
                                15:57:52.338699 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.338699 line        75         return wr in self.data
                                15:57:52.338699 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.339696 line       193             return cls.__subclasscheck__(subclass)
                                Starting var:.. cls = <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'>
                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.339696 call       196     def __subclasscheck__(cls, subclass):
                                15:57:52.340693 line       199         if subclass in cls._abc_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E1D0>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.340693 call        70     def __contains__(self, item):
                                    15:57:52.341691 line        71         try:
                                    15:57:52.341691 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.342688 line        75         return wr in self.data
                                    15:57:52.342688 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.342688 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                15:57:52.343685 line       206         elif subclass in cls._abc_negative_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306D8>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.343685 call        70     def __contains__(self, item):
                                    15:57:52.344683 line        71         try:
                                    15:57:52.344683 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.344683 line        75         return wr in self.data
                                    15:57:52.345680 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.345680 line       209         ok = cls.__subclasshook__(subclass)
                                New var:....... ok = NotImplemented
                                15:57:52.346677 line       210         if ok is not NotImplemented:
                                15:57:52.346677 line       218         if cls in getattr(subclass, '__mro__', ()):
                                15:57:52.347674 line       222         for rcls in cls._abc_registry:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D219DE10>
                                    15:57:52.347674 call        58     def __iter__(self):
                                    15:57:52.347674 line        59         with _IterationGuard(self):
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D219DE10>
                                        15:57:52.348672 call        16     def __init__(self, weakcontainer):
                                        15:57:52.348672 line        18         self.weakcontainer = ref(weakcontainer)
                                        15:57:52.349669 return      18         self.weakcontainer = ref(weakcontainer)
                                        Return value:.. None
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        15:57:52.349669 call        20     def __enter__(self):
                                        15:57:52.349669 line        21         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D219DE10>
                                        15:57:52.350667 line        22         if w is not None:
                                        15:57:52.350667 line        23             w._iterating.add(self)
                                        15:57:52.350667 line        24         return self
                                        15:57:52.351664 return      24         return self
                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                    15:57:52.351664 line        60             for itemref in self.data:
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E710>
                                        Starting var:.. e = None
                                        Starting var:.. t = None
                                        Starting var:.. b = None
                                        15:57:52.351664 call        26     def __exit__(self, e, t, b):
                                        15:57:52.352661 line        27         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D219DE10>
                                        15:57:52.353659 line        28         if w is not None:
                                        15:57:52.353659 line        29             s = w._iterating
                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E710>}
                                        15:57:52.353659 line        30             s.remove(self)
                                        Modified var:.. s = set()
                                        15:57:52.354656 line        31             if not s:
                                        15:57:52.354656 line        32                 w._commit_removals()
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D219DE10>
                                            15:57:52.354656 call        52     def _commit_removals(self):
                                            15:57:52.355653 line        53         l = self._pending_removals
                                            New var:....... l = []
                                            15:57:52.355653 line        54         discard = self.data.discard
                                            New var:....... discard = <built-in method discard of set object at 0x000001F3D2350208>
                                            15:57:52.356651 line        55         while l:
                                            15:57:52.356651 return      55         while l:
                                            Return value:.. None
                                        15:57:52.356651 return      32                 w._commit_removals()
                                        Return value:.. None
                                    15:57:52.357648 return      60             for itemref in self.data:
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.357648 exception  222         for rcls in cls._abc_registry:
                                StopIteration
                                15:57:52.358645 line       227         for scls in cls.__subclasses__():
                                15:57:52.358645 line       232         cls._abc_negative_cache.add(subclass)
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2C306D8>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.359642 call        81     def add(self, item):
                                    15:57:52.359642 line        82         if self._pending_removals:
                                    15:57:52.360640 line        84         self.data.add(ref(item, self._remove))
                                    15:57:52.360640 return      84         self.data.add(ref(item, self._remove))
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.360640 line       233         return False
                                15:57:52.361637 return     233         return False
                                Return value:.. False
                            15:57:52.361637 return     193             return cls.__subclasscheck__(subclass)
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:52.362635 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'tensorflow.python.framework.indexed_slices.IndexedSlices'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C268>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C2F0>
                        15:57:52.362635 line       274         if isinstance(fetch, tensor_type):
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            Starting var:.. cls = <class 'tensorflow.python.framework.indexed_slices.IndexedSlices'>
                            Starting var:.. instance = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.363632 call       180     def __instancecheck__(cls, instance):
                            15:57:52.364629 line       183         subclass = instance.__class__
                            New var:....... subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.364629 line       184         if subclass in cls._abc_cache:
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D20344A8>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.365627 call        70     def __contains__(self, item):
                                15:57:52.365627 line        71         try:
                                15:57:52.366624 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.366624 line        75         return wr in self.data
                                15:57:52.366624 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.367621 line       186         subtype = type(instance)
                            New var:....... subtype = <class 'tensorflow.python.framework.ops.Tensor'>
                            15:57:52.367621 line       187         if subtype is subclass:
                            15:57:52.368618 line       188             if (cls._abc_negative_cache_version ==
                            15:57:52.368618 line       189                 ABCMeta._abc_invalidation_counter and
                            15:57:52.368618 line       190                 subclass in cls._abc_negative_cache):
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E908>
                                Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.369616 call        70     def __contains__(self, item):
                                15:57:52.369616 line        71         try:
                                15:57:52.370613 line        72             wr = ref(item)
                                New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                15:57:52.370613 line        75         return wr in self.data
                                15:57:52.370613 return      75         return wr in self.data
                                Return value:.. False
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                            15:57:52.371611 line       193             return cls.__subclasscheck__(subclass)
                                Starting var:.. cls = <class 'tensorflow.python.framework.indexed_slices.IndexedSlices'>
                                Starting var:.. subclass = <class 'tensorflow.python.framework.ops.Tensor'>
                                15:57:52.371611 call       196     def __subclasscheck__(cls, subclass):
                                15:57:52.372608 line       199         if subclass in cls._abc_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D20344A8>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.372608 call        70     def __contains__(self, item):
                                    15:57:52.373606 line        71         try:
                                    15:57:52.373606 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.373606 line        75         return wr in self.data
                                    15:57:52.374603 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.374603 line       202         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
                                15:57:52.375600 line       206         elif subclass in cls._abc_negative_cache:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E908>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.375600 call        70     def __contains__(self, item):
                                    15:57:52.376597 line        71         try:
                                    15:57:52.376597 line        72             wr = ref(item)
                                    New var:....... wr = <weakref at 0x000001F3D218B408; to 'type' at 0x000001F3D1235938 (Tensor)>
                                    15:57:52.376597 line        75         return wr in self.data
                                    15:57:52.377595 return      75         return wr in self.data
                                    Return value:.. False
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.377595 line       209         ok = cls.__subclasshook__(subclass)
                                New var:....... ok = NotImplemented
                                15:57:52.378592 line       210         if ok is not NotImplemented:
                                15:57:52.378592 line       218         if cls in getattr(subclass, '__mro__', ()):
                                15:57:52.378592 line       222         for rcls in cls._abc_registry:
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2034470>
                                    15:57:52.379589 call        58     def __iter__(self):
                                    15:57:52.379589 line        59         with _IterationGuard(self):
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        Starting var:.. weakcontainer = <_weakrefset.WeakSet object at 0x000001F3D2034470>
                                        15:57:52.379589 call        16     def __init__(self, weakcontainer):
                                        15:57:52.380587 line        18         self.weakcontainer = ref(weakcontainer)
                                        15:57:52.380587 return      18         self.weakcontainer = ref(weakcontainer)
                                        Return value:.. None
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        15:57:52.381584 call        20     def __enter__(self):
                                        15:57:52.381584 line        21         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2034470>
                                        15:57:52.382581 line        22         if w is not None:
                                        15:57:52.382581 line        23             w._iterating.add(self)
                                        15:57:52.382581 line        24         return self
                                        15:57:52.383578 return      24         return self
                                        Return value:.. <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                    15:57:52.383578 line        60             for itemref in self.data:
                                        Starting var:.. self = <_weakrefset._IterationGuard object at 0x000001F3DBB9E978>
                                        Starting var:.. e = None
                                        Starting var:.. t = None
                                        Starting var:.. b = None
                                        15:57:52.383578 call        26     def __exit__(self, e, t, b):
                                        15:57:52.384576 line        27         w = self.weakcontainer()
                                        New var:....... w = <_weakrefset.WeakSet object at 0x000001F3D2034470>
                                        15:57:52.385573 line        28         if w is not None:
                                        15:57:52.385573 line        29             s = w._iterating
                                        New var:....... s = {<_weakrefset._IterationGuard object at 0x000001F3DBB9E978>}
                                        15:57:52.385573 line        30             s.remove(self)
                                        Modified var:.. s = set()
                                        15:57:52.386571 line        31             if not s:
                                        15:57:52.386571 line        32                 w._commit_removals()
                                            Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D2034470>
                                            15:57:52.386571 call        52     def _commit_removals(self):
                                            15:57:52.387568 line        53         l = self._pending_removals
                                            New var:....... l = []
                                            15:57:52.387568 line        54         discard = self.data.discard
                                            New var:....... discard = <built-in method discard of set object at 0x000001F3D205D668>
                                            15:57:52.387568 line        55         while l:
                                            15:57:52.388565 return      55         while l:
                                            Return value:.. None
                                        15:57:52.388565 return      32                 w._commit_removals()
                                        Return value:.. None
                                    15:57:52.389563 return      60             for itemref in self.data:
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.389563 exception  222         for rcls in cls._abc_registry:
                                StopIteration
                                15:57:52.390560 line       227         for scls in cls.__subclasses__():
                                15:57:52.390560 line       232         cls._abc_negative_cache.add(subclass)
                                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_weakrefset.py
                                    Starting var:.. self = <_weakrefset.WeakSet object at 0x000001F3D235E908>
                                    Starting var:.. item = <class 'tensorflow.python.framework.ops.Tensor'>
                                    15:57:52.390560 call        81     def add(self, item):
                                    15:57:52.391557 line        82         if self._pending_removals:
                                    15:57:52.392554 line        84         self.data.add(ref(item, self._remove))
                                    15:57:52.392554 return      84         self.data.add(ref(item, self._remove))
                                    Return value:.. None
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\abc.py
                                15:57:52.392554 line       233         return False
                                15:57:52.393552 return     233         return False
                                Return value:.. False
                            15:57:52.393552 return     193             return cls.__subclasscheck__(subclass)
                            Return value:.. False
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                        15:57:52.394549 line       273       for tensor_type, fetch_fn, _, _ in _REGISTERED_EXPANSIONS:
                        Modified var:.. tensor_type = <class 'object'>
                        Modified var:.. fetch_fn = <function <lambda> at 0x000001F3D2A0C378>
                        Modified var:.. _ = <function <lambda> at 0x000001F3D2A0C488>
                        15:57:52.394549 line       274         if isinstance(fetch, tensor_type):
                        15:57:52.395547 line       275           fetches, contraction_fn = fetch_fn(fetch)
                            Starting var:.. fetch = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.395547 call       132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            15:57:52.396544 line       132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            15:57:52.396544 return     132     (object, lambda fetch: ([fetch], lambda fetched_vals: fetched_vals[0]),
                            Return value:.. ([<tf.Tensor 'worker/Identity_2:0' shape=() dtyp...lambda>.<locals>.<lambda> at 0x000001F3DBB8B840>)
                        New var:....... fetches = [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
                        New var:....... contraction_fn = <function <lambda>.<locals>.<lambda> at 0x000001F3DBB8B840>
                        15:57:52.396544 line       276           return _ElementFetchMapper(fetches, contraction_fn)
                            Starting var:.. self = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9EA90>
                            Starting var:.. fetches = [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
                            Starting var:.. contraction_fn = <function <lambda>.<locals>.<lambda> at 0x000001F3DBB8B840>
                            15:57:52.397541 call       285   def __init__(self, fetches, contraction_fn):
                            15:57:52.398539 line       301     self._unique_fetches = []
                            15:57:52.398539 line       302     for fetch in fetches:
                            New var:....... fetch = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.398539 line       303       try:
                            15:57:52.399536 line       304         self._unique_fetches.append(ops.get_default_graph().as_graph_element(
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                                15:57:52.399536 call      5862 def get_default_graph():
                                15:57:52.400533 line      5877   return _default_graph_stack.get_default()
                                    Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                                    Starting var:.. __class__ = <class 'tensorflow.python.framework.ops._DefaultGraphStack'>
                                    15:57:52.400533 call      5455   def get_default(self):
                                    15:57:52.400533 line      5457     ret = super(_DefaultGraphStack, self).get_default()
                                        Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                                        15:57:52.401531 call      5268   def get_default(self):
                                        15:57:52.401531 line      5269     return self.stack[-1] if len(self.stack) >= 1 else None
                                        15:57:52.401531 return    5269     return self.stack[-1] if len(self.stack) >= 1 else None
                                        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    New var:....... ret = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    15:57:52.402528 line      5458     if ret is None:
                                    15:57:52.402528 line      5460     return ret
                                    15:57:52.402528 return    5460     return ret
                                    Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                15:57:52.403525 return    5877   return _default_graph_stack.get_default()
                                Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                            15:57:52.403525 line       305             fetch, allow_tensor=True, allow_operation=True))
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                                Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                Starting var:.. obj = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                Starting var:.. allow_tensor = True
                                Starting var:.. allow_operation = True
                                15:57:52.404522 call      3576   def as_graph_element(self, obj, allow_tensor=True, allow_operation=True):
                                15:57:52.405520 line      3606     if self._finalized:
                                15:57:52.405520 line      3609     with self._lock:
                                15:57:52.406517 line      3610       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)
                                    Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    Starting var:.. obj = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                    Starting var:.. allow_tensor = True
                                    Starting var:.. allow_operation = True
                                    15:57:52.406517 call      3612   def _as_graph_element_locked(self, obj, allow_tensor, allow_operation):
                                    15:57:52.407515 line      3621     if allow_tensor and allow_operation:
                                    15:57:52.407515 line      3622       types_str = "Tensor or Operation"
                                    New var:....... types_str = 'Tensor or Operation'
                                    15:57:52.407515 line      3630     temp_obj = _as_graph_element(obj)
                                        Starting var:.. obj = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                        15:57:52.408512 call       183 def _as_graph_element(obj):
                                        15:57:52.408512 line       193   conv_fn = getattr(obj, "_as_graph_element", None)
                                        New var:....... conv_fn = None
                                        15:57:52.409509 line       194   if conv_fn and callable(conv_fn):
                                        15:57:52.409509 line       196   return None
                                        15:57:52.409509 return     196   return None
                                        Return value:.. None
                                    New var:....... temp_obj = None
                                    15:57:52.410506 line      3631     if temp_obj is not None:
                                    15:57:52.410506 line      3635     if isinstance(obj, compat.bytes_or_text_types):
                                    15:57:52.410506 line      3686     elif isinstance(obj, Tensor) and allow_tensor:
                                    15:57:52.411504 line      3688       if obj.graph is not self:
                                        Starting var:.. self = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                        15:57:52.411504 call       408   def graph(self):
                                        15:57:52.411504 line       410     return self._op.graph
                                            Starting var:.. self = <tf.Operation 'worker/Identity_2' type=Identity>
                                            15:57:52.412501 call      2262   def graph(self):
                                            15:57:52.412501 line      2264     return self._graph
                                            15:57:52.412501 return    2264     return self._graph
                                            Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                        15:57:52.413499 return     410     return self._op.graph
                                        Return value:.. <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                                    15:57:52.413499 line      3690       return obj
                                    15:57:52.414496 return    3690       return obj
                                    Return value:.. <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                15:57:52.414496 return    3610       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)
                                Return value:.. <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                            15:57:52.414496 line       302     for fetch in fetches:
                            15:57:52.415494 line       316     self._contraction_fn = contraction_fn
                            15:57:52.415494 return     316     self._contraction_fn = contraction_fn
                            Return value:.. None
                        15:57:52.416491 return     276           return _ElementFetchMapper(fetches, contraction_fn)
                        Return value:.. <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9EA90>
                    Modified var:.. fetch = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                    15:57:52.416491 line       375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                    15:57:52.417488 return     375     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]
                    Return value:.. [<tensorflow.python.client.session._ElementFetch...ElementFetchMapper object at 0x000001F3DBB9EA90>]
                15:57:52.417488 line       376     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)
                    Starting var:.. fetch_mappers = [<tensorflow.python.client.session._ElementFetch...ElementFetchMapper object at 0x000001F3DBB9EA90>]
                    15:57:52.417488 call       329 def _uniquify_fetches(fetch_mappers):
                    15:57:52.418485 line       349   unique_fetches = []
                    New var:....... unique_fetches = []
                    15:57:52.418485 line       350   value_indices = []
                    New var:....... value_indices = []
                    15:57:52.419482 line       351   seen_fetches = object_identity.ObjectIdentityDictionary()
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                        Starting var:.. self = REPR FAILED
                        15:57:52.419482 call       111   def __init__(self):
                        15:57:52.420480 line       112     self._storage = {}
                        Modified var:.. self = ObjectIdentityDictionary({})
                        15:57:52.420480 return     112     self._storage = {}
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    New var:....... seen_fetches = ObjectIdentityDictionary({})
                    15:57:52.421477 line       352   for m in fetch_mappers:
                    New var:....... m = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9E8D0>
                    15:57:52.421477 line       353     m_value_indices = []
                    New var:....... m_value_indices = []
                    15:57:52.422474 line       354     for f in m.unique_fetches():
                        Starting var:.. self = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9E8D0>
                        15:57:52.422474 call       318   def unique_fetches(self):
                        15:57:52.423472 line       319     return self._unique_fetches
                        15:57:52.423472 return     319     return self._unique_fetches
                        Return value:.. [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
                    New var:....... f = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                    15:57:52.423472 line       355       j = seen_fetches.get(f)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                        Starting var:.. self = ObjectIdentityDictionary({})
                        Starting var:.. key = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                        Starting var:.. default = None
                        15:57:52.424469 call       657     def get(self, key, default=None):
                        15:57:52.425466 line       659         try:
                        15:57:52.425466 line       660             return self[key]
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                            Starting var:.. self = ObjectIdentityDictionary({})
                            Starting var:.. key = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:52.425466 call       117   def __getitem__(self, key):
                            15:57:52.426464 line       118     return self._storage[self._wrap_key(key)]
                                Starting var:.. self = ObjectIdentityDictionary({})
                                Starting var:.. key = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                15:57:52.426464 call       114   def _wrap_key(self, key):
                                15:57:52.427461 line       115     return _ObjectIdentityWrapper(key)
                                    Starting var:.. self = REPR FAILED
                                    Starting var:.. wrapped = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                    15:57:52.427461 call        33   def __init__(self, wrapped):
                                    15:57:52.428458 line        34     self._wrapped = wrapped
                                    Modified var:.. self = <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                                    15:57:52.428458 return      34     self._wrapped = wrapped
                                    Return value:.. None
                                15:57:52.429456 return     115     return _ObjectIdentityWrapper(key)
                                Return value:.. <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                                Starting var:.. self = <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                                15:57:52.429456 call        49   def __hash__(self):
                                15:57:52.430453 line        53     return id(self._wrapped)
                                15:57:52.430453 return      53     return id(self._wrapped)
                                Return value:.. 2146783279032
                            15:57:52.430453 exception  118     return self._storage[self._wrap_key(key)]
                            KeyError: <_ObjectIdentityWrapper wrapping <tf.O...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                            Call ended by exception
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                        15:57:52.431451 exception  660             return self[key]
                        KeyError: <_ObjectIdentityWrapper wrapping <tf.O...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                        15:57:52.432448 line       661         except KeyError:
                        15:57:52.432448 line       662             return default
                        15:57:52.432448 return     662             return default
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    New var:....... j = None
                    15:57:52.433445 line       356       if j is None:
                    15:57:52.433445 line       357         j = len(seen_fetches)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                        Starting var:.. self = ObjectIdentityDictionary({})
                        15:57:52.433445 call       126   def __len__(self):
                        15:57:52.434442 line       127     return len(self._storage)
                        15:57:52.434442 return     127     return len(self._storage)
                        Return value:.. 0
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    Modified var:.. j = 0
                    15:57:52.435440 line       358         seen_fetches[f] = j
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                        Starting var:.. self = ObjectIdentityDictionary({})
                        Starting var:.. key = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                        Starting var:.. value = 0
                        15:57:52.435440 call       120   def __setitem__(self, key, value):
                        15:57:52.436437 line       121     self._storage[self._wrap_key(key)] = value
                            Starting var:.. self = ObjectIdentityDictionary({})
                            Starting var:.. key = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                            15:57:52.437434 call       114   def _wrap_key(self, key):
                            15:57:52.437434 line       115     return _ObjectIdentityWrapper(key)
                                Starting var:.. self = REPR FAILED
                                Starting var:.. wrapped = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                                15:57:52.438432 call        33   def __init__(self, wrapped):
                                15:57:52.438432 line        34     self._wrapped = wrapped
                                Modified var:.. self = <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                                15:57:52.438432 return      34     self._wrapped = wrapped
                                Return value:.. None
                            15:57:52.439429 return     115     return _ObjectIdentityWrapper(key)
                            Return value:.. <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                            Starting var:.. self = <_ObjectIdentityWrapper wrapping <tf.Operation '...7/AssignAddVariableOp' type=AssignAddVariableOp>>
                            15:57:52.439429 call        49   def __hash__(self):
                            15:57:52.440427 line        53     return id(self._wrapped)
                            15:57:52.440427 return      53     return id(self._wrapped)
                            Return value:.. 2146783279032
                        Modified var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                        15:57:52.441424 return     121     self._storage[self._wrap_key(key)] = value
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    Modified var:.. seen_fetches = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                    15:57:52.441424 line       359         unique_fetches.append(f)
                    Modified var:.. unique_fetches = [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
                    15:57:52.442421 line       360       m_value_indices.append(j)
                    Modified var:.. m_value_indices = [0]
                    15:57:52.442421 line       354     for f in m.unique_fetches():
                    15:57:52.443418 line       361     value_indices.append(m_value_indices)
                    Modified var:.. value_indices = [[0]]
                    15:57:52.443418 line       352   for m in fetch_mappers:
                    Modified var:.. m = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9EA90>
                    15:57:52.444416 line       353     m_value_indices = []
                    Modified var:.. m_value_indices = []
                    15:57:52.444416 line       354     for f in m.unique_fetches():
                        Starting var:.. self = <tensorflow.python.client.session._ElementFetchMapper object at 0x000001F3DBB9EA90>
                        15:57:52.444416 call       318   def unique_fetches(self):
                        15:57:52.445413 line       319     return self._unique_fetches
                        15:57:52.445413 return     319     return self._unique_fetches
                        Return value:.. [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
                    Modified var:.. f = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                    15:57:52.445413 line       355       j = seen_fetches.get(f)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                        Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                        Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                        Starting var:.. default = None
                        15:57:52.446410 call       657     def get(self, key, default=None):
                        15:57:52.447408 line       659         try:
                        15:57:52.447408 line       660             return self[key]
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                            Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                            Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.448406 call       117   def __getitem__(self, key):
                            15:57:52.448406 line       118     return self._storage[self._wrap_key(key)]
                                Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                                Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                15:57:52.449402 call       114   def _wrap_key(self, key):
                                15:57:52.449402 line       115     return _ObjectIdentityWrapper(key)
                                    Starting var:.. self = REPR FAILED
                                    Starting var:.. wrapped = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                    15:57:52.450400 call        33   def __init__(self, wrapped):
                                    15:57:52.450400 line        34     self._wrapped = wrapped
                                    Modified var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                                    15:57:52.450400 return      34     self._wrapped = wrapped
                                    Return value:.. None
                                15:57:52.451397 return     115     return _ObjectIdentityWrapper(key)
                                Return value:.. <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                                Starting var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                                15:57:52.451397 call        49   def __hash__(self):
                                15:57:52.452394 line        53     return id(self._wrapped)
                                15:57:52.452394 return      53     return id(self._wrapped)
                                Return value:.. 2146783279760
                            15:57:52.453392 exception  118     return self._storage[self._wrap_key(key)]
                            KeyError: <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                            Call ended by exception
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                        15:57:52.453392 exception  660             return self[key]
                        KeyError: <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                        15:57:52.454389 line       661         except KeyError:
                        15:57:52.454389 line       662             return default
                        15:57:52.454389 return     662             return default
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    Modified var:.. j = None
                    15:57:52.455387 line       356       if j is None:
                    15:57:52.456384 line       357         j = len(seen_fetches)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                        Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                        15:57:52.456384 call       126   def __len__(self):
                        15:57:52.457381 line       127     return len(self._storage)
                        15:57:52.457381 return     127     return len(self._storage)
                        Return value:.. 1
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    Modified var:.. j = 1
                    15:57:52.457381 line       358         seen_fetches[f] = j
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                        Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                        Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                        Starting var:.. value = 1
                        15:57:52.458378 call       120   def __setitem__(self, key, value):
                        15:57:52.459376 line       121     self._storage[self._wrap_key(key)] = value
                            Starting var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...ignAddVariableOp' type=AssignAddVariableOp>>: 0})
                            Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.459376 call       114   def _wrap_key(self, key):
                            15:57:52.460373 line       115     return _ObjectIdentityWrapper(key)
                                Starting var:.. self = REPR FAILED
                                Starting var:.. wrapped = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                                15:57:52.460373 call        33   def __init__(self, wrapped):
                                15:57:52.461370 line        34     self._wrapped = wrapped
                                Modified var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                                15:57:52.461370 return      34     self._wrapped = wrapped
                                Return value:.. None
                            15:57:52.462368 return     115     return _ObjectIdentityWrapper(key)
                            Return value:.. <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                            Starting var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                            15:57:52.462368 call        49   def __hash__(self):
                            15:57:52.462368 line        53     return id(self._wrapped)
                            15:57:52.463365 return      53     return id(self._wrapped)
                            Return value:.. 2146783279760
                        Modified var:.. self = ObjectIdentityDictionary({<_ObjectIdentityWrappe...orker/Identity_2:0' shape=() dtype=float32>>: 1})
                        15:57:52.463365 return     121     self._storage[self._wrap_key(key)] = value
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    Modified var:.. seen_fetches = ObjectIdentityDictionary({<_ObjectIdentityWrappe...orker/Identity_2:0' shape=() dtype=float32>>: 1})
                    15:57:52.464362 line       359         unique_fetches.append(f)
                    Modified var:.. unique_fetches = [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
                    15:57:52.465360 line       360       m_value_indices.append(j)
                    Modified var:.. m_value_indices = [1]
                    15:57:52.465360 line       354     for f in m.unique_fetches():
                    15:57:52.465360 line       361     value_indices.append(m_value_indices)
                    Modified var:.. value_indices = [[0], [1]]
                    15:57:52.466357 line       352   for m in fetch_mappers:
                    15:57:52.466357 line       362   return unique_fetches, value_indices
                    15:57:52.466357 return     362   return unique_fetches, value_indices
                    Return value:.. ([<tf.Operation 'worker/GradientDescent/update_0...entity_2:0' shape=() dtype=float32>], [[0], [1]])
                15:57:52.467393 return     376     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)
                Return value:.. None
            15:57:52.467393 return     266       return _ListFetchMapper(fetch)
            Return value:.. <tensorflow.python.client.session._ListFetchMapper object at 0x000001F3DBB9E630>
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
            Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB6A8D0>
            Starting var:.. type = None
            Starting var:.. value = None
            Starting var:.. traceback = None
            15:57:52.468381 call        85     def __exit__(self, type, value, traceback):
            15:57:52.469379 line        86         if type is None:
            15:57:52.469379 line        87             try:
            15:57:52.470347 line        88                 next(self.gen)
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                Starting var:.. default = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                Starting var:.. g = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                Starting var:.. __class__ = <class 'tensorflow.python.framework.ops._DefaultGraphStack'>
                15:57:52.470347 call      5483         yield g
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E588>
                    Starting var:.. type = None
                    Starting var:.. value = None
                    Starting var:.. traceback = None
                    15:57:52.471373 call        85     def __exit__(self, type, value, traceback):
                    15:57:52.472371 line        86         if type is None:
                    15:57:52.473365 line        87             try:
                    15:57:52.473365 line        88                 next(self.gen)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                        Starting var:.. self = <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                        Starting var:.. mode = 0
                        Starting var:.. ctx = <tensorflow.python.eager.context._ThreadLocalData object at 0x000001F3D5CE0FA8>
                        Starting var:.. old_mode = 0
                        Starting var:.. old_is_eager = False
                        15:57:52.473365 call       647       yield
                        15:57:52.474338 line       649       ctx.is_eager = old_is_eager
                        15:57:52.475334 line       650       ctx.mode = old_mode
                        15:57:52.475334 line       651       if mode == EAGER_MODE:
                        15:57:52.475334 return     651       if mode == EAGER_MODE:
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    15:57:52.476344 exception   88                 next(self.gen)
                    StopIteration
                    15:57:52.476344 line        89             except StopIteration:
                    15:57:52.477328 line        90                 return False
                    15:57:52.477328 return      90                 return False
                    Return value:.. False
                    Starting var:.. self = <contextlib._GeneratorContextManager object at 0x000001F3DBB9E4E0>
                    Starting var:.. type = None
                    Starting var:.. value = None
                    Starting var:.. traceback = None
                    15:57:52.477328 call        85     def __exit__(self, type, value, traceback):
                    15:57:52.478326 line        86         if type is None:
                    15:57:52.479348 line        87             try:
                    15:57:52.479348 line        88                 next(self.gen)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                        Starting var:.. self = <tensorflow.python.framework.ops._DefaultGraphStack object at 0x000001F3D2182348>
                        Starting var:.. default = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                        15:57:52.479348 call      5290       yield default
                        15:57:52.480321 line      5293       if self.stack:
                        15:57:52.480321 line      5294         if self._enforce_nesting:
                        15:57:52.480321 line      5295           if self.stack[-1] is not default:
                        15:57:52.481317 line      5299           self.stack.pop()
                        15:57:52.481317 return    5299           self.stack.pop()
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
                    15:57:52.481317 exception   88                 next(self.gen)
                    StopIteration
                    15:57:52.482315 line        89             except StopIteration:
                    15:57:52.482315 line        90                 return False
                    15:57:52.482315 return      90                 return False
                    Return value:.. False
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                15:57:52.483312 line      5487       context.context().context_switches.pop()
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\eager\context.py
                    15:57:52.483312 call      1576 def context_safe():
                    15:57:52.484310 line      1578   return _context
                    15:57:52.484310 return    1578   return _context
                    Return value:.. <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                    Starting var:.. self = <tensorflow.python.eager.context.Context object at 0x000001F3D585EE48>
                    15:57:52.484310 call      1483   def context_switches(self):
                    15:57:52.485307 line      1485     return self._context_switches
                    15:57:52.485307 return    1485     return self._context_switches
                    Return value:.. <tensorflow.python.eager.context._ContextSwitchStack object at 0x000001F3D5D1E288>
                    Starting var:.. self = <tensorflow.python.eager.context._ContextSwitchStack object at 0x000001F3D5D1E288>
                    15:57:52.485307 call       239   def pop(self):
                    15:57:52.486304 line       242     self.stack.pop()
                    15:57:52.486304 return     242     self.stack.pop()
                    Return value:.. None
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                15:57:52.487301 return    5487       context.context().context_switches.pop()
                Return value:.. None
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\contextlib.py
            15:57:52.487301 exception   88                 next(self.gen)
            StopIteration
            15:57:52.488299 line        89             except StopIteration:
            15:57:52.488299 line        90                 return False
            15:57:52.488299 return      90                 return False
            Return value:.. False
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:52.489297 line       475     self._fetches = []
        15:57:52.489297 line       476     self._targets = []
        15:57:52.489297 line       477     self._feeds = feeds
        15:57:52.490294 line       479         feed_handles or object_identity.ObjectIdentityDictionary())
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
            Starting var:.. self = REPR FAILED
            15:57:52.490294 call       111   def __init__(self):
            15:57:52.491291 line       112     self._storage = {}
            Modified var:.. self = ObjectIdentityDictionary({})
            15:57:52.491291 return     112     self._storage = {}
            Return value:.. None
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:52.491291 line       480     self._ops = []
        15:57:52.492288 line       481     self._fetch_handles = object_identity.ObjectIdentityDictionary()
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
            Starting var:.. self = REPR FAILED
            15:57:52.492288 call       111   def __init__(self):
            15:57:52.493285 line       112     self._storage = {}
            Modified var:.. self = ObjectIdentityDictionary({})
            15:57:52.493285 return     112     self._storage = {}
            Return value:.. None
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:52.494283 line       482     for fetch in self._fetch_mapper.unique_fetches():
            Starting var:.. self = <tensorflow.python.client.session._ListFetchMapper object at 0x000001F3DBB9E630>
            15:57:52.494283 call       378   def unique_fetches(self):
            15:57:52.494283 line       379     return self._unique_fetches
            15:57:52.495280 return     379     return self._unique_fetches
            Return value:.. [<tf.Operation 'worker/GradientDescent/update_0_...or 'worker/Identity_2:0' shape=() dtype=float32>]
        New var:....... fetch = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
        15:57:52.495280 line       483       if isinstance(fetch, ops.Operation):
        15:57:52.496277 line       484         self._assert_fetchable(graph, fetch)
            Starting var:.. self = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
            Starting var:.. graph = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
            Starting var:.. op = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
            15:57:52.496277 call       498   def _assert_fetchable(self, graph, op):
            15:57:52.497275 line       499     if not graph.is_fetchable(op):
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                Starting var:.. tensor_or_op = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
                15:57:52.497275 call      4906   def is_fetchable(self, tensor_or_op):
                15:57:52.498272 line      4908     if isinstance(tensor_or_op, Tensor):
                15:57:52.498272 line      4911       return tensor_or_op not in self._unfetchable_ops
                15:57:52.498272 return    4911       return tensor_or_op not in self._unfetchable_ops
                Return value:.. True
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            15:57:52.499269 return     499     if not graph.is_fetchable(op):
            Return value:.. None
        15:57:52.499269 line       485         self._targets.append(fetch)
        15:57:52.500267 line       486         self._ops.append(True)
        15:57:52.500267 line       492       if (isinstance(fetch, ops.Tensor) and
        15:57:52.500267 line       482     for fetch in self._fetch_mapper.unique_fetches():
        Modified var:.. fetch = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
        15:57:52.500267 line       483       if isinstance(fetch, ops.Operation):
        15:57:52.501264 line       488         self._assert_fetchable(graph, fetch.op)
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
            Starting var:.. self = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
            15:57:52.501264 call       398   def op(self):
            15:57:52.502261 line       400     return self._op
            15:57:52.502261 return     400     return self._op
            Return value:.. <tf.Operation 'worker/Identity_2' type=Identity>
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            Starting var:.. self = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
            Starting var:.. graph = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
            Starting var:.. op = <tf.Operation 'worker/Identity_2' type=Identity>
            15:57:52.502261 call       498   def _assert_fetchable(self, graph, op):
            15:57:52.503287 line       499     if not graph.is_fetchable(op):
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                Starting var:.. tensor_or_op = <tf.Operation 'worker/Identity_2' type=Identity>
                15:57:52.504257 call      4906   def is_fetchable(self, tensor_or_op):
                15:57:52.505279 line      4908     if isinstance(tensor_or_op, Tensor):
                15:57:52.505279 line      4911       return tensor_or_op not in self._unfetchable_ops
                15:57:52.505279 return    4911       return tensor_or_op not in self._unfetchable_ops
                Return value:.. True
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            15:57:52.505279 return     499     if not graph.is_fetchable(op):
            Return value:.. None
        15:57:52.506251 line       489         self._fetches.append(fetch)
        15:57:52.506251 line       490         self._ops.append(False)
        15:57:52.507249 line       492       if (isinstance(fetch, ops.Tensor) and
        15:57:52.507249 line       493           (fetch.op.type == 'GetSessionHandle' or
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
            Starting var:.. self = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
            15:57:52.507249 call       398   def op(self):
            15:57:52.508246 line       400     return self._op
            15:57:52.508246 return     400     return self._op
            Return value:.. <tf.Operation 'worker/Identity_2' type=Identity>
            Starting var:.. self = <tf.Operation 'worker/Identity_2' type=Identity>
            15:57:52.508246 call      2257   def type(self):
            15:57:52.509243 line      2259     return c_api.TF_OperationOpType(self._c_op)
            15:57:52.509243 return    2259     return c_api.TF_OperationOpType(self._c_op)
            Return value:.. 'Identity'
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:52.510240 line       494            fetch.op.type == 'GetSessionHandleV2')):
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
            Starting var:.. self = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
            15:57:52.510240 call       398   def op(self):
            15:57:52.511238 line       400     return self._op
            15:57:52.511238 return     400     return self._op
            Return value:.. <tf.Operation 'worker/Identity_2' type=Identity>
            Starting var:.. self = <tf.Operation 'worker/Identity_2' type=Identity>
            15:57:52.511238 call      2257   def type(self):
            15:57:52.512235 line      2259     return c_api.TF_OperationOpType(self._c_op)
            15:57:52.512235 return    2259     return c_api.TF_OperationOpType(self._c_op)
            Return value:.. 'Identity'
        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
        15:57:52.512235 line       482     for fetch in self._fetch_mapper.unique_fetches():
        15:57:52.513232 line       496     self._final_fetches = [x for x in self._fetches if x not in feeds]
            Starting var:.. .0 = <list_iterator object at 0x000001F3DBB6A8D0>
            Starting var:.. feeds = ObjectIdentityDictionary({})
            15:57:52.513232 call       496     self._final_fetches = [x for x in self._fetches if x not in feeds]
            15:57:52.514230 line       496     self._final_fetches = [x for x in self._fetches if x not in feeds]
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                Starting var:.. self = ObjectIdentityDictionary({})
                Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                15:57:52.514230 call       664     def __contains__(self, key):
                15:57:52.515227 line       665         try:
                15:57:52.515227 line       666             self[key]
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                    Starting var:.. self = ObjectIdentityDictionary({})
                    Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                    15:57:52.515227 call       117   def __getitem__(self, key):
                    15:57:52.516224 line       118     return self._storage[self._wrap_key(key)]
                        Starting var:.. self = ObjectIdentityDictionary({})
                        Starting var:.. key = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                        15:57:52.516224 call       114   def _wrap_key(self, key):
                        15:57:52.517222 line       115     return _ObjectIdentityWrapper(key)
                            Starting var:.. self = REPR FAILED
                            Starting var:.. wrapped = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                            15:57:52.517222 call        33   def __init__(self, wrapped):
                            15:57:52.518219 line        34     self._wrapped = wrapped
                            Modified var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                            15:57:52.518219 return      34     self._wrapped = wrapped
                            Return value:.. None
                        15:57:52.519217 return     115     return _ObjectIdentityWrapper(key)
                        Return value:.. <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                        Starting var:.. self = <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                        15:57:52.519217 call        49   def __hash__(self):
                        15:57:52.520214 line        53     return id(self._wrapped)
                        15:57:52.520214 return      53     return id(self._wrapped)
                        Return value:.. 2146783279760
                    15:57:52.520214 exception  118     return self._storage[self._wrap_key(key)]
                    KeyError: <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                    Call ended by exception
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                15:57:52.521211 exception  666             self[key]
                KeyError: <_ObjectIdentityWrapper wrapping <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>>
                15:57:52.522208 line       667         except KeyError:
                15:57:52.522208 line       668             return False
                15:57:52.522208 return     668             return False
                Return value:.. False
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            New var:....... x = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
            15:57:52.523205 line       496     self._final_fetches = [x for x in self._fetches if x not in feeds]
            15:57:52.523205 return     496     self._final_fetches = [x for x in self._fetches if x not in feeds]
            Return value:.. [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
        15:57:52.524203 return     496     self._final_fetches = [x for x in self._fetches if x not in feeds]
        Return value:.. None
    New var:....... fetch_handler = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
    15:57:52.524203 line      1173     _ = self._update_with_movers(feed_dict_tensor, feed_map)
        Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
        Starting var:.. feed_dict = ObjectIdentityDictionary({})
        Starting var:.. feed_map = {}
        15:57:52.525200 call      1413   def _update_with_movers(self, feed_dict, feed_map):
        15:57:52.526198 line      1417     handle_movers = []
        New var:....... handle_movers = []
        15:57:52.526198 line      1418     for feed_name, val in feed_map.items():
        15:57:52.526198 line      1423     if not handle_movers:
        15:57:52.526198 line      1424       return []
        15:57:52.527195 return    1424       return []
        Return value:.. []
    New var:....... _ = []
    15:57:52.527195 line      1174     final_fetches = fetch_handler.fetches()
        Starting var:.. self = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
        15:57:52.528192 call       507   def fetches(self):
        15:57:52.528192 line       513     return self._final_fetches
        15:57:52.528192 return     513     return self._final_fetches
        Return value:.. [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
    New var:....... final_fetches = [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
    15:57:52.529189 line      1175     final_targets = fetch_handler.targets()
        Starting var:.. self = <tensorflow.python.client.session._FetchHandler object at 0x000001F3DBB6A7F0>
        15:57:52.529189 call       515   def targets(self):
        15:57:52.530187 line       521     return self._targets
        15:57:52.530187 return     521     return self._targets
        Return value:.. [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
    New var:....... final_targets = [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
    15:57:52.530187 line      1178     if final_fetches or final_targets or (handle and feed_dict_tensor):
    15:57:52.531184 line      1179       results = self._do_run(handle, final_targets, final_fetches,
    15:57:52.531184 line      1180                              feed_dict_tensor, options, run_metadata)
        Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
        Starting var:.. handle = None
        Starting var:.. target_list = [<tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>]
        Starting var:.. fetch_list = [<tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>]
        Starting var:.. feed_dict = ObjectIdentityDictionary({})
        Starting var:.. options = None
        Starting var:.. run_metadata = None
        15:57:52.531184 call      1318   def _do_run(self, handle, target_list, fetch_list, feed_dict, options,
        15:57:52.533179 line      1340     feeds = dict((t._as_tf_output(), v) for t, v in feed_dict.items())
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
            Starting var:.. self = ObjectIdentityDictionary({})
            15:57:52.533179 call       676     def items(self):
            15:57:52.534176 line       678         return ItemsView(self)
                Starting var:.. self = REPR FAILED
                Starting var:.. mapping = ObjectIdentityDictionary({})
                15:57:52.534176 call       698     def __init__(self, mapping):
                15:57:52.535202 line       699         self._mapping = mapping
                Modified var:.. self = ItemsView(ObjectIdentityDictionary({}))
                15:57:52.535202 return     699         self._mapping = mapping
                Return value:.. None
            15:57:52.536199 return     678         return ItemsView(self)
            Return value:.. ItemsView(ObjectIdentityDictionary({}))
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            Starting var:.. .0 = <generator object ItemsView.__iter__ at 0x000001F3DBB7D360>
            15:57:52.536199 call      1340     feeds = dict((t._as_tf_output(), v) for t, v in feed_dict.items())
            15:57:52.537194 line      1340     feeds = dict((t._as_tf_output(), v) for t, v in feed_dict.items())
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                Starting var:.. self = ItemsView(ObjectIdentityDictionary({}))
                15:57:52.537194 call       742     def __iter__(self):
                15:57:52.538166 line       743         for key in self._mapping:
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\object_identity.py
                    Starting var:.. self = ObjectIdentityDictionary({})
                    15:57:52.538166 call       129   def __iter__(self):
                    15:57:52.538166 line       130     for key in self._storage:
                    15:57:52.539192 return     130     for key in self._storage:
                    Return value:.. None
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\_collections_abc.py
                15:57:52.539192 exception  743         for key in self._mapping:
                StopIteration
                15:57:52.540160 return     743         for key in self._mapping:
                Return value:.. None
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            15:57:52.540160 exception 1340     feeds = dict((t._as_tf_output(), v) for t, v in feed_dict.items())
            StopIteration
            15:57:52.541158 return    1340     feeds = dict((t._as_tf_output(), v) for t, v in feed_dict.items())
            Return value:.. None
        New var:....... feeds = {}
        15:57:52.541158 line      1341     fetches = [t._as_tf_output() for t in fetch_list]
            Starting var:.. .0 = <list_iterator object at 0x000001F3DBB9E4E0>
            15:57:52.542176 call      1341     fetches = [t._as_tf_output() for t in fetch_list]
            15:57:52.542176 line      1341     fetches = [t._as_tf_output() for t in fetch_list]
                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                Starting var:.. self = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
                15:57:52.542176 call       686   def _as_tf_output(self):
                15:57:52.543152 line       692     if self._tf_output is None:
                15:57:52.543152 line       694     return self._tf_output
                15:57:52.543152 return     694     return self._tf_output
                Return value:.. <tensorflow.python.pywrap_tensorflow_internal.TF...ct of type 'TF_Output *' at 0x000001F3D9794DE0> >
            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
            New var:....... t = <tf.Tensor 'worker/Identity_2:0' shape=() dtype=float32>
            15:57:52.545147 line      1341     fetches = [t._as_tf_output() for t in fetch_list]
            15:57:52.545147 return    1341     fetches = [t._as_tf_output() for t in fetch_list]
            Return value:.. [<tensorflow.python.pywrap_tensorflow_internal.T...t of type 'TF_Output *' at 0x000001F3D9794DE0> >]
        New var:....... fetches = [<tensorflow.python.pywrap_tensorflow_internal.T...t of type 'TF_Output *' at 0x000001F3D9794DE0> >]
        15:57:52.546144 line      1342     targets = [op._c_op for op in target_list]
            Starting var:.. .0 = <list_iterator object at 0x000001F3DBB6A780>
            15:57:52.546144 call      1342     targets = [op._c_op for op in target_list]
            15:57:52.547141 line      1342     targets = [op._c_op for op in target_list]
            New var:....... op = <tf.Operation 'worker/GradientDescent/update_0_7/AssignAddVariableOp' type=AssignAddVariableOp>
            15:57:52.547141 line      1342     targets = [op._c_op for op in target_list]
            15:57:52.547141 return    1342     targets = [op._c_op for op in target_list]
            Return value:.. [<Swig Object of type 'TF_Operation *' at 0x000001F3D63E9F60>]
        New var:....... targets = [<Swig Object of type 'TF_Operation *' at 0x000001F3D63E9F60>]
        15:57:52.548139 line      1346     def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):
        New var:....... _run_fn = <function BaseSession._do_run.<locals>._run_fn at 0x000001F3DBB8B598>
        15:57:52.548139 line      1352     def _prun_fn(handle, feed_dict, fetch_list):
        New var:....... _prun_fn = <function BaseSession._do_run.<locals>._prun_fn at 0x000001F3DBB8B6A8>
        15:57:52.549136 line      1357     if handle is None:
        15:57:52.549136 line      1358       return self._do_call(_run_fn, feeds, fetches, targets, options,
        15:57:52.550133 line      1359                            run_metadata)
            Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
            Starting var:.. fn = <function BaseSession._do_run.<locals>._run_fn at 0x000001F3DBB8B598>
            Starting var:.. args = ({}, [<tensorflow.python.pywrap_tensorflow_inter...Operation *' at 0x000001F3D63E9F60>], None, None)
            15:57:52.550133 call      1363   def _do_call(self, fn, *args):
            15:57:52.551130 line      1364     try:
            15:57:52.551130 line      1365       return fn(*args)
                Starting var:.. feed_dict = {}
                Starting var:.. fetch_list = [<tensorflow.python.pywrap_tensorflow_internal.T...t of type 'TF_Output *' at 0x000001F3D9794DE0> >]
                Starting var:.. target_list = [<Swig Object of type 'TF_Operation *' at 0x000001F3D63E9F60>]
                Starting var:.. options = None
                Starting var:.. run_metadata = None
                Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
                15:57:52.551130 call      1346     def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):
                15:57:52.553125 line      1348       self._extend_graph()
                    Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
                    15:57:52.553125 call      1386   def _extend_graph(self):
                    15:57:52.554123 line      1387     with self._graph._session_run_lock():  # pylint: disable=protected-access
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                        Starting var:.. self = <tensorflow.python.framework.ops.Graph object at 0x000001F3D63BF710>
                        15:57:52.554123 call      5099   def _session_run_lock(self):
                        15:57:52.554123 line      5104     return self._group_lock.group(_SESSION_RUN_LOCK_GROUP)
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\lock_util.py
                            Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                            Starting var:.. group_id = 1
                            15:57:52.555120 call        74   def group(self, group_id):
                            15:57:52.556117 line        83     self._validate_group_id(group_id)
                                Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                                Starting var:.. group_id = 1
                                15:57:52.556117 call       110   def _validate_group_id(self, group_id):
                                15:57:52.557114 line       111     if group_id < 0 or group_id >= self._num_groups:
                                15:57:52.557114 return     111     if group_id < 0 or group_id >= self._num_groups:
                                Return value:.. None
                            15:57:52.558112 line        84     return self._Context(self, group_id)
                                Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock._Context object at 0x000001F3DBBB6550>
                                Starting var:.. lock = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                                Starting var:.. group_id = 1
                                15:57:52.558112 call       119     def __init__(self, lock, group_id):
                                15:57:52.559109 line       120       self._lock = lock
                                15:57:52.559109 line       121       self._group_id = group_id
                                15:57:52.559109 return     121       self._group_id = group_id
                                Return value:.. None
                            15:57:52.560106 return      84     return self._Context(self, group_id)
                            Return value:.. <tensorflow.python.util.lock_util.GroupLock._Context object at 0x000001F3DBBB6550>
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\framework\ops.py
                        15:57:52.560106 return    5104     return self._group_lock.group(_SESSION_RUN_LOCK_GROUP)
                        Return value:.. <tensorflow.python.util.lock_util.GroupLock._Context object at 0x000001F3DBBB6550>
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\lock_util.py
                        Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock._Context object at 0x000001F3DBBB6550>
                        15:57:52.561104 call       123     def __enter__(self):
                        15:57:52.561104 line       124       self._lock.acquire(self._group_id)
                            Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                            Starting var:.. group_id = 1
                            15:57:52.562101 call        86   def acquire(self, group_id):
                            15:57:52.562101 line        88     self._validate_group_id(group_id)
                                Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                                Starting var:.. group_id = 1
                                15:57:52.563098 call       110   def _validate_group_id(self, group_id):
                                15:57:52.563098 line       111     if group_id < 0 or group_id >= self._num_groups:
                                15:57:52.563098 return     111     if group_id < 0 or group_id >= self._num_groups:
                                Return value:.. None
                            15:57:52.564096 line        90     self._ready.acquire()
                            15:57:52.564096 line        91     while self._another_group_active(group_id):
                                Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                                Starting var:.. group_id = 1
                                15:57:52.564096 call       106   def _another_group_active(self, group_id):
                                15:57:52.565093 line       107     return any(
                                15:57:52.565093 line       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    Starting var:.. .0 = <enumerate object at 0x000001F3DBBE6A68>
                                    Starting var:.. group_id = 1
                                    15:57:52.566090 call       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    15:57:52.566090 line       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    New var:....... g = 0
                                    New var:....... c = 0
                                    15:57:52.566090 return     108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    Return value:.. False
                                    Starting var:.. .0 = <enumerate object at 0x000001F3DBBE6A68>
                                    Starting var:.. g = 0
                                    Starting var:.. c = 0
                                    Starting var:.. group_id = 1
                                    15:57:52.567088 call       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    15:57:52.568085 line       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    Modified var:.. g = 1
                                    15:57:52.569082 line       108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    15:57:52.569082 return     108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                    Return value:.. None
                                15:57:52.569082 return     108         c > 0 for g, c in enumerate(self._group_member_counts) if g != group_id)
                                Return value:.. False
                            15:57:52.570080 line        93     self._group_member_counts[group_id] += 1
                            15:57:52.570080 line        94     self._ready.release()
                            15:57:52.570080 return      94     self._ready.release()
                            Return value:.. None
                        15:57:52.571077 return     124       self._lock.acquire(self._group_id)
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    15:57:52.571077 line      1388       tf_session.ExtendSession(self._session)
                        Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\lock_util.py
                        Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock._Context object at 0x000001F3DBBB6550>
                        Starting var:.. type_arg = None
                        Starting var:.. value_arg = None
                        Starting var:.. traceback_arg = None
                        15:57:52.572074 call       126     def __exit__(self, type_arg, value_arg, traceback_arg):
                        15:57:52.573072 line       127       del type_arg, value_arg, traceback_arg
                        15:57:52.573072 line       128       self._lock.release(self._group_id)
                            Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                            Starting var:.. group_id = 1
                            15:57:52.573072 call        96   def release(self, group_id):
                            15:57:52.574069 line        98     self._validate_group_id(group_id)
                                Starting var:.. self = <tensorflow.python.util.lock_util.GroupLock object at 0x000001F3D63BF748>
                                Starting var:.. group_id = 1
                                15:57:52.574069 call       110   def _validate_group_id(self, group_id):
                                15:57:52.575066 line       111     if group_id < 0 or group_id >= self._num_groups:
                                15:57:52.575066 return     111     if group_id < 0 or group_id >= self._num_groups:
                                Return value:.. None
                            15:57:52.576064 line       100     self._ready.acquire()
                            15:57:52.576064 line       101     self._group_member_counts[group_id] -= 1
                            15:57:52.576064 line       102     if self._group_member_counts[group_id] == 0:
                            15:57:52.576064 line       103       self._ready.notifyAll()
                                Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\threading.py
                                Starting var:.. self = <Condition(<locked _thread.lock object at 0x000001F3D63D0210>, 0)>
                                15:57:52.577061 call       357     def notify_all(self):
                                15:57:52.578059 line       364         self.notify(len(self._waiters))
                                    Starting var:.. self = <Condition(<locked _thread.lock object at 0x000001F3D63D0210>, 0)>
                                    Starting var:.. n = 0
                                    15:57:52.578059 call       334     def notify(self, n=1):
                                    15:57:52.579056 line       344         if not self._is_owned():
                                        Starting var:.. self = <Condition(<locked _thread.lock object at 0x000001F3D63D0210>, 0)>
                                        15:57:52.579056 call       254     def _is_owned(self):
                                        15:57:52.580053 line       257         if self._lock.acquire(0):
                                        15:57:52.580053 line       261             return True
                                        15:57:52.580053 return     261             return True
                                        Return value:.. True
                                    15:57:52.581050 line       346         all_waiters = self._waiters
                                    New var:....... all_waiters = deque([])
                                    15:57:52.581050 line       347         waiters_to_notify = _deque(_islice(all_waiters, n))
                                    New var:....... waiters_to_notify = deque([])
                                    15:57:52.581050 line       348         if not waiters_to_notify:
                                    15:57:52.582048 line       349             return
                                    15:57:52.582048 return     349             return
                                    Return value:.. None
                                15:57:52.582048 return     364         self.notify(len(self._waiters))
                                Return value:.. None
                            Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\util\lock_util.py
                            15:57:52.583045 line       104     self._ready.release()
                            15:57:52.583045 return     104     self._ready.release()
                            Return value:.. None
                        15:57:52.584042 return     128       self._lock.release(self._group_id)
                        Return value:.. None
                    Source path:... C:\Users\Wu\Anaconda3\envs\TF2CPU\lib\site-packages\tensorflow_core\python\client\session.py
                    15:57:52.584042 return    1388       tf_session.ExtendSession(self._session)
                    Return value:.. None
                15:57:52.585040 line      1349       return self._call_tf_sessionrun(options, feed_dict, fetch_list,
                15:57:52.585040 line      1350                                       target_list, run_metadata)
                    Starting var:.. self = <tensorflow.python.client.session.Session object at 0x000001F3B9541860>
                    Starting var:.. options = None
                    Starting var:.. feed_dict = {}
                    Starting var:.. fetch_list = [<tensorflow.python.pywrap_tensorflow_internal.T...t of type 'TF_Output *' at 0x000001F3D9794DE0> >]
                    Starting var:.. target_list = [<Swig Object of type 'TF_Operation *' at 0x000001F3D63E9F60>]
                    Starting var:.. run_metadata = None
                    15:57:52.585040 call      1439   def _call_tf_sessionrun(self, options, feed_dict, fetch_list, target_list,
                    15:57:52.587034 line      1441     return tf_session.TF_SessionRun_wrapper(self._session, options, feed_dict,
                    15:57:52.587034 line      1442                                             fetch_list, target_list,
                    15:57:52.587034 line      1443                                             run_metadata)
